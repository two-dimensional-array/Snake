
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800a728  0800a728  0001a728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac54  0800ac54  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac5c  0800ac5c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ac6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00004a08  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c08  20004c08  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015674  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bcd  00000000  00000000  000358a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007820  00000000  00000000  0003b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a52  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d56f2  00000000  00000000  00054922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a014  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c8c  00000000  00000000  0012a064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a710 	.word	0x0800a710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800a710 	.word	0x0800a710

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4798      	blx	r3
    }
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f001 f800 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f83e 	bl	8000fbc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 f8b0 	bl	80010a4 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f44:	f001 ffb8 	bl	8002eb8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of buttonTimer */
  buttonTimerHandle = osTimerNew(ButtonTimer, osTimerPeriodic, NULL, &buttonTimer_attributes);
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <main+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <main+0x60>)
 8000f50:	f002 f966 	bl	8003220 <osTimerNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <main+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (8, sizeof(button_evn_t), &buttonQueue_attributes);
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <main+0x68>)
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f002 fb16 	bl	8003590 <osMessageQueueNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <main+0x6c>)
 8000f68:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of refreshSnakeTas */
  refreshSnakeTasHandle = osThreadNew(RefreshSnakeTask, NULL, &refreshSnakeTas_attributes);
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <main+0x70>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <main+0x74>)
 8000f70:	f002 f867 	bl	8003042 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <main+0x78>)
 8000f78:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(ButtonTask, NULL, &buttonTask_attributes);
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <main+0x7c>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <main+0x80>)
 8000f80:	f002 f85f 	bl	8003042 <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <main+0x84>)
 8000f88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f8a:	f001 ffb9 	bl	8002f00 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x5a>
 8000f90:	0800a804 	.word	0x0800a804
 8000f94:	080014c5 	.word	0x080014c5
 8000f98:	20000228 	.word	0x20000228
 8000f9c:	0800a7ec 	.word	0x0800a7ec
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	0800a7a4 	.word	0x0800a7a4
 8000fa8:	080013f5 	.word	0x080013f5
 8000fac:	2000021c 	.word	0x2000021c
 8000fb0:	0800a7c8 	.word	0x0800a7c8
 8000fb4:	0800145d 	.word	0x0800145d
 8000fb8:	20000220 	.word	0x20000220

08000fbc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 fea0 	bl	8007d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <_Z18SystemClock_Configv+0xe0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	; (800109c <_Z18SystemClock_Configv+0xe0>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <_Z18SystemClock_Configv+0xe0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <_Z18SystemClock_Configv+0xe4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <_Z18SystemClock_Configv+0xe4>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <_Z18SystemClock_Configv+0xe4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800102c:	2308      	movs	r3, #8
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001030:	23a8      	movs	r3, #168	; 0xa8
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f001 faa1 	bl	8002588 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001056:	f000 fa43 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001066:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2105      	movs	r1, #5
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fcfd 	bl	8002a78 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800108e:	f000 fa27 	bl	80014e0 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <_ZL12MX_GPIO_Initv+0x120>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_DB4_Pin
 8001146:	2200      	movs	r2, #0
 8001148:	f64f 4180 	movw	r1, #64640	; 0xfc80
 800114c:	481e      	ldr	r0, [pc, #120]	; (80011c8 <_ZL12MX_GPIO_Initv+0x124>)
 800114e:	f001 fa01 	bl	8002554 <HAL_GPIO_WritePin>
                          |DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <_ZL12MX_GPIO_Initv+0x128>)
 8001166:	f001 f841 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RW_Pin DISP_EN_Pin DISP_DB4_Pin
                           DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_DB4_Pin
 800116a:	f64f 4380 	movw	r3, #64640	; 0xfc80
 800116e:	617b      	str	r3, [r7, #20]
                          |DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <_ZL12MX_GPIO_Initv+0x124>)
 8001184:	f001 f832 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW5_Pin SW3_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW5_Pin|SW3_Pin|SW1_Pin;
 8001188:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <_ZL12MX_GPIO_Initv+0x12c>)
 800119e:	f001 f825 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 80011a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <_ZL12MX_GPIO_Initv+0x130>)
 80011b8:	f001 f818 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020000 	.word	0x40020000

080011d8 <HD44780UDelayUS>:

/* USER CODE BEGIN 4 */

void HD44780UDelayUS(volatile uint32_t micros)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if (micros % 1000)
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HD44780UDelayUS+0x5c>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HD44780UDelayUS+0x3e>
  {
    micros /= 1000;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HD44780UDelayUS+0x5c>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	607b      	str	r3, [r7, #4]
    ++micros;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	e005      	b.n	8001222 <HD44780UDelayUS+0x4a>
  }
  else
  {
    micros /= 1000;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HD44780UDelayUS+0x5c>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	607b      	str	r3, [r7, #4]
  }

  osDelay(micros);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f001 ff9e 	bl	8003166 <osDelay>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	10624dd3 	.word	0x10624dd3

08001238 <ButtonEventHanler>:

void ButtonEventHanler(size_t idx, bool state)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
  button_evn_t event{idx, state};
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	733b      	strb	r3, [r7, #12]
  osMessageQueuePut(buttonQueueHandle, &event, 0, 0);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <ButtonEventHanler+0x2c>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f107 0108 	add.w	r1, r7, #8
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	f002 fa0e 	bl	8003678 <osMessageQueuePut>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000224 	.word	0x20000224

08001268 <_ZZ10DrawScreenvENKUlR6SPointE_clES0_>:
  if (SnakeMove(gCurrDirection))
  {
    SnakeGenerateAple(osKernelGetSysTimerCount());
  }

  DrawSnake([&field](SPoint& point) -> void
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
  {
    field[(point.y * (kMaxPoint.x + 1)) + point.x] = 'O';
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	210f      	movs	r1, #15
 800127c:	3101      	adds	r1, #1
 800127e:	fb03 f101 	mul.w	r1, r3, r1
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	440b      	add	r3, r1
 8001288:	214f      	movs	r1, #79	; 0x4f
 800128a:	54d1      	strb	r1, [r2, r3]
  });
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_ZNSt8functionIFvR6SPointEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe32 	bl	8000f0c <_ZNSt14_Function_baseD1Ev>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <_Z10DrawScreenv>:
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	; 0x38
 80012b8:	af00      	add	r7, sp, #0
  memset(field, ' ', kMaxSnakeSize);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2220      	movs	r2, #32
 80012be:	2120      	movs	r1, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fd25 	bl	8007d10 <memset>
  field[kMaxSnakeSize] = '\0';
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (SnakeMove(gCurrDirection))
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z10DrawScreenv+0xbc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f005 fca7 	bl	8006c24 <_Z9SnakeMove14EMoveDirection>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <_Z10DrawScreenv+0x34>
    SnakeGenerateAple(osKernelGetSysTimerCount());
 80012dc:	f001 fe78 	bl	8002fd0 <osKernelGetSysTimerCount>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fd0e 	bl	8006d04 <_Z17SnakeGenerateAplem>
  DrawSnake([&field](SPoint& point) -> void
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	461a      	mov	r2, r3
 80012ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f8fa 	bl	80014ec <_ZNSt8functionIFvR6SPointEEC1IZ10DrawScreenvEUlS1_E_vvEET_>
 80012f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fd79 	bl	8006df4 <_Z9DrawSnakeSt8functionIFvR6SPointEE>
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ffc6 	bl	8001298 <_ZNSt8functionIFvR6SPointEED1Ev>

  field[(gAple.y * (kMaxPoint.x + 1)) + gAple.x] = '+';
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <_Z10DrawScreenv+0xc0>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	220f      	movs	r2, #15
 8001312:	3201      	adds	r2, #1
 8001314:	fb03 f202 	mul.w	r2, r3, r2
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <_Z10DrawScreenv+0xc0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	3338      	adds	r3, #56	; 0x38
 8001320:	443b      	add	r3, r7
 8001322:	222b      	movs	r2, #43	; 0x2b
 8001324:	f803 2c34 	strb.w	r2, [r3, #-52]

  if (osMutexAcquire(displayMutexHandle, osWaitForever) == osOK)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_Z10DrawScreenv+0xc4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f8a5 	bl	8003480 <osMutexAcquire>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <_Z10DrawScreenv+0xb4>
  {
    HD44780UWriteString(&gDisplay, field);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <_Z10DrawScreenv+0xc8>)
 800134c:	f000 fd36 	bl	8001dbc <HD44780UWriteString>
    osMutexRelease(displayMutexHandle);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <_Z10DrawScreenv+0xc4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 f8de 	bl	8003516 <osMutexRelease>
    gRenderTimeTick = osKernelGetTickCount() + 1000;
 800135a:	f001 fdf7 	bl	8002f4c <osKernelGetTickCount>
 800135e:	4603      	mov	r3, r0
 8001360:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <_Z10DrawScreenv+0xcc>)
 8001366:	6013      	str	r3, [r2, #0]
  }
}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000280 	.word	0x20000280
 8001374:	20004bec 	.word	0x20004bec
 8001378:	2000022c 	.word	0x2000022c
 800137c:	20000000 	.word	0x20000000
 8001380:	20000284 	.word	0x20000284

08001384 <_Z19SnakeMoveControllerj>:

void SnakeMoveController(size_t idx)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b08b      	sub	sp, #44	; 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  const EMoveDirection directions [] =
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <_Z19SnakeMoveControllerj+0x64>)
 800138e:	f107 0418 	add.w	r4, r7, #24
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    EMoveDirection::Left,
    EMoveDirection::Up,
    EMoveDirection::Down
  };

  const EMoveDirection reversedDirections [] =
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <_Z19SnakeMoveControllerj+0x68>)
 800139a:	f107 0408 	add.w	r4, r7, #8
 800139e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    EMoveDirection::Right,
    EMoveDirection::Down,
    EMoveDirection::Up
  };

  if ((directions[idx] != gCurrDirection) && (reversedDirections[idx] != gCurrDirection))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3328      	adds	r3, #40	; 0x28
 80013aa:	443b      	add	r3, r7
 80013ac:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <_Z19SnakeMoveControllerj+0x6c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d013      	beq.n	80013e0 <_Z19SnakeMoveControllerj+0x5c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3328      	adds	r3, #40	; 0x28
 80013be:	443b      	add	r3, r7
 80013c0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <_Z19SnakeMoveControllerj+0x6c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d009      	beq.n	80013e0 <_Z19SnakeMoveControllerj+0x5c>
  {
    gCurrDirection = directions[idx];
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	3328      	adds	r3, #40	; 0x28
 80013d2:	443b      	add	r3, r7
 80013d4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <_Z19SnakeMoveControllerj+0x6c>)
 80013da:	6013      	str	r3, [r2, #0]
    DrawScreen();
 80013dc:	f7ff ff6a 	bl	80012b4 <_Z10DrawScreenv>
  }
}
 80013e0:	bf00      	nop
 80013e2:	372c      	adds	r7, #44	; 0x2c
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	0800a76c 	.word	0x0800a76c
 80013ec:	0800a77c 	.word	0x0800a77c
 80013f0:	20000280 	.word	0x20000280

080013f4 <_Z16RefreshSnakeTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RefreshSnakeTask */
void RefreshSnakeTask(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  gDisplay.blinkCursorState = false;
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_Z16RefreshSnakeTaskPv+0x54>)
 80013fe:	7813      	ldrb	r3, [r2, #0]
 8001400:	f36f 0341 	bfc	r3, #1, #1
 8001404:	7013      	strb	r3, [r2, #0]
  gDisplay.cursorState = false;
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <_Z16RefreshSnakeTaskPv+0x54>)
 8001408:	7813      	ldrb	r3, [r2, #0]
 800140a:	f36f 0300 	bfc	r3, #0, #1
 800140e:	7013      	strb	r3, [r2, #0]
  HD44780UInit(&gDisplay);
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <_Z16RefreshSnakeTaskPv+0x54>)
 8001412:	f000 fd5e 	bl	8001ed2 <HD44780UInit>
  SnakeReset();
 8001416:	f005 fbed 	bl	8006bf4 <_Z10SnakeResetv>
  SnakeGenerateAple(osKernelGetSysTimerCount());
 800141a:	f001 fdd9 	bl	8002fd0 <osKernelGetSysTimerCount>
 800141e:	4603      	mov	r3, r0
 8001420:	4618      	mov	r0, r3
 8001422:	f005 fc6f 	bl	8006d04 <_Z17SnakeGenerateAplem>
  gCurrDirection = EMoveDirection::Right;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <_Z16RefreshSnakeTaskPv+0x58>)
 8001428:	2203      	movs	r2, #3
 800142a:	601a      	str	r2, [r3, #0]
  displayMutexHandle = osMutexNew(&displayMutex_attributes);
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <_Z16RefreshSnakeTaskPv+0x5c>)
 800142e:	f001 ffa1 	bl	8003374 <osMutexNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <_Z16RefreshSnakeTaskPv+0x60>)
 8001436:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
    DrawScreen();
 8001438:	f7ff ff3c 	bl	80012b4 <_Z10DrawScreenv>
    osDelayUntil(gRenderTimeTick);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <_Z16RefreshSnakeTaskPv+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f001 feab 	bl	800319c <osDelayUntil>
    DrawScreen();
 8001446:	e7f7      	b.n	8001438 <_Z16RefreshSnakeTaskPv+0x44>
 8001448:	20000000 	.word	0x20000000
 800144c:	20000280 	.word	0x20000280
 8001450:	0800a814 	.word	0x0800a814
 8001454:	2000022c 	.word	0x2000022c
 8001458:	20000284 	.word	0x20000284

0800145c <_Z10ButtonTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */
  ButtonHandlerInit(gButtonHandlers, kButtonsGPIO, GET_ARR_COUNT(gButtonHandlers));
 8001464:	2205      	movs	r2, #5
 8001466:	4913      	ldr	r1, [pc, #76]	; (80014b4 <_Z10ButtonTaskPv+0x58>)
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <_Z10ButtonTaskPv+0x5c>)
 800146a:	f000 fb00 	bl	8001a6e <ButtonHandlerInit>
  osTimerStart(buttonTimerHandle, 5);
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_Z10ButtonTaskPv+0x60>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2105      	movs	r1, #5
 8001474:	4618      	mov	r0, r3
 8001476:	f001 ff4f 	bl	8003318 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    button_evn_t event;

    if (osMessageQueueGet(buttonQueueHandle, &event, NULL, osWaitForever) == osOK)
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_Z10ButtonTaskPv+0x64>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f107 0108 	add.w	r1, r7, #8
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	2200      	movs	r2, #0
 8001488:	f002 f956 	bl	8003738 <osMessageQueueGet>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <_Z10ButtonTaskPv+0x1e>
    {
      if (event.idx < 4)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d8eb      	bhi.n	800147a <_Z10ButtonTaskPv+0x1e>
      {
        if (event.state)
 80014a2:	7b3b      	ldrb	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0e8      	beq.n	800147a <_Z10ButtonTaskPv+0x1e>
        {
          SnakeMoveController(event.idx);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff6a 	bl	8001384 <_Z19SnakeMoveControllerj>
      else
      {
        //
      }
    }
  }
 80014b0:	e7e3      	b.n	800147a <_Z10ButtonTaskPv+0x1e>
 80014b2:	bf00      	nop
 80014b4:	0800a844 	.word	0x0800a844
 80014b8:	20000230 	.word	0x20000230
 80014bc:	20000228 	.word	0x20000228
 80014c0:	20000224 	.word	0x20000224

080014c4 <_Z11ButtonTimerPv>:
  /* USER CODE END ButtonTask */
}

/* ButtonTimer function */
void ButtonTimer(void *argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTimer */
  ButtonHandler(gButtonHandlers, GET_ARR_COUNT(gButtonHandlers));
 80014cc:	2105      	movs	r1, #5
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <_Z11ButtonTimerPv+0x18>)
 80014d0:	f000 fb05 	bl	8001ade <ButtonHandler>
  /* USER CODE END ButtonTimer */
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000230 	.word	0x20000230

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <_ZNSt8functionIFvR6SPointEEC1IZ10DrawScreenvEUlS1_E_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fcf9 	bl	8000ef0 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80014fe:	463b      	mov	r3, r7
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f81d 	bl	8001540 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E21_M_not_empty_functionIS3_EEbRKT_>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00f      	beq.n	800152c <_ZNSt8functionIFvR6SPointEEC1IZ10DrawScreenvEUlS1_E_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800150c:	687c      	ldr	r4, [r7, #4]
 800150e:	463b      	mov	r3, r7
 8001510:	4618      	mov	r0, r3
 8001512:	f000 f820 	bl	8001556 <_ZSt4moveIRZ10DrawScreenvEUlR6SPointE_EONSt16remove_referenceIT_E4typeEOS5_>
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	4620      	mov	r0, r4
 800151c:	f000 f826 	bl	800156c <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_ZNSt8functionIFvR6SPointEEC1IZ10DrawScreenvEUlS1_E_vvEET_+0x4c>)
 8001524:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <_ZNSt8functionIFvR6SPointEEC1IZ10DrawScreenvEUlS1_E_vvEET_+0x50>)
 800152a:	609a      	str	r2, [r3, #8]
	  }
      }
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	08001591 	.word	0x08001591
 800153c:	080015bb 	.word	0x080015bb

08001540 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	  { return true; }
 8001548:	2301      	movs	r3, #1
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_ZSt4moveIRZ10DrawScreenvEUlR6SPointE_EONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001576:	6838      	ldr	r0, [r7, #0]
 8001578:	f7ff ffed 	bl	8001556 <_ZSt4moveIRZ10DrawScreenvEUlR6SPointE_EONSt16remove_referenceIT_E4typeEOS5_>
 800157c:	4603      	mov	r3, r0
 800157e:	4622      	mov	r2, r4
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f838 	bl	80015f8 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <_ZNSt17_Function_handlerIFvR6SPointEZ10DrawScreenvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f845 	bl	800162a <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E14_M_get_pointerERKSt9_Any_data>
 80015a0:	4604      	mov	r4, r0
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f000 f852 	bl	800164c <_ZSt7forwardIR6SPointEOT_RNSt16remove_referenceIS2_E4typeE>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4620      	mov	r0, r4
 80015ae:	f000 f858 	bl	8001662 <_ZSt10__invoke_rIvRZ10DrawScreenvEUlR6SPointE_JS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 80015b2:	bf00      	nop
      }
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}

080015ba <_ZNSt17_Function_handlerIFvR6SPointEZ10DrawScreenvEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d109      	bne.n	80015e2 <_ZNSt17_Function_handlerIFvR6SPointEZ10DrawScreenvEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f85d 	bl	800168e <_ZNSt9_Any_data9_M_accessIPZ10DrawScreenvEUlR6SPointE_EERT_v>
 80015d4:	4604      	mov	r4, r0
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f000 f827 	bl	800162a <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E14_M_get_pointerERKSt9_Any_data>
 80015dc:	4603      	mov	r3, r0
 80015de:	6023      	str	r3, [r4, #0]
	    break;
 80015e0:	e005      	b.n	80015ee <_ZNSt17_Function_handlerIFvR6SPointEZ10DrawScreenvEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f85c 	bl	80016a6 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80015ee:	2300      	movs	r3, #0
      }
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8001604:	68b8      	ldr	r0, [r7, #8]
 8001606:	f7ff ffa6 	bl	8001556 <_ZSt4moveIRZ10DrawScreenvEUlR6SPointE_EONSt16remove_referenceIT_E4typeEOS5_>
 800160a:	4604      	mov	r4, r0
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fc59 	bl	8000ec4 <_ZNSt9_Any_data9_M_accessEv>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	2004      	movs	r0, #4
 8001618:	f7ff fc48 	bl	8000eac <_ZnwjPv>
 800161c:	4602      	mov	r2, r0
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}

0800162a <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f862 	bl	80016fc <_ZNKSt9_Any_data9_M_accessIZ10DrawScreenvEUlR6SPointE_EERKT_v>
 8001638:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f86a 	bl	8001714 <_ZSt11__addressofIKZ10DrawScreenvEUlR6SPointE_EPT_RS4_>
 8001640:	4603      	mov	r3, r0
 8001642:	bf00      	nop
	}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZSt7forwardIR6SPointEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_ZSt10__invoke_rIvRZ10DrawScreenvEUlR6SPointE_JS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001662:	b5b0      	push	{r4, r5, r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f85c 	bl	800172a <_ZSt7forwardIRZ10DrawScreenvEUlR6SPointE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8001672:	4604      	mov	r4, r0
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ffe9 	bl	800164c <_ZSt7forwardIR6SPointEOT_RNSt16remove_referenceIS2_E4typeE>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4621      	mov	r1, r4
 8001680:	4628      	mov	r0, r5
 8001682:	f000 f85d 	bl	8001740 <_ZSt13__invoke_implIvRZ10DrawScreenvEUlR6SPointE_JS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bdb0      	pop	{r4, r5, r7, pc}

0800168e <_ZNSt9_Any_data9_M_accessIPZ10DrawScreenvEUlR6SPointE_EERT_v>:
      _M_access()
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fc14 	bl	8000ec4 <_ZNSt9_Any_data9_M_accessEv>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80016a6:	b5b0      	push	{r4, r5, r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d016      	beq.n	80016e8 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	dc19      	bgt.n	80016f2 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d002      	beq.n	80016c8 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d00a      	beq.n	80016dc <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80016c6:	e014      	b.n	80016f2 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff ffe0 	bl	800168e <_ZNSt9_Any_data9_M_accessIPZ10DrawScreenvEUlR6SPointE_EERT_v>
 80016ce:	4604      	mov	r4, r0
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f7ff ffaa 	bl	800162a <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E14_M_get_pointerERKSt9_Any_data>
 80016d6:	4603      	mov	r3, r0
 80016d8:	6023      	str	r3, [r4, #0]
	      break;
 80016da:	e00a      	b.n	80016f2 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80016dc:	462a      	mov	r2, r5
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f843 	bl	800176c <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80016e6:	e004      	b.n	80016f2 <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80016e8:	4621      	mov	r1, r4
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f857 	bl	800179e <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80016f0:	bf00      	nop
	  return false;
 80016f2:	2300      	movs	r3, #0
	}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdb0      	pop	{r4, r5, r7, pc}

080016fc <_ZNKSt9_Any_data9_M_accessIZ10DrawScreenvEUlR6SPointE_EERKT_v>:
      _M_access() const
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fbe8 	bl	8000eda <_ZNKSt9_Any_data9_M_accessEv>
 800170a:	4603      	mov	r3, r0
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZSt11__addressofIKZ10DrawScreenvEUlR6SPointE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_ZSt7forwardIRZ10DrawScreenvEUlR6SPointE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZSt13__invoke_implIvRZ10DrawScreenvEUlR6SPointE_JS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	7338      	strb	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f7ff ffec 	bl	800172a <_ZSt7forwardIRZ10DrawScreenvEUlR6SPointE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8001752:	4604      	mov	r4, r0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff79 	bl	800164c <_ZSt7forwardIR6SPointEOT_RNSt16remove_referenceIS2_E4typeE>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fd82 	bl	8001268 <_ZZ10DrawScreenvENKUlR6SPointE_clES0_>
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f7ff ffbf 	bl	80016fc <_ZNKSt9_Any_data9_M_accessIZ10DrawScreenvEUlR6SPointE_EERKT_v>
 800177e:	4604      	mov	r4, r0
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fb9f 	bl	8000ec4 <_ZNSt9_Any_data9_M_accessEv>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	2004      	movs	r0, #4
 800178c:	f7ff fb8e 	bl	8000eac <_ZnwjPv>
 8001790:	4602      	mov	r2, r0
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	6013      	str	r3, [r2, #0]
	}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <_ZNSt14_Function_base13_Base_managerIZ10DrawScreenvEUlR6SPointE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f804 	bl	80017b6 <_ZNSt9_Any_data9_M_accessIZ10DrawScreenvEUlR6SPointE_EERT_v>
	}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZNSt9_Any_data9_M_accessIZ10DrawScreenvEUlR6SPointE_EERT_v>:
      _M_access()
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fb80 	bl	8000ec4 <_ZNSt9_Any_data9_M_accessEv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_MspInit+0x54>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_MspInit+0x54>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x54>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_MspInit+0x54>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_MspInit+0x54>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_MspInit+0x54>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	f000 fcc0 	bl	800219a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 fbc2 	bl	8001fe0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800185c:	f003 fef0 	bl	8005640 <xTaskGetSchedulerState>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001866:	f004 fe8f 	bl	8006588 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}

0800186e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
	return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_kill>:

int _kill(int pid, int sig)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001888:	f006 f9fa 	bl	8007c80 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	2216      	movs	r2, #22
 8001890:	601a      	str	r2, [r3, #0]
	return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_exit>:

void _exit (int status)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a6:	f04f 31ff 	mov.w	r1, #4294967295
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffe7 	bl	800187e <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b0:	e7fe      	b.n	80018b0 <_exit+0x12>

080018b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e00a      	b.n	80018da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c4:	f3af 8000 	nop.w
 80018c8:	4601      	mov	r1, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	b2ca      	uxtb	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbf0      	blt.n	80018c4 <_read+0x12>
	}

return len;
 80018e2:	687b      	ldr	r3, [r7, #4]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e009      	b.n	8001912 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	60ba      	str	r2, [r7, #8]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf1      	blt.n	80018fe <_write+0x12>
	}
	return len;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_close>:

int _close(int file)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194c:	605a      	str	r2, [r3, #4]
	return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_isatty>:

int _isatty(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f006 f960 	bl	8007c80 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20020000 	.word	0x20020000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000288 	.word	0x20000288
 80019f4:	20004c08 	.word	0x20004c08

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <SystemInit+0x20>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <SystemInit+0x20>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a38:	4c0b      	ldr	r4, [pc, #44]	; (8001a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a46:	f7ff ffd7 	bl	80019f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f006 f91f 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7ff fa71 	bl	8000f34 <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001a60:	0800ac6c 	.word	0x0800ac6c
  ldr r2, =_sbss
 8001a64:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001a68:	20004c08 	.word	0x20004c08

08001a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC_IRQHandler>

08001a6e <ButtonHandlerInit>:
#include <string.h>
#include "button_driver.h"
#include "button_driver_config.h"

void ButtonHandlerInit(button_hanler_t* pHandlers, const button_hw_t* const pHWs, size_t buttonCount)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < buttonCount; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e015      	b.n	8001aac <ButtonHandlerInit+0x3e>
	{
		ButtonHandlerReset(&pHandlers[i]);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f818 	bl	8001abe <ButtonHandlerReset>
		memcpy(&pHandlers[i], &pHWs[i], sizeof(button_hw_t));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	18d0      	adds	r0, r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f006 f927 	bl	8007cf4 <memcpy>
	for (size_t i = 0; i < buttonCount; i++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3e5      	bcc.n	8001a80 <ButtonHandlerInit+0x12>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ButtonHandlerReset>:

void ButtonHandlerReset(button_hanler_t* pHandler)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
    pHandler->state = false;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	721a      	strb	r2, [r3, #8]
    pHandler->counter = BUTTON_DRIVER_COUNTER_MIN_VAL;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	60da      	str	r2, [r3, #12]
#ifndef BUTTON_DRIVER_USE_CUSTOM_EVENT_HANDLER
    pHandler->event = NULL;
#endif
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <ButtonHandler>:

void ButtonHandler(button_hanler_t* pHandlers, size_t buttonCount)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < buttonCount; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e06a      	b.n	8001bc4 <ButtonHandler+0xe6>
        if (pHandlers[i].event == NULL)
        {
            continue;
        }
#endif
        if (BUTTON_DRIVER_HW_READ(&pHandlers[i].hw))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f86d 	bl	8001bd6 <GPIORead>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f083 0301 	eor.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <ButtonHandler+0x48>
        {
            if (pHandlers[i].counter < BUTTON_DRIVER_COUNTER_MAX_VAL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b0b      	cmp	r3, #11
 8001b14:	d815      	bhi.n	8001b42 <ButtonHandler+0x64>
            {
                ++pHandlers[i].counter;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	3201      	adds	r2, #1
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	e00d      	b.n	8001b42 <ButtonHandler+0x64>
            }
        }
        else
        {
            if (pHandlers[i].counter > BUTTON_DRIVER_COUNTER_MIN_VAL)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d906      	bls.n	8001b42 <ButtonHandler+0x64>
            {
                --pHandlers[i].counter;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	3a01      	subs	r2, #1
 8001b40:	60da      	str	r2, [r3, #12]
            }
        }

        if (pHandlers[i].counter > BUTTON_DRIVER_COUNTER_PRESSED_VAL)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d919      	bls.n	8001b84 <ButtonHandler+0xa6>
        {
            if (pHandlers[i].state == false)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	7a1b      	ldrb	r3, [r3, #8]
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d02c      	beq.n	8001bbe <ButtonHandler+0xe0>
            {
            	pHandlers[i].state = true;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	721a      	strb	r2, [r3, #8]
#ifndef BUTTON_DRIVER_USE_CUSTOM_EVENT_HANDLER
                pHandlers[i].event(pHandlers[i].state);
#else
                ButtonEventHanler(i, pHandlers[i].state);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	7a1b      	ldrb	r3, [r3, #8]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff fb5b 	bl	8001238 <ButtonEventHanler>
 8001b82:	e01c      	b.n	8001bbe <ButtonHandler+0xe0>
#endif
            }
        }
        else if (pHandlers[i].counter < BUTTON_DRIVER_COUNTER_RELEASED_VAL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d815      	bhi.n	8001bbe <ButtonHandler+0xe0>
        {
            if (pHandlers[i].state == true)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	7a1b      	ldrb	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <ButtonHandler+0xe0>
            {
            	pHandlers[i].state = false;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	721a      	strb	r2, [r3, #8]
#ifndef BUTTON_DRIVER_USE_CUSTOM_EVENT_HANDLER
                pHandlers[i].event(pHandlers[i].state);
#else
                ButtonEventHanler(i, pHandlers[i].state);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	7a1b      	ldrb	r3, [r3, #8]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff fb3d 	bl	8001238 <ButtonEventHanler>
    for (size_t i = 0; i < buttonCount; i++)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d390      	bcc.n	8001aee <ButtonHandler+0x10>
#endif
            }
        }
    }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <GPIORead>:
	GPIOWrite(this, state);
}
#endif

bool GPIORead(gpio_t* pGPIO)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	return GPIO_READ(pGPIO);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	889b      	ldrh	r3, [r3, #4]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f000 fc9b 	bl	8002524 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <GPIOWrite>:

void GPIOWrite(gpio_t* pGPIO, bool state)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
	GPIO_WRITE(pGPIO, state);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8899      	ldrh	r1, [r3, #4]
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <GPIOWrite+0x1e>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <GPIOWrite+0x20>
 8001c20:	2300      	movs	r3, #0
 8001c22:	461a      	mov	r2, r3
 8001c24:	f000 fc96 	bl	8002554 <HAL_GPIO_WritePin>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <GPIOWriteArray>:

	return value;
}

void GPIOWriteArray(gpio_t* pGPIOArray, size_t size, gpio_pin_t value)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < size; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d216      	bcs.n	8001c78 <GPIOWriteArray+0x48>
	{
		GPIOWrite(&pGPIOArray[i], (value & 1));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	441a      	add	r2, r3
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	4610      	mov	r0, r2
 8001c66:	f7ff ffcc 	bl	8001c02 <GPIOWrite>
		value >>= 1;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < size; i++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e7e4      	b.n	8001c42 <GPIOWriteArray+0x12>
	}
}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <SendHalfByte>:
#define __SET_DATA(handler, data) ((handler)->setData(data))
#endif

#if ((HD44780U_CONN_MODE == HD44780U_USE_ONLY_HALF_CONN_MODE) || (HD44780U_CONN_MODE == HD44780U_USE_BOTH_CONN_MODES))
static void SendHalfByte(hd44780u_t* pDisplay, uint8_t byte)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	__SET_EN(pDisplay, true);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	2101      	movs	r1, #1
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ffb5 	bl	8001c02 <GPIOWrite>
	__SET_DATA(pDisplay, (byte & 0x0F));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69d8      	ldr	r0, [r3, #28]
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2104      	movs	r1, #4
 8001caa:	f7ff ffc1 	bl	8001c30 <GPIOWriteArray>
	HD44780UDelayUS(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff fa92 	bl	80011d8 <HD44780UDelayUS>
	__SET_EN(pDisplay, false);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffa1 	bl	8001c02 <GPIOWrite>
	HD44780UDelayUS(1);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fa89 	bl	80011d8 <HD44780UDelayUS>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <SendByte>:
	HD44780UDelayMS(1);                         \
	__SET_EN(handler, false);                    \
	HD44780UDelayMS(1);

static void SendByte(hd44780u_t* pDisplay, uint8_t byte)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
#if (HD44780U_CONN_MODE == HD44780U_USE_ONLY_HALF_CONN_MODE)
	__SEND_BY_HALF_CONN_MODE(pDisplay, byte);
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffcc 	bl	8001c80 <SendHalfByte>
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffc7 	bl	8001c80 <SendHalfByte>
	else
	{
		__SEND_BY_FULL_CONN_MODE(pDisplay, byte);
	}
#endif
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <WriteInstructionWithDelay>:

static void WriteInstructionWithDelay(hd44780u_t* pDisplay, uint8_t instruction, uint32_t delay)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	460b      	mov	r3, r1
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	72fb      	strb	r3, [r7, #11]
	__SET_RS(pDisplay, false);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff77 	bl	8001c02 <GPIOWrite>
	__SET_RW(pDisplay, false);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	330c      	adds	r3, #12
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff71 	bl	8001c02 <GPIOWrite>

	SendByte(pDisplay, instruction);
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	4619      	mov	r1, r3
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff ffd2 	bl	8001cce <SendByte>

	if (delay > 0)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <WriteInstructionWithDelay+0x3c>
	{
		HD44780UDelayUS(delay);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fa51 	bl	80011d8 <HD44780UDelayUS>
	}
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <WriteData>:

static void WriteData(hd44780u_t* pDisplay, uint8_t data)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
	__SET_RS(pDisplay, true);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3314      	adds	r3, #20
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff56 	bl	8001c02 <GPIOWrite>
	__SET_RW(pDisplay, false);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff50 	bl	8001c02 <GPIOWrite>

	SendByte(pDisplay, data);
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffb1 	bl	8001cce <SendByte>
	HD44780UDelayUS(WRITE_DATA_DELAY_MS);
 8001d6c:	202d      	movs	r0, #45	; 0x2d
 8001d6e:	f7ff fa33 	bl	80011d8 <HD44780UDelayUS>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HD44780USetPosition>:

void HD44780USetPosition(hd44780u_t* pDisplay, uint8_t position)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
	if (position < (__GET_ROW_COUNT(pDisplay) * __GET_ROW_LENGHT(pDisplay)))
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	2b1f      	cmp	r3, #31
 8001d8a:	d813      	bhi.n	8001db4 <HD44780USetPosition+0x3a>
	{
		if (position >= __GET_ROW_LENGHT(pDisplay))
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d906      	bls.n	8001da0 <HD44780USetPosition+0x26>
		{
			position -= __GET_ROW_LENGHT(pDisplay);
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	3b10      	subs	r3, #16
 8001d96:	70fb      	strb	r3, [r7, #3]
			position |= COMMAND_SET_POS_LINE_MASK;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9e:	70fb      	strb	r3, [r7, #3]
		}

		position |= COMMAND_SET_POS;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da6:	70fb      	strb	r3, [r7, #3]
		WriteInstructionWithDelay(pDisplay, position, COMMAND_SET_POS_DELAY_MS);
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	222d      	movs	r2, #45	; 0x2d
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa3 	bl	8001cfa <WriteInstructionWithDelay>
	}
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HD44780UWriteString>:

void HD44780UWriteString(hd44780u_t* pDisplay, const char* str)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	HD44780UWriteStringWithOffset(pDisplay, 0, str);
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	2100      	movs	r1, #0
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f804 	bl	8001dd8 <HD44780UWriteStringWithOffset>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HD44780UWriteStringWithOffset>:

void HD44780UWriteStringWithOffset(hd44780u_t* pDisplay, uint8_t offset, const char* str)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	460b      	mov	r3, r1
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	72fb      	strb	r3, [r7, #11]
	HD44780USetPosition(pDisplay, offset);
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff ffc5 	bl	8001d7a <HD44780USetPosition>

	for(uint8_t i = 0; (str[i] != 0 && i < 32); i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	75fb      	strb	r3, [r7, #23]
 8001df4:	e011      	b.n	8001e1a <HD44780UWriteStringWithOffset+0x42>
	{
		if (i == __GET_ROW_LENGHT(pDisplay))
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d103      	bne.n	8001e04 <HD44780UWriteStringWithOffset+0x2c>
		{
			HD44780USetPosition(pDisplay, __GET_ROW_LENGHT(pDisplay));
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff ffbb 	bl	8001d7a <HD44780USetPosition>
		}

		WriteData(pDisplay, (uint8_t)str[i]);
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff ff95 	bl	8001d3e <WriteData>
	for(uint8_t i = 0; (str[i] != 0 && i < 32); i++)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	3301      	adds	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HD44780UWriteStringWithOffset+0x54>
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b1f      	cmp	r3, #31
 8001e2a:	d9e4      	bls.n	8001df6 <HD44780UWriteStringWithOffset+0x1e>
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HD44780UClear>:

void HD44780UClear(hd44780u_t* pDisplay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	WriteInstructionWithDelay(pDisplay, COMMAND_CLEAR, COMMAND_CLEAR_DELAY_MS);
 8001e3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001e40:	2101      	movs	r1, #1
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff59 	bl	8001cfa <WriteInstructionWithDelay>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HD44780UReturnHome>:

void HD44780UReturnHome(hd44780u_t* pDisplay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	WriteInstructionWithDelay(pDisplay, COMMAND_RET_HOME, COMMAND_RET_HOME_DELAY_MS);
 8001e58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff4b 	bl	8001cfa <WriteInstructionWithDelay>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HD44780USetCursor>:

void HD44780USetCursor(hd44780u_t* pDisplay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	uint8_t command = COMMAND_SET_DISPLAY_CNTR | COMMAND_SET_DISPLAY_CNTR_DISPLAY_MASK;
 8001e74:	230c      	movs	r3, #12
 8001e76:	73fb      	strb	r3, [r7, #15]

	if (pDisplay->cursorState == true)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00e      	beq.n	8001ea4 <HD44780USetCursor+0x38>
	{
		command |= COMMAND_SET_DISPLAY_CNTR_CURSOR_MASK;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	73fb      	strb	r3, [r7, #15]

		if (pDisplay->blinkCursorState == true)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HD44780USetCursor+0x38>
		{
			command |= COMMAND_SET_DISPLAY_CNTR_BLINK_MASK;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
		}
	}

	WriteInstructionWithDelay(pDisplay, command, COMMAND_SET_DISPLAY_CNTR_DELAY_MS);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	222d      	movs	r2, #45	; 0x2d
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff25 	bl	8001cfa <WriteInstructionWithDelay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HD44780USetEntryMode>:

void HD44780USetEntryMode(hd44780u_t* pDisplay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	WriteInstructionWithDelay(pDisplay, COMMAND_SET_ENTRY_MODE | COMMAND_SET_ENTRY_MODE_DIRECTION_MASK, COMMAND_SET_ENTRY_MODE_DELAY_MS);
 8001ec0:	222d      	movs	r2, #45	; 0x2d
 8001ec2:	2106      	movs	r1, #6
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff18 	bl	8001cfa <WriteInstructionWithDelay>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HD44780UInit>:

void HD44780UInit(hd44780u_t* pDisplay)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	__SET_RS(pDisplay, false);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3314      	adds	r3, #20
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe8e 	bl	8001c02 <GPIOWrite>
	__SET_RW(pDisplay, false);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe88 	bl	8001c02 <GPIOWrite>
	//SendHalfByte(pDisplay, 0x03);
	HD44780UDelayUS(40);
 8001ef2:	2028      	movs	r0, #40	; 0x28
 8001ef4:	f7ff f970 	bl	80011d8 <HD44780UDelayUS>

	uint8_t command;

	command = COMMAND_SET_FUCTION;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	73fb      	strb	r3, [r7, #15]
	command |= __GET_FUNCTION_SET_DATA_LEN_MASK(pDisplay);
	command |= __GET_FUNCTION_SET_FONT_MASK(pDisplay);
	command |= __GET_FUNCTION_SET_LINES_MASK(pDisplay);
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	73fb      	strb	r3, [r7, #15]

	WriteInstructionWithDelay(pDisplay, command, COMMAND_SET_FUCTION_DELAY_MS);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	222d      	movs	r2, #45	; 0x2d
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fef5 	bl	8001cfa <WriteInstructionWithDelay>
	WriteInstructionWithDelay(pDisplay, command, COMMAND_SET_FUCTION_DELAY_MS);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	222d      	movs	r2, #45	; 0x2d
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff feef 	bl	8001cfa <WriteInstructionWithDelay>

	HD44780USetCursor(pDisplay);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffa5 	bl	8001e6c <HD44780USetCursor>
	HD44780UClear(pDisplay);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff86 	bl	8001e34 <HD44780UClear>
	HD44780USetEntryMode(pDisplay);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffc5 	bl	8001eb8 <HD44780USetEntryMode>
	HD44780UReturnHome(pDisplay);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff8e 	bl	8001e50 <HD44780UReturnHome>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f90d 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fc2e 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f917 	bl	80021d2 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f8ed 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000020 	.word	0x20000020
 8001fd8:	20000028 	.word	0x20000028
 8001fdc:	20000024 	.word	0x20000024

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000028 	.word	0x20000028
 8002004:	2000028c 	.word	0x2000028c

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000028c 	.word	0x2000028c

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff47 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff5c 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb0 	bl	8002140 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e16b      	b.n	80024e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 815a 	bne.w	80024da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b4 	beq.w	80024da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_GPIO_Init+0x324>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x328>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae90 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e267      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d075      	beq.n	8002692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b7e      	ldr	r3, [pc, #504]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x108>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e242      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x74>
 80025ee:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a75      	ldr	r2, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x98>
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6c      	ldr	r2, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fce2 	bl	8002008 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff fcde 	bl	8002008 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e207      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xc0>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fcce 	bl	8002008 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fcca 	bl	8002008 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1f3      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0xe8>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1c7      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7ff fc83 	bl	8002008 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff fc7f 	bl	8002008 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1a8      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4925      	ldr	r1, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x244>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff fc62 	bl	8002008 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7ff fc5e 	bl	8002008 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e187      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d036      	beq.n	80027e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff fc42 	bl	8002008 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff fc3e 	bl	8002008 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e167      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x240>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x200>
 80027a6:	e01b      	b.n	80027e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x248>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff fc2b 	bl	8002008 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	e00e      	b.n	80027d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b6:	f7ff fc27 	bl	8002008 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d907      	bls.n	80027d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e150      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470000 	.word	0x42470000
 80027d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ea      	bne.n	80027b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8097 	beq.w	800291c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a7c      	ldr	r2, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b7a      	ldr	r3, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7ff fbe7 	bl	8002008 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7ff fbe3 	bl	8002008 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e10c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x474>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
 8002864:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x30c>
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	; 0x70
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002894:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7ff fba8 	bl	8002008 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7ff fba4 	bl	8002008 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0cb      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ee      	beq.n	80028bc <HAL_RCC_OscConfig+0x334>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7ff fb92 	bl	8002008 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7ff fb8e 	bl	8002008 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0b5      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ee      	bne.n	80028e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a1 	beq.w	8002a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d05c      	beq.n	80029ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d141      	bne.n	80029be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fb62 	bl	8002008 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff fb5e 	bl	8002008 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e087      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	491b      	ldr	r1, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff fb37 	bl	8002008 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7ff fb33 	bl	8002008 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e05c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x416>
 80029bc:	e054      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff fb20 	bl	8002008 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff fb1c 	bl	8002008 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e045      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x444>
 80029ea:	e03d      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e038      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4ec>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d028      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d121      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0cc      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d90c      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b8      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002acc:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae4:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	494d      	ldr	r1, [pc, #308]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d044      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e067      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4934      	ldr	r1, [pc, #208]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7ff fa4e 	bl	8002008 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7ff fa4a 	bl	8002008 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e04f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d20c      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e032      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4916      	ldr	r1, [pc, #88]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	490e      	ldr	r1, [pc, #56]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bfe:	f000 f821 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	490a      	ldr	r1, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	5ccb      	ldrb	r3, [r1, r3]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f9ae 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	0800a86c 	.word	0x0800a86c
 8002c3c:	20000020 	.word	0x20000020
 8002c40:	20000024 	.word	0x20000024

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b094      	sub	sp, #80	; 0x50
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c50:	2300      	movs	r3, #0
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	2300      	movs	r3, #0
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x40>
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f200 80e1 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c76:	e0db      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c7c:	e0db      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7e:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c82:	e0d8      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
 8002cae:	2300      	movs	r3, #0
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	0159      	lsls	r1, r3, #5
 8002cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc8:	0150      	lsls	r0, r2, #5
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4621      	mov	r1, r4
 8002cd0:	1a51      	subs	r1, r2, r1
 8002cd2:	6139      	str	r1, [r7, #16]
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce8:	4659      	mov	r1, fp
 8002cea:	018b      	lsls	r3, r1, #6
 8002cec:	4651      	mov	r1, sl
 8002cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	018a      	lsls	r2, r1, #6
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d16:	4690      	mov	r8, r2
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	eb18 0303 	adds.w	r3, r8, r3
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	462b      	mov	r3, r5
 8002d24:	eb49 0303 	adc.w	r3, r9, r3
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d36:	4629      	mov	r1, r5
 8002d38:	024b      	lsls	r3, r1, #9
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d40:	4621      	mov	r1, r4
 8002d42:	024a      	lsls	r2, r1, #9
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d54:	f7fd ff28 	bl	8000ba8 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e058      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	f04f 0000 	mov.w	r0, #0
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	0159      	lsls	r1, r3, #5
 8002d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8e:	0150      	lsls	r0, r2, #5
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4641      	mov	r1, r8
 8002d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002db4:	ebb2 040a 	subs.w	r4, r2, sl
 8002db8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	00eb      	lsls	r3, r5, #3
 8002dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dca:	00e2      	lsls	r2, r4, #3
 8002dcc:	4614      	mov	r4, r2
 8002dce:	461d      	mov	r5, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	18e3      	adds	r3, r4, r3
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	eb45 0303 	adc.w	r3, r5, r3
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dea:	4629      	mov	r1, r5
 8002dec:	028b      	lsls	r3, r1, #10
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df4:	4621      	mov	r1, r4
 8002df6:	028a      	lsls	r2, r1, #10
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	61fa      	str	r2, [r7, #28]
 8002e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e08:	f7fd fece 	bl	8000ba8 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3750      	adds	r7, #80	; 0x50
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <__NVIC_SetPriority>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	; (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f06f 0004 	mvn.w	r0, #4
 8002eae:	f7ff ffcf 	bl	8002e50 <__NVIC_SetPriority>
#endif
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ebe:	f3ef 8305 	mrs	r3, IPSR
 8002ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eca:	f06f 0305 	mvn.w	r3, #5
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e00c      	b.n	8002eec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <osKernelInitialize+0x44>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <osKernelInitialize+0x44>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e002      	b.n	8002eec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000290 	.word	0x20000290

08002f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f06:	f3ef 8305 	mrs	r3, IPSR
 8002f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f12:	f06f 0305 	mvn.w	r3, #5
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e010      	b.n	8002f3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <osKernelStart+0x48>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d109      	bne.n	8002f36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f22:	f7ff ffbf 	bl	8002ea4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <osKernelStart+0x48>)
 8002f28:	2202      	movs	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f2c:	f001 ff1e 	bl	8004d6c <vTaskStartScheduler>
      stat = osOK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e002      	b.n	8002f3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f3c:	687b      	ldr	r3, [r7, #4]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000290 	.word	0x20000290

08002f4c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f52:	f3ef 8305 	mrs	r3, IPSR
 8002f56:	603b      	str	r3, [r7, #0]
  return(result);
 8002f58:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002f5e:	f002 f827 	bl	8004fb0 <xTaskGetTickCountFromISR>
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	e002      	b.n	8002f6c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002f66:	f002 f813 	bl	8004f90 <xTaskGetTickCount>
 8002f6a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <OS_Tick_GetCount+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <OS_Tick_GetCount+0x20>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e010 	.word	0xe000e010

08002f9c <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <OS_Tick_GetOverflow+0x18>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0301 	and.w	r3, r3, #1
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <OS_Tick_GetInterval+0x14>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	3301      	adds	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <osKernelGetSysTimerCount+0x1e>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <osKernelGetSysTimerCount+0x22>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <osKernelGetSysTimerCount+0x24>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff6:	b672      	cpsid	i
}
 8002ff8:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8002ffa:	f001 ffc9 	bl	8004f90 <xTaskGetTickCount>
 8002ffe:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8003000:	f7ff ffba 	bl	8002f78 <OS_Tick_GetCount>
 8003004:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8003006:	f7ff ffc9 	bl	8002f9c <OS_Tick_GetOverflow>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8003010:	f7ff ffb2 	bl	8002f78 <OS_Tick_GetCount>
 8003014:	6138      	str	r0, [r7, #16]
    ticks++;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3301      	adds	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 800301c:	f7ff ffcc 	bl	8002fb8 <OS_Tick_GetInterval>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8003034:	b662      	cpsie	i
}
 8003036:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003042:	b580      	push	{r7, lr}
 8003044:	b08e      	sub	sp, #56	; 0x38
 8003046:	af04      	add	r7, sp, #16
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003052:	f3ef 8305 	mrs	r3, IPSR
 8003056:	617b      	str	r3, [r7, #20]
  return(result);
 8003058:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800305a:	2b00      	cmp	r3, #0
 800305c:	d17e      	bne.n	800315c <osThreadNew+0x11a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d07b      	beq.n	800315c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003068:	2318      	movs	r3, #24
 800306a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d045      	beq.n	8003108 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <osThreadNew+0x48>
        name = attr->name;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <osThreadNew+0x6e>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b38      	cmp	r3, #56	; 0x38
 80030a2:	d805      	bhi.n	80030b0 <osThreadNew+0x6e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <osThreadNew+0x72>
        return (NULL);
 80030b0:	2300      	movs	r3, #0
 80030b2:	e054      	b.n	800315e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00e      	beq.n	80030ea <osThreadNew+0xa8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b5b      	cmp	r3, #91	; 0x5b
 80030d2:	d90a      	bls.n	80030ea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <osThreadNew+0xa8>
        mem = 1;
 80030e4:	2301      	movs	r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e010      	b.n	800310c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <osThreadNew+0xca>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <osThreadNew+0xca>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <osThreadNew+0xca>
          mem = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e001      	b.n	800310c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d110      	bne.n	8003134 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800311a:	9202      	str	r2, [sp, #8]
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f001 fbcb 	bl	80048c4 <xTaskCreateStatic>
 800312e:	4603      	mov	r3, r0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e013      	b.n	800315c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d110      	bne.n	800315c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	b29a      	uxth	r2, r3
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f001 fc16 	bl	800497e <xTaskCreate>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d001      	beq.n	800315c <osThreadNew+0x11a>
            hTask = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800315c:	693b      	ldr	r3, [r7, #16]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3728      	adds	r7, #40	; 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800316e:	f3ef 8305 	mrs	r3, IPSR
 8003172:	60bb      	str	r3, [r7, #8]
  return(result);
 8003174:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <osDelay+0x1c>
    stat = osErrorISR;
 800317a:	f06f 0305 	mvn.w	r3, #5
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e007      	b.n	8003192 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <osDelay+0x2c>
      vTaskDelay(ticks);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 fdb9 	bl	8004d04 <vTaskDelay>
    }
  }

  return (stat);
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a4:	f3ef 8305 	mrs	r3, IPSR
 80031a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80031aa:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80031b0:	f06f 0305 	mvn.w	r3, #5
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e019      	b.n	80031ec <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80031bc:	f001 fee8 	bl	8004f90 <xTaskGetTickCount>
 80031c0:	4603      	mov	r3, r0
 80031c2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <osDelayUntil+0x4a>
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db06      	blt.n	80031e6 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fd12 	bl	8004c08 <vTaskDelayUntil>
 80031e4:	e002      	b.n	80031ec <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80031e6:	f06f 0303 	mvn.w	r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80031ec:	697b      	ldr	r3, [r7, #20]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f002 ffe4 	bl	80061cc <pvTimerGetTimerID>
 8003204:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <TimerCallback+0x22>
    callb->func (callb->arg);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	6852      	ldr	r2, [r2, #4]
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
  }
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	; 0x30
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003234:	f3ef 8305 	mrs	r3, IPSR
 8003238:	613b      	str	r3, [r7, #16]
  return(result);
 800323a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800323c:	2b00      	cmp	r3, #0
 800323e:	d163      	bne.n	8003308 <osTimerNew+0xe8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d060      	beq.n	8003308 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003246:	2008      	movs	r0, #8
 8003248:	f003 fa2e 	bl	80066a8 <pvPortMalloc>
 800324c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d059      	beq.n	8003308 <osTimerNew+0xe8>
      callb->func = func;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <osTimerNew+0x4c>
        reload = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e001      	b.n	8003270 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <osTimerNew+0x6e>
          name = attr->name;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <osTimerNew+0x84>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b2b      	cmp	r3, #43	; 0x2b
 800329c:	d902      	bls.n	80032a4 <osTimerNew+0x84>
          mem = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e00c      	b.n	80032be <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d108      	bne.n	80032be <osTimerNew+0x9e>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <osTimerNew+0x9e>
            mem = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e001      	b.n	80032be <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <osTimerNew+0xf4>)
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	2101      	movs	r1, #1
 80032d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d6:	f002 fbfa 	bl	8005ace <xTimerCreateStatic>
 80032da:	6238      	str	r0, [r7, #32]
 80032dc:	e00b      	b.n	80032f6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <osTimerNew+0xf4>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	2101      	movs	r1, #1
 80032ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032f0:	f002 fbcc 	bl	8005a8c <xTimerCreate>
 80032f4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <osTimerNew+0xe8>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <osTimerNew+0xe8>
        vPortFree (callb);
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f003 fa9c 	bl	8006840 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003308:	6a3b      	ldr	r3, [r7, #32]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	080031f7 	.word	0x080031f7

08003318 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003326:	f3ef 8305 	mrs	r3, IPSR
 800332a:	60fb      	str	r3, [r7, #12]
  return(result);
 800332c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <osTimerStart+0x22>
    stat = osErrorISR;
 8003332:	f06f 0305 	mvn.w	r3, #5
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e017      	b.n	800336a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <osTimerStart+0x30>
    stat = osErrorParameter;
 8003340:	f06f 0303 	mvn.w	r3, #3
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e010      	b.n	800336a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	2104      	movs	r1, #4
 8003352:	6938      	ldr	r0, [r7, #16]
 8003354:	f002 fc34 	bl	8005bc0 <xTimerGenericCommand>
 8003358:	4603      	mov	r3, r0
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <osTimerStart+0x4c>
      stat = osOK;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e002      	b.n	800336a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003364:	f06f 0302 	mvn.w	r3, #2
 8003368:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800336a:	697b      	ldr	r3, [r7, #20]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003380:	f3ef 8305 	mrs	r3, IPSR
 8003384:	60bb      	str	r3, [r7, #8]
  return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003388:	2b00      	cmp	r3, #0
 800338a:	d174      	bne.n	8003476 <osMutexNew+0x102>
    if (attr != NULL) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <osMutexNew+0x26>
      type = attr->attr_bits;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e001      	b.n	800339e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <osMutexNew+0x3a>
      rmtx = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e001      	b.n	80033b2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d15c      	bne.n	8003476 <osMutexNew+0x102>
      mem = -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <osMutexNew+0x6a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b4f      	cmp	r3, #79	; 0x4f
 80033d6:	d902      	bls.n	80033de <osMutexNew+0x6a>
          mem = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e00c      	b.n	80033f8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <osMutexNew+0x84>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <osMutexNew+0x84>
            mem = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e001      	b.n	80033f8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d112      	bne.n	8003424 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4619      	mov	r1, r3
 800340a:	2004      	movs	r0, #4
 800340c:	f000 fc49 	bl	8003ca2 <xQueueCreateMutexStatic>
 8003410:	61f8      	str	r0, [r7, #28]
 8003412:	e016      	b.n	8003442 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4619      	mov	r1, r3
 800341a:	2001      	movs	r0, #1
 800341c:	f000 fc41 	bl	8003ca2 <xQueueCreateMutexStatic>
 8003420:	61f8      	str	r0, [r7, #28]
 8003422:	e00e      	b.n	8003442 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003430:	2004      	movs	r0, #4
 8003432:	f000 fc1e 	bl	8003c72 <xQueueCreateMutex>
 8003436:	61f8      	str	r0, [r7, #28]
 8003438:	e003      	b.n	8003442 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800343a:	2001      	movs	r0, #1
 800343c:	f000 fc19 	bl	8003c72 <xQueueCreateMutex>
 8003440:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <osMutexNew+0xee>
        if (attr != NULL) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <osMutexNew+0xe2>
          name = attr->name;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e001      	b.n	800345a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	69f8      	ldr	r0, [r7, #28]
 800345e:	f001 f9d3 	bl	8004808 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <osMutexNew+0x102>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003476:	69fb      	ldr	r3, [r7, #28]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800349e:	f3ef 8305 	mrs	r3, IPSR
 80034a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80034aa:	f06f 0305 	mvn.w	r3, #5
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e02c      	b.n	800350c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80034b8:	f06f 0303 	mvn.w	r3, #3
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e025      	b.n	800350c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d011      	beq.n	80034ea <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	6938      	ldr	r0, [r7, #16]
 80034ca:	f000 fc39 	bl	8003d40 <xQueueTakeMutexRecursive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d01b      	beq.n	800350c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80034da:	f06f 0301 	mvn.w	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e014      	b.n	800350c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80034e2:	f06f 0302 	mvn.w	r3, #2
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e010      	b.n	800350c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	6938      	ldr	r0, [r7, #16]
 80034ee:	f000 fed7 	bl	80042a0 <xQueueSemaphoreTake>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d009      	beq.n	800350c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80034fe:	f06f 0301 	mvn.w	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e002      	b.n	800350c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003506:	f06f 0302 	mvn.w	r3, #2
 800350a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800350c:	697b      	ldr	r3, [r7, #20]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003532:	f3ef 8305 	mrs	r3, IPSR
 8003536:	60bb      	str	r3, [r7, #8]
  return(result);
 8003538:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <osMutexRelease+0x30>
    stat = osErrorISR;
 800353e:	f06f 0305 	mvn.w	r3, #5
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e01f      	b.n	8003586 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800354c:	f06f 0303 	mvn.w	r3, #3
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e018      	b.n	8003586 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800355a:	6938      	ldr	r0, [r7, #16]
 800355c:	f000 fbbc 	bl	8003cd8 <xQueueGiveMutexRecursive>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d00f      	beq.n	8003586 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003566:	f06f 0302 	mvn.w	r3, #2
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e00b      	b.n	8003586 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800356e:	2300      	movs	r3, #0
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	6938      	ldr	r0, [r7, #16]
 8003576:	f000 fc19 	bl	8003dac <xQueueGenericSend>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d002      	beq.n	8003586 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003580:	f06f 0302 	mvn.w	r3, #2
 8003584:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003586:	697b      	ldr	r3, [r7, #20]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a0:	f3ef 8305 	mrs	r3, IPSR
 80035a4:	613b      	str	r3, [r7, #16]
  return(result);
 80035a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d15f      	bne.n	800366c <osMessageQueueNew+0xdc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d05c      	beq.n	800366c <osMessageQueueNew+0xdc>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d059      	beq.n	800366c <osMessageQueueNew+0xdc>
    mem = -1;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d029      	beq.n	8003618 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <osMessageQueueNew+0x62>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b4f      	cmp	r3, #79	; 0x4f
 80035d2:	d90e      	bls.n	80035f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <osMessageQueueNew+0x62>
        mem = 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	e014      	b.n	800361c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d110      	bne.n	800361c <osMessageQueueNew+0x8c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d108      	bne.n	800361c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <osMessageQueueNew+0x8c>
          mem = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e001      	b.n	800361c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10b      	bne.n	800363a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2100      	movs	r1, #0
 800362c:	9100      	str	r1, [sp, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fa2f 	bl	8003a94 <xQueueGenericCreateStatic>
 8003636:	61f8      	str	r0, [r7, #28]
 8003638:	e008      	b.n	800364c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003640:	2200      	movs	r2, #0
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fa9d 	bl	8003b84 <xQueueGenericCreate>
 800364a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e001      	b.n	8003664 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	69f8      	ldr	r0, [r7, #28]
 8003668:	f001 f8ce 	bl	8004808 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800366c:	69fb      	ldr	r3, [r7, #28]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003690:	f3ef 8305 	mrs	r3, IPSR
 8003694:	617b      	str	r3, [r7, #20]
  return(result);
 8003696:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003698:	2b00      	cmp	r3, #0
 800369a:	d028      	beq.n	80036ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <osMessageQueuePut+0x36>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <osMessageQueuePut+0x36>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80036ae:	f06f 0303 	mvn.w	r3, #3
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e038      	b.n	8003728 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80036ba:	f107 0210 	add.w	r2, r7, #16
 80036be:	2300      	movs	r3, #0
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	69b8      	ldr	r0, [r7, #24]
 80036c4:	f000 fc70 	bl	8003fa8 <xQueueGenericSendFromISR>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d003      	beq.n	80036d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80036ce:	f06f 0302 	mvn.w	r3, #2
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e028      	b.n	8003728 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d025      	beq.n	8003728 <osMessageQueuePut+0xb0>
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <osMessageQueuePut+0xbc>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	e01c      	b.n	8003728 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <osMessageQueuePut+0x82>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80036fa:	f06f 0303 	mvn.w	r3, #3
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e012      	b.n	8003728 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003702:	2300      	movs	r3, #0
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	69b8      	ldr	r0, [r7, #24]
 800370a:	f000 fb4f 	bl	8003dac <xQueueGenericSend>
 800370e:	4603      	mov	r3, r0
 8003710:	2b01      	cmp	r3, #1
 8003712:	d009      	beq.n	8003728 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800371a:	f06f 0301 	mvn.w	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e002      	b.n	8003728 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003722:	f06f 0302 	mvn.w	r3, #2
 8003726:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003728:	69fb      	ldr	r3, [r7, #28]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800374e:	f3ef 8305 	mrs	r3, IPSR
 8003752:	617b      	str	r3, [r7, #20]
  return(result);
 8003754:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003756:	2b00      	cmp	r3, #0
 8003758:	d028      	beq.n	80037ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <osMessageQueueGet+0x34>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <osMessageQueueGet+0x34>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800376c:	f06f 0303 	mvn.w	r3, #3
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e037      	b.n	80037e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	461a      	mov	r2, r3
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	69b8      	ldr	r0, [r7, #24]
 8003782:	f000 fe99 	bl	80044b8 <xQueueReceiveFromISR>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d003      	beq.n	8003794 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800378c:	f06f 0302 	mvn.w	r3, #2
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e027      	b.n	80037e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d024      	beq.n	80037e4 <osMessageQueueGet+0xac>
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <osMessageQueueGet+0xb8>)
 800379c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	e01b      	b.n	80037e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <osMessageQueueGet+0x80>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80037b8:	f06f 0303 	mvn.w	r3, #3
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e011      	b.n	80037e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	f000 fc8b 	bl	80040e0 <xQueueReceive>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d009      	beq.n	80037e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80037d6:	f06f 0301 	mvn.w	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e002      	b.n	80037e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80037de:	f06f 0302 	mvn.w	r3, #2
 80037e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80037e4:	69fb      	ldr	r3, [r7, #28]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <vApplicationGetIdleTaskMemory+0x2c>)
 8003804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4a06      	ldr	r2, [pc, #24]	; (8003824 <vApplicationGetIdleTaskMemory+0x30>)
 800380a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000294 	.word	0x20000294
 8003824:	200002f0 	.word	0x200002f0

08003828 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <vApplicationGetTimerTaskMemory+0x2c>)
 8003838:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <vApplicationGetTimerTaskMemory+0x30>)
 800383e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	200004f0 	.word	0x200004f0
 8003858:	2000054c 	.word	0x2000054c

0800385c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f103 0208 	add.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f103 0208 	add.w	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f103 0208 	add.w	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d103      	bne.n	800391e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e00c      	b.n	8003938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3308      	adds	r3, #8
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e002      	b.n	800392c <vListInsert+0x2e>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	429a      	cmp	r2, r3
 8003936:	d2f6      	bcs.n	8003926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039ee:	f002 fd39 	bl	8006464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d114      	bne.n	8003a6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01a      	beq.n	8003a82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3310      	adds	r3, #16
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 fc27 	bl	80052a4 <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <xQueueGenericReset+0xcc>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	e009      	b.n	8003a82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3310      	adds	r3, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fef2 	bl	800385c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff feed 	bl	800385c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a82:	f002 fd1f 	bl	80064c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08e      	sub	sp, #56	; 0x38
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <xQueueGenericCreateStatic+0x52>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <xQueueGenericCreateStatic+0x56>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericCreateStatic+0x58>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xQueueGenericCreateStatic+0x7e>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <xQueueGenericCreateStatic+0x82>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <xQueueGenericCreateStatic+0x84>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fb      	str	r3, [r7, #28]
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b32:	2350      	movs	r3, #80	; 0x50
 8003b34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b50      	cmp	r3, #80	; 0x50
 8003b3a:	d00a      	beq.n	8003b52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	61bb      	str	r3, [r7, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f83f 	bl	8003bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3730      	adds	r7, #48	; 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericCreate+0x2a>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3350      	adds	r3, #80	; 0x50
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fd73 	bl	80066a8 <pvPortMalloc>
 8003bc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3350      	adds	r3, #80	; 0x50
 8003bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bdc:	79fa      	ldrb	r2, [r7, #7]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f805 	bl	8003bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bee:	69bb      	ldr	r3, [r7, #24]
	}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c26:	2101      	movs	r1, #1
 8003c28:	69b8      	ldr	r0, [r7, #24]
 8003c2a:	f7ff fecb 	bl	80039c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2200      	movs	r2, #0
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8a1 	bl	8003dac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff7a 	bl	8003b84 <xQueueGenericCreate>
 8003c90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ffd3 	bl	8003c3e <prvInitialiseMutex>

		return xNewQueue;
 8003c98:	68fb      	ldr	r3, [r7, #12]
	}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b088      	sub	sp, #32
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	4603      	mov	r3, r0
 8003caa:	6039      	str	r1, [r7, #0]
 8003cac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f7ff fee7 	bl	8003a94 <xQueueGenericCreateStatic>
 8003cc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ffb8 	bl	8003c3e <prvInitialiseMutex>

		return xNewQueue;
 8003cce:	68fb      	ldr	r3, [r7, #12]
	}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60fb      	str	r3, [r7, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	689c      	ldr	r4, [r3, #8]
 8003d04:	f001 fc8c 	bl	8005620 <xTaskGetCurrentTaskHandle>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d111      	bne.n	8003d32 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003d20:	2300      	movs	r3, #0
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	6938      	ldr	r0, [r7, #16]
 8003d28:	f000 f840 	bl	8003dac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e001      	b.n	8003d36 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003d36:	697b      	ldr	r3, [r7, #20]
	}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	689c      	ldr	r4, [r3, #8]
 8003d6e:	f001 fc57 	bl	8005620 <xTaskGetCurrentTaskHandle>
 8003d72:	4603      	mov	r3, r0
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d107      	bne.n	8003d88 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003d82:	2301      	movs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e00c      	b.n	8003da2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	f000 fa88 	bl	80042a0 <xQueueSemaphoreTake>
 8003d90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003da2:	697b      	ldr	r3, [r7, #20]
	}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd90      	pop	{r4, r7, pc}

08003dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08e      	sub	sp, #56	; 0x38
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xQueueGenericSend+0x32>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <xQueueGenericSend+0x40>
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueGenericSend+0x44>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueGenericSend+0x46>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xQueueGenericSend+0x60>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d103      	bne.n	8003e1a <xQueueGenericSend+0x6e>
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <xQueueGenericSend+0x72>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueGenericSend+0x74>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueGenericSend+0x8e>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	623b      	str	r3, [r7, #32]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e3a:	f001 fc01 	bl	8005640 <xTaskGetSchedulerState>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <xQueueGenericSend+0x9e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <xQueueGenericSend+0xa2>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueGenericSend+0xa4>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericSend+0xbe>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	61fb      	str	r3, [r7, #28]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e6a:	f002 fafb 	bl	8006464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <xQueueGenericSend+0xd4>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d129      	bne.n	8003ed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e86:	f000 fbaf 	bl	80045e8 <prvCopyDataToQueue>
 8003e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fa03 	bl	80052a4 <xTaskRemoveFromEventList>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <xQueueGenericSend+0x1f8>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	e00a      	b.n	8003ecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <xQueueGenericSend+0x1f8>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ecc:	f002 fafa 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e063      	b.n	8003f9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eda:	f002 faf3 	bl	80064c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e05c      	b.n	8003f9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ee8:	f107 0314 	add.w	r3, r7, #20
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fa3d 	bl	800536c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ef6:	f002 fae5 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003efa:	f000 ff9d 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003efe:	f002 fab1 	bl	8006464 <vPortEnterCritical>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f08:	b25b      	sxtb	r3, r3
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d103      	bne.n	8003f18 <xQueueGenericSend+0x16c>
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d103      	bne.n	8003f2e <xQueueGenericSend+0x182>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2e:	f002 fac9 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f32:	1d3a      	adds	r2, r7, #4
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fa2c 	bl	8005398 <xTaskCheckForTimeOut>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d124      	bne.n	8003f90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f48:	f000 fc46 	bl	80047d8 <prvIsQueueFull>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d018      	beq.n	8003f84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	3310      	adds	r3, #16
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 f952 	bl	8005204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f62:	f000 fbd1 	bl	8004708 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f66:	f000 ff75 	bl	8004e54 <xTaskResumeAll>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f47f af7c 	bne.w	8003e6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <xQueueGenericSend+0x1f8>)
 8003f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	e772      	b.n	8003e6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f86:	f000 fbbf 	bl	8004708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f8a:	f000 ff63 	bl	8004e54 <xTaskResumeAll>
 8003f8e:	e76c      	b.n	8003e6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f92:	f000 fbb9 	bl	8004708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f96:	f000 ff5d 	bl	8004e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3738      	adds	r7, #56	; 0x38
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b090      	sub	sp, #64	; 0x40
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <xQueueGenericSendFromISR+0x3c>
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <xQueueGenericSendFromISR+0x40>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <xQueueGenericSendFromISR+0x42>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d103      	bne.n	8004012 <xQueueGenericSendFromISR+0x6a>
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <xQueueGenericSendFromISR+0x6e>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xQueueGenericSendFromISR+0x70>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	623b      	str	r3, [r7, #32]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004032:	f002 faf9 	bl	8006628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004036:	f3ef 8211 	mrs	r2, BASEPRI
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	61fa      	str	r2, [r7, #28]
 800404c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800404e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <xQueueGenericSendFromISR+0xbc>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d12f      	bne.n	80040c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800407a:	f000 fab5 	bl	80045e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800407e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d112      	bne.n	80040ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d016      	beq.n	80040be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	3324      	adds	r3, #36	; 0x24
 8004094:	4618      	mov	r0, r3
 8004096:	f001 f905 	bl	80052a4 <xTaskRemoveFromEventList>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e007      	b.n	80040be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	b25a      	sxtb	r2, r3
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040be:	2301      	movs	r3, #1
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80040c2:	e001      	b.n	80040c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3740      	adds	r7, #64	; 0x40
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xQueueReceive+0x30>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	623b      	str	r3, [r7, #32]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <xQueueReceive+0x3e>
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xQueueReceive+0x42>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueReceive+0x44>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueReceive+0x5e>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	61fb      	str	r3, [r7, #28]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800413e:	f001 fa7f 	bl	8005640 <xTaskGetSchedulerState>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <xQueueReceive+0x6e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <xQueueReceive+0x72>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueReceive+0x74>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueReceive+0x8e>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	61bb      	str	r3, [r7, #24]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800416e:	f002 f979 	bl	8006464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01f      	beq.n	80041be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004182:	f000 fa9b 	bl	80046bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00f      	beq.n	80041b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	3310      	adds	r3, #16
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f882 	bl	80052a4 <xTaskRemoveFromEventList>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041a6:	4b3d      	ldr	r3, [pc, #244]	; (800429c <xQueueReceive+0x1bc>)
 80041a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041b6:	f002 f985 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e069      	b.n	8004292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041c4:	f002 f97e 	bl	80064c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e062      	b.n	8004292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041d2:	f107 0310 	add.w	r3, r7, #16
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f8c8 	bl	800536c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041e0:	f002 f970 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041e4:	f000 fe28 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e8:	f002 f93c 	bl	8006464 <vPortEnterCritical>
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d103      	bne.n	8004202 <xQueueReceive+0x122>
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004208:	b25b      	sxtb	r3, r3
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d103      	bne.n	8004218 <xQueueReceive+0x138>
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004218:	f002 f954 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800421c:	1d3a      	adds	r2, r7, #4
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f8b7 	bl	8005398 <xTaskCheckForTimeOut>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d123      	bne.n	8004278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004232:	f000 fabb 	bl	80047ac <prvIsQueueEmpty>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	3324      	adds	r3, #36	; 0x24
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 ffdd 	bl	8005204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800424a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424c:	f000 fa5c 	bl	8004708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004250:	f000 fe00 	bl	8004e54 <xTaskResumeAll>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d189      	bne.n	800416e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <xQueueReceive+0x1bc>)
 800425c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	e780      	b.n	800416e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800426c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426e:	f000 fa4b 	bl	8004708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004272:	f000 fdef 	bl	8004e54 <xTaskResumeAll>
 8004276:	e77a      	b.n	800416e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427a:	f000 fa45 	bl	8004708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800427e:	f000 fde9 	bl	8004e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004284:	f000 fa92 	bl	80047ac <prvIsQueueEmpty>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f43f af6f 	beq.w	800416e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004292:	4618      	mov	r0, r3
 8004294:	3730      	adds	r7, #48	; 0x30
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	e000ed04 	.word	0xe000ed04

080042a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08e      	sub	sp, #56	; 0x38
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	61fb      	str	r3, [r7, #28]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042f0:	f001 f9a6 	bl	8005640 <xTaskGetSchedulerState>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <xQueueSemaphoreTake+0x60>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <xQueueSemaphoreTake+0x64>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <xQueueSemaphoreTake+0x66>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	61bb      	str	r3, [r7, #24]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004320:	f002 f8a0 	bl	8006464 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d024      	beq.n	800437a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004340:	f001 faf4 	bl	800592c <pvTaskIncrementMutexHeldCount>
 8004344:	4602      	mov	r2, r0
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00f      	beq.n	8004372 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	3310      	adds	r3, #16
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ffa4 	bl	80052a4 <xTaskRemoveFromEventList>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004362:	4b54      	ldr	r3, [pc, #336]	; (80044b4 <xQueueSemaphoreTake+0x214>)
 8004364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004372:	f002 f8a7 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 8004376:	2301      	movs	r3, #1
 8004378:	e097      	b.n	80044aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	617b      	str	r3, [r7, #20]
}
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800439c:	f002 f892 	bl	80064c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e082      	b.n	80044aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043aa:	f107 030c 	add.w	r3, r7, #12
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ffdc 	bl	800536c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b8:	f002 f884 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043bc:	f000 fd3c 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c0:	f002 f850 	bl	8006464 <vPortEnterCritical>
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d103      	bne.n	80043da <xQueueSemaphoreTake+0x13a>
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d103      	bne.n	80043f0 <xQueueSemaphoreTake+0x150>
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f0:	f002 f868 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f4:	463a      	mov	r2, r7
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 ffcb 	bl	8005398 <xTaskCheckForTimeOut>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d132      	bne.n	800446e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800440a:	f000 f9cf 	bl	80047ac <prvIsQueueEmpty>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d026      	beq.n	8004462 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800441c:	f002 f822 	bl	8006464 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f929 	bl	800567c <xTaskPriorityInherit>
 800442a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800442c:	f002 f84a 	bl	80064c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	3324      	adds	r3, #36	; 0x24
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fee3 	bl	8005204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800443e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004440:	f000 f962 	bl	8004708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004444:	f000 fd06 	bl	8004e54 <xTaskResumeAll>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f47f af68 	bne.w	8004320 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <xQueueSemaphoreTake+0x214>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	e75e      	b.n	8004320 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004464:	f000 f950 	bl	8004708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004468:	f000 fcf4 	bl	8004e54 <xTaskResumeAll>
 800446c:	e758      	b.n	8004320 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800446e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004470:	f000 f94a 	bl	8004708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004474:	f000 fcee 	bl	8004e54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447a:	f000 f997 	bl	80047ac <prvIsQueueEmpty>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f43f af4d 	beq.w	8004320 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800448c:	f001 ffea 	bl	8006464 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004492:	f000 f891 	bl	80045b8 <prvGetDisinheritPriorityAfterTimeout>
 8004496:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f9c2 	bl	8005828 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044a4:	f002 f80e 	bl	80064c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3738      	adds	r7, #56	; 0x38
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08e      	sub	sp, #56	; 0x38
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	623b      	str	r3, [r7, #32]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <xQueueReceiveFromISR+0x3a>
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <xQueueReceiveFromISR+0x3e>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <xQueueReceiveFromISR+0x40>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61fb      	str	r3, [r7, #28]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004512:	f002 f889 	bl	8006628 <vPortValidateInterruptPriority>
	__asm volatile
 8004516:	f3ef 8211 	mrs	r2, BASEPRI
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	61ba      	str	r2, [r7, #24]
 800452c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800452e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d02f      	beq.n	800459e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800454c:	f000 f8b6 	bl	80046bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d112      	bne.n	8004588 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	3310      	adds	r3, #16
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fe98 	bl	80052a4 <xTaskRemoveFromEventList>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e007      	b.n	8004598 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800458c:	3301      	adds	r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	b25a      	sxtb	r2, r3
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004598:	2301      	movs	r3, #1
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
 800459c:	e001      	b.n	80045a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800459e:	2300      	movs	r3, #0
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f383 8811 	msr	BASEPRI, r3
}
 80045ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3738      	adds	r7, #56	; 0x38
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d006      	beq.n	80045d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e001      	b.n	80045da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045da:	68fb      	ldr	r3, [r7, #12]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d14d      	bne.n	80046aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f001 f89a 	bl	800574c <xTaskPriorityDisinherit>
 8004618:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e043      	b.n	80046aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d119      	bne.n	800465c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6858      	ldr	r0, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	461a      	mov	r2, r3
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	f003 fb5e 	bl	8007cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d32b      	bcc.n	80046aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	e026      	b.n	80046aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68d8      	ldr	r0, [r3, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	461a      	mov	r2, r3
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	f003 fb44 	bl	8007cf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	425b      	negs	r3, r3
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d207      	bcs.n	8004698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	425b      	negs	r3, r3
 8004692:	441a      	add	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d105      	bne.n	80046aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046b2:	697b      	ldr	r3, [r7, #20]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d018      	beq.n	8004700 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	441a      	add	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d303      	bcc.n	80046f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	461a      	mov	r2, r3
 80046fa:	6838      	ldr	r0, [r7, #0]
 80046fc:	f003 fafa 	bl	8007cf4 <memcpy>
	}
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004710:	f001 fea8 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800471a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800471c:	e011      	b.n	8004742 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d012      	beq.n	800474c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3324      	adds	r3, #36	; 0x24
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fdba 	bl	80052a4 <xTaskRemoveFromEventList>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004736:	f000 fe91 	bl	800545c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	3b01      	subs	r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dce9      	bgt.n	800471e <prvUnlockQueue+0x16>
 800474a:	e000      	b.n	800474e <prvUnlockQueue+0x46>
					break;
 800474c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004756:	f001 feb5 	bl	80064c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800475a:	f001 fe83 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004764:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004766:	e011      	b.n	800478c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d012      	beq.n	8004796 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3310      	adds	r3, #16
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fd95 	bl	80052a4 <xTaskRemoveFromEventList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004780:	f000 fe6c 	bl	800545c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	3b01      	subs	r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800478c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dce9      	bgt.n	8004768 <prvUnlockQueue+0x60>
 8004794:	e000      	b.n	8004798 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004796:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047a0:	f001 fe90 	bl	80064c4 <vPortExitCritical>
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047b4:	f001 fe56 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e001      	b.n	80047ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ca:	f001 fe7b 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 80047ce:	68fb      	ldr	r3, [r7, #12]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e0:	f001 fe40 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d102      	bne.n	80047f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e001      	b.n	80047fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047fa:	f001 fe63 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 80047fe:	68fb      	ldr	r3, [r7, #12]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e014      	b.n	8004842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004818:	4a0f      	ldr	r2, [pc, #60]	; (8004858 <vQueueAddToRegistry+0x50>)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <vQueueAddToRegistry+0x50>)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <vQueueAddToRegistry+0x50>)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800483a:	e006      	b.n	800484a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b07      	cmp	r3, #7
 8004846:	d9e7      	bls.n	8004818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2000094c 	.word	0x2000094c

0800485c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800486c:	f001 fdfa 	bl	8006464 <vPortEnterCritical>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004876:	b25b      	sxtb	r3, r3
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d103      	bne.n	8004886 <vQueueWaitForMessageRestricted+0x2a>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800488c:	b25b      	sxtb	r3, r3
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d103      	bne.n	800489c <vQueueWaitForMessageRestricted+0x40>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800489c:	f001 fe12 	bl	80064c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3324      	adds	r3, #36	; 0x24
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fccb 	bl	800524c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff26 	bl	8004708 <prvUnlockQueue>
	}
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	; 0x38
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <xTaskCreateStatic+0x46>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61fb      	str	r3, [r7, #28]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800490a:	235c      	movs	r3, #92	; 0x5c
 800490c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b5c      	cmp	r3, #92	; 0x5c
 8004912:	d00a      	beq.n	800492a <xTaskCreateStatic+0x66>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	61bb      	str	r3, [r7, #24]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800492a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01e      	beq.n	8004970 <xTaskCreateStatic+0xac>
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01b      	beq.n	8004970 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800494a:	2300      	movs	r3, #0
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	9302      	str	r3, [sp, #8]
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f850 	bl	8004a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800496a:	f000 f8dd 	bl	8004b28 <prvAddNewTaskToReadyList>
 800496e:	e001      	b.n	8004974 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004974:	697b      	ldr	r3, [r7, #20]
	}
 8004976:	4618      	mov	r0, r3
 8004978:	3728      	adds	r7, #40	; 0x28
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800497e:	b580      	push	{r7, lr}
 8004980:	b08c      	sub	sp, #48	; 0x30
 8004982:	af04      	add	r7, sp, #16
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fe88 	bl	80066a8 <pvPortMalloc>
 8004998:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049a0:	205c      	movs	r0, #92	; 0x5c
 80049a2:	f001 fe81 	bl	80066a8 <pvPortMalloc>
 80049a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
 80049b4:	e005      	b.n	80049c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f001 ff42 	bl	8006840 <vPortFree>
 80049bc:	e001      	b.n	80049c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d017      	beq.n	80049f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	2300      	movs	r3, #0
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f80e 	bl	8004a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ec:	69f8      	ldr	r0, [r7, #28]
 80049ee:	f000 f89b 	bl	8004b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e002      	b.n	80049fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	461a      	mov	r2, r3
 8004a20:	21a5      	movs	r1, #165	; 0xa5
 8004a22:	f003 f975 	bl	8007d10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	3b01      	subs	r3, #1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	617b      	str	r3, [r7, #20]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01f      	beq.n	8004aa6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	e012      	b.n	8004a92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	7819      	ldrb	r1, [r3, #0]
 8004a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3334      	adds	r3, #52	; 0x34
 8004a7c:	460a      	mov	r2, r1
 8004a7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d006      	beq.n	8004a9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d9e9      	bls.n	8004a6c <prvInitialiseNewTask+0x64>
 8004a98:	e000      	b.n	8004a9c <prvInitialiseNewTask+0x94>
			{
				break;
 8004a9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa4:	e003      	b.n	8004aae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b37      	cmp	r3, #55	; 0x37
 8004ab2:	d901      	bls.n	8004ab8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ab4:	2337      	movs	r3, #55	; 0x37
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fee4 	bl	800389c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe fedf 	bl	800389c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	69b8      	ldr	r0, [r7, #24]
 8004b08:	f001 fb80 	bl	800620c <pxPortInitialiseStack>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b1e:	bf00      	nop
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b30:	f001 fc98 	bl	8006464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b34:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <prvAddNewTaskToReadyList+0xc4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <prvAddNewTaskToReadyList+0xc4>)
 8004b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b46:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <prvAddNewTaskToReadyList+0xc4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d110      	bne.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b54:	f000 fca6 	bl	80054a4 <prvInitialiseTaskLists>
 8004b58:	e00d      	b.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <prvAddNewTaskToReadyList+0xcc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d802      	bhi.n	8004b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <prvAddNewTaskToReadyList+0xd0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <prvAddNewTaskToReadyList+0xd0>)
 8004b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <prvAddNewTaskToReadyList+0xd0>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <prvAddNewTaskToReadyList+0xd4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <prvAddNewTaskToReadyList+0x74>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <prvAddNewTaskToReadyList+0xd4>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <prvAddNewTaskToReadyList+0xd8>)
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7fe fe7f 	bl	80038b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bb8:	f001 fc84 	bl	80064c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <prvAddNewTaskToReadyList+0xcc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvAddNewTaskToReadyList+0xc8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d207      	bcs.n	8004be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <prvAddNewTaskToReadyList+0xdc>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000e60 	.word	0x20000e60
 8004bf0:	2000098c 	.word	0x2000098c
 8004bf4:	20000e6c 	.word	0x20000e6c
 8004bf8:	20000e7c 	.word	0x20000e7c
 8004bfc:	20000e68 	.word	0x20000e68
 8004c00:	20000990 	.word	0x20000990
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	617b      	str	r3, [r7, #20]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <vTaskDelayUntil+0x46>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	613b      	str	r3, [r7, #16]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <vTaskDelayUntil+0xf0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <vTaskDelayUntil+0x64>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004c6c:	f000 f8e4 	bl	8004e38 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004c70:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <vTaskDelayUntil+0xf4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20b      	bcs.n	8004ca2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d211      	bcs.n	8004cb8 <vTaskDelayUntil+0xb0>
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d90d      	bls.n	8004cb8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e00a      	b.n	8004cb8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d303      	bcc.n	8004cb4 <vTaskDelayUntil+0xac>
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d901      	bls.n	8004cb8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d006      	beq.n	8004cd2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fe41 	bl	8005954 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004cd2:	f000 f8bf 	bl	8004e54 <xTaskResumeAll>
 8004cd6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <vTaskDelayUntil+0xf8>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cee:	bf00      	nop
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000e88 	.word	0x20000e88
 8004cfc:	20000e64 	.word	0x20000e64
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <vTaskDelay+0x60>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <vTaskDelay+0x30>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	60bb      	str	r3, [r7, #8]
}
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d34:	f000 f880 	bl	8004e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fe0a 	bl	8005954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d40:	f000 f888 	bl	8004e54 <xTaskResumeAll>
 8004d44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d107      	bne.n	8004d5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <vTaskDelay+0x64>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000e88 	.word	0x20000e88
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	1d39      	adds	r1, r7, #4
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fd36 	bl	80037f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	9202      	str	r2, [sp, #8]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	460a      	mov	r2, r1
 8004d9a:	4921      	ldr	r1, [pc, #132]	; (8004e20 <vTaskStartScheduler+0xb4>)
 8004d9c:	4821      	ldr	r0, [pc, #132]	; (8004e24 <vTaskStartScheduler+0xb8>)
 8004d9e:	f7ff fd91 	bl	80048c4 <xTaskCreateStatic>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <vTaskStartScheduler+0xbc>)
 8004da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004da8:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <vTaskStartScheduler+0xbc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004db0:	2301      	movs	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e001      	b.n	8004dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d102      	bne.n	8004dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dc0:	f000 fe1c 	bl	80059fc <xTimerCreateTimerTask>
 8004dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d116      	bne.n	8004dfa <vTaskStartScheduler+0x8e>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
}
 8004dde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <vTaskStartScheduler+0xc0>)
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004de8:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <vTaskStartScheduler+0xc4>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <vTaskStartScheduler+0xc8>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004df4:	f001 fa94 	bl	8006320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004df8:	e00e      	b.n	8004e18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d10a      	bne.n	8004e18 <vTaskStartScheduler+0xac>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60fb      	str	r3, [r7, #12]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vTaskStartScheduler+0xaa>
}
 8004e18:	bf00      	nop
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	0800a78c 	.word	0x0800a78c
 8004e24:	08005475 	.word	0x08005475
 8004e28:	20000e84 	.word	0x20000e84
 8004e2c:	20000e80 	.word	0x20000e80
 8004e30:	20000e6c 	.word	0x20000e6c
 8004e34:	20000e64 	.word	0x20000e64

08004e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <vTaskSuspendAll+0x18>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a03      	ldr	r2, [pc, #12]	; (8004e50 <vTaskSuspendAll+0x18>)
 8004e44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000e88 	.word	0x20000e88

08004e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e62:	4b42      	ldr	r3, [pc, #264]	; (8004f6c <xTaskResumeAll+0x118>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	603b      	str	r3, [r7, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e80:	f001 faf0 	bl	8006464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e84:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <xTaskResumeAll+0x118>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	4a38      	ldr	r2, [pc, #224]	; (8004f6c <xTaskResumeAll+0x118>)
 8004e8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <xTaskResumeAll+0x118>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d162      	bne.n	8004f5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <xTaskResumeAll+0x11c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d05e      	beq.n	8004f5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e9e:	e02f      	b.n	8004f00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea0:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <xTaskResumeAll+0x120>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3318      	adds	r3, #24
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fd5f 	bl	8003970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fd5a 	bl	8003970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <xTaskResumeAll+0x124>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d903      	bls.n	8004ed0 <xTaskResumeAll+0x7c>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <xTaskResumeAll+0x124>)
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <xTaskResumeAll+0x128>)
 8004ede:	441a      	add	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fce5 	bl	80038b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <xTaskResumeAll+0x12c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <xTaskResumeAll+0x130>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <xTaskResumeAll+0x120>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1cb      	bne.n	8004ea0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f0e:	f000 fb67 	bl	80055e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <xTaskResumeAll+0x134>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f1e:	f000 f859 	bl	8004fd4 <xTaskIncrementTick>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <xTaskResumeAll+0x130>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f1      	bne.n	8004f1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <xTaskResumeAll+0x134>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <xTaskResumeAll+0x130>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <xTaskResumeAll+0x138>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f5c:	f001 fab2 	bl	80064c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f60:	68bb      	ldr	r3, [r7, #8]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000e88 	.word	0x20000e88
 8004f70:	20000e60 	.word	0x20000e60
 8004f74:	20000e20 	.word	0x20000e20
 8004f78:	20000e68 	.word	0x20000e68
 8004f7c:	20000990 	.word	0x20000990
 8004f80:	2000098c 	.word	0x2000098c
 8004f84:	20000e74 	.word	0x20000e74
 8004f88:	20000e70 	.word	0x20000e70
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <xTaskGetTickCount+0x1c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f9c:	687b      	ldr	r3, [r7, #4]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000e64 	.word	0x20000e64

08004fb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb6:	f001 fb37 	bl	8006628 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <xTaskGetTickCountFromISR+0x20>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc4:	683b      	ldr	r3, [r7, #0]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000e64 	.word	0x20000e64

08004fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fde:	4b4f      	ldr	r3, [pc, #316]	; (800511c <xTaskIncrementTick+0x148>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 808f 	bne.w	8005106 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <xTaskIncrementTick+0x14c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ff0:	4a4b      	ldr	r2, [pc, #300]	; (8005120 <xTaskIncrementTick+0x14c>)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d120      	bne.n	800503e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <xTaskIncrementTick+0x150>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <xTaskIncrementTick+0x48>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	603b      	str	r3, [r7, #0]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xTaskIncrementTick+0x46>
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <xTaskIncrementTick+0x150>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <xTaskIncrementTick+0x154>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <xTaskIncrementTick+0x150>)
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <xTaskIncrementTick+0x154>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b3e      	ldr	r3, [pc, #248]	; (800512c <xTaskIncrementTick+0x158>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	4a3d      	ldr	r2, [pc, #244]	; (800512c <xTaskIncrementTick+0x158>)
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	f000 fad1 	bl	80055e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800503e:	4b3c      	ldr	r3, [pc, #240]	; (8005130 <xTaskIncrementTick+0x15c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d349      	bcc.n	80050dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <xTaskIncrementTick+0x150>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <xTaskIncrementTick+0x15c>)
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	601a      	str	r2, [r3, #0]
					break;
 800505a:	e03f      	b.n	80050dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <xTaskIncrementTick+0x150>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d203      	bcs.n	800507c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005074:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <xTaskIncrementTick+0x15c>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800507a:	e02f      	b.n	80050dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fc75 	bl	8003970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3318      	adds	r3, #24
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fc6c 	bl	8003970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <xTaskIncrementTick+0x160>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d903      	bls.n	80050ac <xTaskIncrementTick+0xd8>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a22      	ldr	r2, [pc, #136]	; (8005134 <xTaskIncrementTick+0x160>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <xTaskIncrementTick+0x164>)
 80050ba:	441a      	add	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7fe fbf7 	bl	80038b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <xTaskIncrementTick+0x168>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3b8      	bcc.n	8005048 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050da:	e7b5      	b.n	8005048 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <xTaskIncrementTick+0x168>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	4915      	ldr	r1, [pc, #84]	; (8005138 <xTaskIncrementTick+0x164>)
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d901      	bls.n	80050f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <xTaskIncrementTick+0x16c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e004      	b.n	8005110 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskIncrementTick+0x170>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <xTaskIncrementTick+0x170>)
 800510e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005110:	697b      	ldr	r3, [r7, #20]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000e88 	.word	0x20000e88
 8005120:	20000e64 	.word	0x20000e64
 8005124:	20000e18 	.word	0x20000e18
 8005128:	20000e1c 	.word	0x20000e1c
 800512c:	20000e78 	.word	0x20000e78
 8005130:	20000e80 	.word	0x20000e80
 8005134:	20000e68 	.word	0x20000e68
 8005138:	20000990 	.word	0x20000990
 800513c:	2000098c 	.word	0x2000098c
 8005140:	20000e74 	.word	0x20000e74
 8005144:	20000e70 	.word	0x20000e70

08005148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <vTaskSwitchContext+0xa8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <vTaskSwitchContext+0xac>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800515c:	e041      	b.n	80051e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <vTaskSwitchContext+0xac>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <vTaskSwitchContext+0xb0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e010      	b.n	800518e <vTaskSwitchContext+0x46>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <vTaskSwitchContext+0x40>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	607b      	str	r3, [r7, #4]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vTaskSwitchContext+0x3e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3b01      	subs	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	491b      	ldr	r1, [pc, #108]	; (80051fc <vTaskSwitchContext+0xb4>)
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0e4      	beq.n	800516c <vTaskSwitchContext+0x24>
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <vTaskSwitchContext+0xb4>)
 80051ae:	4413      	add	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	3308      	adds	r3, #8
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d104      	bne.n	80051d2 <vTaskSwitchContext+0x8a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <vTaskSwitchContext+0xb8>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4a06      	ldr	r2, [pc, #24]	; (80051f8 <vTaskSwitchContext+0xb0>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6013      	str	r3, [r2, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000e88 	.word	0x20000e88
 80051f4:	20000e74 	.word	0x20000e74
 80051f8:	20000e68 	.word	0x20000e68
 80051fc:	20000990 	.word	0x20000990
 8005200:	2000098c 	.word	0x2000098c

08005204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <vTaskPlaceOnEventList+0x44>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3318      	adds	r3, #24
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fe fb63 	bl	80038fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005238:	2101      	movs	r1, #1
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f000 fb8a 	bl	8005954 <prvAddCurrentTaskToDelayedList>
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2000098c 	.word	0x2000098c

0800524c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	617b      	str	r3, [r7, #20]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3318      	adds	r3, #24
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7fe fb1a 	bl	80038b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	f000 fb5f 	bl	8005954 <prvAddCurrentTaskToDelayedList>
	}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2000098c 	.word	0x2000098c

080052a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	60fb      	str	r3, [r7, #12]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3318      	adds	r3, #24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fb4b 	bl	8003970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052da:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <xTaskRemoveFromEventList+0xb0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d11d      	bne.n	800531e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fb42 	bl	8003970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <xTaskRemoveFromEventList+0xb4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d903      	bls.n	8005300 <xTaskRemoveFromEventList+0x5c>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	4a16      	ldr	r2, [pc, #88]	; (8005358 <xTaskRemoveFromEventList+0xb4>)
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4a13      	ldr	r2, [pc, #76]	; (800535c <xTaskRemoveFromEventList+0xb8>)
 800530e:	441a      	add	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7fe facd 	bl	80038b6 <vListInsertEnd>
 800531c:	e005      	b.n	800532a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3318      	adds	r3, #24
 8005322:	4619      	mov	r1, r3
 8005324:	480e      	ldr	r0, [pc, #56]	; (8005360 <xTaskRemoveFromEventList+0xbc>)
 8005326:	f7fe fac6 	bl	80038b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <xTaskRemoveFromEventList+0xc0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d905      	bls.n	8005344 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <xTaskRemoveFromEventList+0xc4>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e001      	b.n	8005348 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005348:	697b      	ldr	r3, [r7, #20]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000e88 	.word	0x20000e88
 8005358:	20000e68 	.word	0x20000e68
 800535c:	20000990 	.word	0x20000990
 8005360:	20000e20 	.word	0x20000e20
 8005364:	2000098c 	.word	0x2000098c
 8005368:	20000e74 	.word	0x20000e74

0800536c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <vTaskInternalSetTimeOutState+0x24>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <vTaskInternalSetTimeOutState+0x28>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	20000e78 	.word	0x20000e78
 8005394:	20000e64 	.word	0x20000e64

08005398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	613b      	str	r3, [r7, #16]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053da:	f001 f843 	bl	8006464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053de:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <xTaskCheckForTimeOut+0xbc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d102      	bne.n	80053fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e023      	b.n	8005446 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <xTaskCheckForTimeOut+0xc0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d007      	beq.n	800541a <xTaskCheckForTimeOut+0x82>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e015      	b.n	8005446 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d20b      	bcs.n	800543c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ff9b 	bl	800536c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e004      	b.n	8005446 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005442:	2301      	movs	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005446:	f001 f83d 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 800544a:	69fb      	ldr	r3, [r7, #28]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000e64 	.word	0x20000e64
 8005458:	20000e78 	.word	0x20000e78

0800545c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <vTaskMissedYield+0x14>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000e74 	.word	0x20000e74

08005474 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800547c:	f000 f852 	bl	8005524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <prvIdleTask+0x28>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d9f9      	bls.n	800547c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <prvIdleTask+0x2c>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005498:	e7f0      	b.n	800547c <prvIdleTask+0x8>
 800549a:	bf00      	nop
 800549c:	20000990 	.word	0x20000990
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	e00c      	b.n	80054ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a12      	ldr	r2, [pc, #72]	; (8005504 <prvInitialiseTaskLists+0x60>)
 80054bc:	4413      	add	r3, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe f9cc 	bl	800385c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3301      	adds	r3, #1
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b37      	cmp	r3, #55	; 0x37
 80054ce:	d9ef      	bls.n	80054b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054d0:	480d      	ldr	r0, [pc, #52]	; (8005508 <prvInitialiseTaskLists+0x64>)
 80054d2:	f7fe f9c3 	bl	800385c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054d6:	480d      	ldr	r0, [pc, #52]	; (800550c <prvInitialiseTaskLists+0x68>)
 80054d8:	f7fe f9c0 	bl	800385c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054dc:	480c      	ldr	r0, [pc, #48]	; (8005510 <prvInitialiseTaskLists+0x6c>)
 80054de:	f7fe f9bd 	bl	800385c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054e2:	480c      	ldr	r0, [pc, #48]	; (8005514 <prvInitialiseTaskLists+0x70>)
 80054e4:	f7fe f9ba 	bl	800385c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054e8:	480b      	ldr	r0, [pc, #44]	; (8005518 <prvInitialiseTaskLists+0x74>)
 80054ea:	f7fe f9b7 	bl	800385c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <prvInitialiseTaskLists+0x78>)
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <prvInitialiseTaskLists+0x64>)
 80054f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvInitialiseTaskLists+0x7c>)
 80054f6:	4a05      	ldr	r2, [pc, #20]	; (800550c <prvInitialiseTaskLists+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000990 	.word	0x20000990
 8005508:	20000df0 	.word	0x20000df0
 800550c:	20000e04 	.word	0x20000e04
 8005510:	20000e20 	.word	0x20000e20
 8005514:	20000e34 	.word	0x20000e34
 8005518:	20000e4c 	.word	0x20000e4c
 800551c:	20000e18 	.word	0x20000e18
 8005520:	20000e1c 	.word	0x20000e1c

08005524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800552a:	e019      	b.n	8005560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800552c:	f000 ff9a 	bl	8006464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	4b10      	ldr	r3, [pc, #64]	; (8005574 <prvCheckTasksWaitingTermination+0x50>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe fa17 	bl	8003970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <prvCheckTasksWaitingTermination+0x54>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <prvCheckTasksWaitingTermination+0x54>)
 800554a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <prvCheckTasksWaitingTermination+0x58>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <prvCheckTasksWaitingTermination+0x58>)
 8005554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005556:	f000 ffb5 	bl	80064c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f810 	bl	8005580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <prvCheckTasksWaitingTermination+0x58>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e1      	bne.n	800552c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000e34 	.word	0x20000e34
 8005578:	20000e60 	.word	0x20000e60
 800557c:	20000e48 	.word	0x20000e48

08005580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f952 	bl	8006840 <vPortFree>
				vPortFree( pxTCB );
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f94f 	bl	8006840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055a2:	e018      	b.n	80055d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d103      	bne.n	80055b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 f946 	bl	8006840 <vPortFree>
	}
 80055b4:	e00f      	b.n	80055d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d00a      	beq.n	80055d6 <prvDeleteTCB+0x56>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <prvDeleteTCB+0x54>
	}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <prvResetNextTaskUnblockTime+0x38>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <prvResetNextTaskUnblockTime+0x3c>)
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055f8:	e008      	b.n	800560c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <prvResetNextTaskUnblockTime+0x38>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <prvResetNextTaskUnblockTime+0x3c>)
 800560a:	6013      	str	r3, [r2, #0]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	20000e18 	.word	0x20000e18
 800561c:	20000e80 	.word	0x20000e80

08005620 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <xTaskGetCurrentTaskHandle+0x1c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800562c:	687b      	ldr	r3, [r7, #4]
	}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000098c 	.word	0x2000098c

08005640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <xTaskGetSchedulerState+0x34>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800564e:	2301      	movs	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e008      	b.n	8005666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005654:	4b08      	ldr	r3, [pc, #32]	; (8005678 <xTaskGetSchedulerState+0x38>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800565c:	2302      	movs	r3, #2
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e001      	b.n	8005666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005666:	687b      	ldr	r3, [r7, #4]
	}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000e6c 	.word	0x20000e6c
 8005678:	20000e88 	.word	0x20000e88

0800567c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d051      	beq.n	8005736 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <xTaskPriorityInherit+0xc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	429a      	cmp	r2, r3
 800569e:	d241      	bcs.n	8005724 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db06      	blt.n	80056b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a8:	4b25      	ldr	r3, [pc, #148]	; (8005740 <xTaskPriorityInherit+0xc4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6959      	ldr	r1, [r3, #20]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <xTaskPriorityInherit+0xc8>)
 80056c8:	4413      	add	r3, r2
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d122      	bne.n	8005714 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe f94c 	bl	8003970 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <xTaskPriorityInherit+0xc4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <xTaskPriorityInherit+0xcc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d903      	bls.n	80056f6 <xTaskPriorityInherit+0x7a>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <xTaskPriorityInherit+0xcc>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <xTaskPriorityInherit+0xc8>)
 8005704:	441a      	add	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fe f8d2 	bl	80038b6 <vListInsertEnd>
 8005712:	e004      	b.n	800571e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <xTaskPriorityInherit+0xc4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800571e:	2301      	movs	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e008      	b.n	8005736 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <xTaskPriorityInherit+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d201      	bcs.n	8005736 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005736:	68fb      	ldr	r3, [r7, #12]
	}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	2000098c 	.word	0x2000098c
 8005744:	20000990 	.word	0x20000990
 8005748:	20000e68 	.word	0x20000e68

0800574c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d056      	beq.n	8005810 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <xTaskPriorityDisinherit+0xd0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d00a      	beq.n	8005782 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	60bb      	str	r3, [r7, #8]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d02c      	beq.n	8005810 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d128      	bne.n	8005810 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f8d4 	bl	8003970 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <xTaskPriorityDisinherit+0xd4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <xTaskPriorityDisinherit+0xa4>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <xTaskPriorityDisinherit+0xd4>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <xTaskPriorityDisinherit+0xd8>)
 80057fe:	441a      	add	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe f855 	bl	80038b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005810:	697b      	ldr	r3, [r7, #20]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000098c 	.word	0x2000098c
 8005820:	20000e68 	.word	0x20000e68
 8005824:	20000990 	.word	0x20000990

08005828 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005836:	2301      	movs	r3, #1
 8005838:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d06a      	beq.n	8005916 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d902      	bls.n	800586e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e002      	b.n	8005874 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	429a      	cmp	r2, r3
 800587c:	d04b      	beq.n	8005916 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	429a      	cmp	r2, r3
 8005886:	d146      	bne.n	8005916 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	429a      	cmp	r2, r3
 8005890:	d10a      	bne.n	80058a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db04      	blt.n	80058c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6959      	ldr	r1, [r3, #20]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a13      	ldr	r2, [pc, #76]	; (8005924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80058d6:	4413      	add	r3, r2
 80058d8:	4299      	cmp	r1, r3
 80058da:	d11c      	bne.n	8005916 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	3304      	adds	r3, #4
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe f845 	bl	8003970 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d903      	bls.n	80058fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4a0c      	ldr	r2, [pc, #48]	; (8005928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005908:	441a      	add	r2, r3
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f7fd ffd0 	bl	80038b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005916:	bf00      	nop
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2000098c 	.word	0x2000098c
 8005924:	20000990 	.word	0x20000990
 8005928:	20000e68 	.word	0x20000e68

0800592c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pvTaskIncrementMutexHeldCount+0x24>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <pvTaskIncrementMutexHeldCount+0x24>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800593e:	3201      	adds	r2, #1
 8005940:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <pvTaskIncrementMutexHeldCount+0x24>)
 8005944:	681b      	ldr	r3, [r3, #0]
	}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	2000098c 	.word	0x2000098c

08005954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3304      	adds	r3, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe f800 	bl	8003970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d10a      	bne.n	800598e <prvAddCurrentTaskToDelayedList+0x3a>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4819      	ldr	r0, [pc, #100]	; (80059ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005988:	f7fd ff95 	bl	80038b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800598c:	e026      	b.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d209      	bcs.n	80059ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fd ffa3 	bl	80038fe <vListInsert>
}
 80059b8:	e010      	b.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ba:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fd ff99 	bl	80038fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d202      	bcs.n	80059dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000e64 	.word	0x20000e64
 80059e8:	2000098c 	.word	0x2000098c
 80059ec:	20000e4c 	.word	0x20000e4c
 80059f0:	20000e1c 	.word	0x20000e1c
 80059f4:	20000e18 	.word	0x20000e18
 80059f8:	20000e80 	.word	0x20000e80

080059fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a06:	f000 fba1 	bl	800614c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <xTimerCreateTimerTask+0x80>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d021      	beq.n	8005a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a1a:	1d3a      	adds	r2, r7, #4
 8005a1c:	f107 0108 	add.w	r1, r7, #8
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fd feff 	bl	8003828 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	9202      	str	r2, [sp, #8]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	2302      	movs	r3, #2
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	4910      	ldr	r1, [pc, #64]	; (8005a80 <xTimerCreateTimerTask+0x84>)
 8005a3e:	4811      	ldr	r0, [pc, #68]	; (8005a84 <xTimerCreateTimerTask+0x88>)
 8005a40:	f7fe ff40 	bl	80048c4 <xTaskCreateStatic>
 8005a44:	4603      	mov	r3, r0
 8005a46:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <xTimerCreateTimerTask+0x8c>)
 8005a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTimerCreateTimerTask+0x8c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	613b      	str	r3, [r7, #16]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000ebc 	.word	0x20000ebc
 8005a80:	0800a794 	.word	0x0800a794
 8005a84:	08005cf5 	.word	0x08005cf5
 8005a88:	20000ec0 	.word	0x20000ec0

08005a8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a9a:	202c      	movs	r0, #44	; 0x2c
 8005a9c:	f000 fe04 	bl	80066a8 <pvPortMalloc>
 8005aa0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00d      	beq.n	8005ac4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	9301      	str	r3, [sp, #4]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f843 	bl	8005b4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005ac4:	697b      	ldr	r3, [r7, #20]
	}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08a      	sub	sp, #40	; 0x28
 8005ad2:	af02      	add	r7, sp, #8
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005adc:	232c      	movs	r3, #44	; 0x2c
 8005ade:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b2c      	cmp	r3, #44	; 0x2c
 8005ae4:	d00a      	beq.n	8005afc <xTimerCreateStatic+0x2e>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61bb      	str	r3, [r7, #24]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005afc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xTimerCreateStatic+0x4c>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	617b      	str	r3, [r7, #20]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f805 	bl	8005b4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005b40:	69fb      	ldr	r3, [r7, #28]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617b      	str	r3, [r7, #20]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01e      	beq.n	8005bb8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005b7a:	f000 fae7 	bl	800614c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fe7e 	bl	800389c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bac:	f043 0304 	orr.w	r3, r3, #4
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005bb8:	bf00      	nop
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	623b      	str	r3, [r7, #32]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bee:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <xTimerGenericCommand+0x98>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d02a      	beq.n	8005c4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	dc18      	bgt.n	8005c3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c08:	f7ff fd1a 	bl	8005640 <xTaskGetSchedulerState>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d109      	bne.n	8005c26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <xTimerGenericCommand+0x98>)
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	f107 0110 	add.w	r1, r7, #16
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	f7fe f8c5 	bl	8003dac <xQueueGenericSend>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24
 8005c24:	e012      	b.n	8005c4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <xTimerGenericCommand+0x98>)
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f107 0110 	add.w	r1, r7, #16
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2200      	movs	r2, #0
 8005c32:	f7fe f8bb 	bl	8003dac <xQueueGenericSend>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24
 8005c38:	e008      	b.n	8005c4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <xTimerGenericCommand+0x98>)
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f107 0110 	add.w	r1, r7, #16
 8005c42:	2300      	movs	r3, #0
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	f7fe f9af 	bl	8003fa8 <xQueueGenericSendFromISR>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3728      	adds	r7, #40	; 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000ebc 	.word	0x20000ebc

08005c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c66:	4b22      	ldr	r3, [pc, #136]	; (8005cf0 <prvProcessExpiredTimer+0x94>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fe7b 	bl	8003970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d022      	beq.n	8005cce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	18d1      	adds	r1, r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	6978      	ldr	r0, [r7, #20]
 8005c96:	f000 f8d1 	bl	8005e3c <prvInsertTimerInActiveList>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01f      	beq.n	8005ce0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7ff ff88 	bl	8005bc0 <xTimerGenericCommand>
 8005cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd4:	f023 0301 	bic.w	r3, r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	4798      	blx	r3
}
 8005ce8:	bf00      	nop
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000eb4 	.word	0x20000eb4

08005cf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f857 	bl	8005db4 <prvGetNextExpireTime>
 8005d06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f803 	bl	8005d18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d12:	f000 f8d5 	bl	8005ec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d16:	e7f1      	b.n	8005cfc <prvTimerTask+0x8>

08005d18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d22:	f7ff f889 	bl	8004e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f866 	bl	8005dfc <prvSampleTimeNow>
 8005d30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d130      	bne.n	8005d9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <prvProcessTimerOrBlockTask+0x3c>
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d806      	bhi.n	8005d54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d46:	f7ff f885 	bl	8004e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff85 	bl	8005c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d52:	e024      	b.n	8005d9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <prvProcessTimerOrBlockTask+0x90>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <prvProcessTimerOrBlockTask+0x50>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <prvProcessTimerOrBlockTask+0x52>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <prvProcessTimerOrBlockTask+0x94>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f7fe fd6f 	bl	800485c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d7e:	f7ff f869 	bl	8004e54 <xTaskResumeAll>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <prvProcessTimerOrBlockTask+0x98>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
}
 8005d98:	e001      	b.n	8005d9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d9a:	f7ff f85b 	bl	8004e54 <xTaskResumeAll>
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000eb8 	.word	0x20000eb8
 8005dac:	20000ebc 	.word	0x20000ebc
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dbc:	4b0e      	ldr	r3, [pc, #56]	; (8005df8 <prvGetNextExpireTime+0x44>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <prvGetNextExpireTime+0x16>
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	e000      	b.n	8005dcc <prvGetNextExpireTime+0x18>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <prvGetNextExpireTime+0x44>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e001      	b.n	8005de8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005de8:	68fb      	ldr	r3, [r7, #12]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000eb4 	.word	0x20000eb4

08005dfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e04:	f7ff f8c4 	bl	8004f90 <xTaskGetTickCount>
 8005e08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <prvSampleTimeNow+0x3c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d205      	bcs.n	8005e20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e14:	f000 f936 	bl	8006084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e26:	4a04      	ldr	r2, [pc, #16]	; (8005e38 <prvSampleTimeNow+0x3c>)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000ec4 	.word	0x20000ec4

08005e3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d812      	bhi.n	8005e88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	1ad2      	subs	r2, r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e01b      	b.n	8005eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <prvInsertTimerInActiveList+0x7c>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fd fd3c 	bl	80038fe <vListInsert>
 8005e86:	e012      	b.n	8005eae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d206      	bcs.n	8005e9e <prvInsertTimerInActiveList+0x62>
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e007      	b.n	8005eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <prvInsertTimerInActiveList+0x80>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fd fd28 	bl	80038fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000eb8 	.word	0x20000eb8
 8005ebc:	20000eb4 	.word	0x20000eb4

08005ec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08e      	sub	sp, #56	; 0x38
 8005ec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ec6:	e0ca      	b.n	800605e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da18      	bge.n	8005f00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	61fb      	str	r3, [r7, #28]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef6:	6850      	ldr	r0, [r2, #4]
 8005ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efa:	6892      	ldr	r2, [r2, #8]
 8005efc:	4611      	mov	r1, r2
 8005efe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f2c0 80aa 	blt.w	800605c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fd fd29 	bl	8003970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f1e:	463b      	mov	r3, r7
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff ff6b 	bl	8005dfc <prvSampleTimeNow>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	f200 8097 	bhi.w	800605e <prvProcessReceivedCommands+0x19e>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <prvProcessReceivedCommands+0x78>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005f61 	.word	0x08005f61
 8005f44:	08005fd5 	.word	0x08005fd5
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08006033 	.word	0x08006033
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08005f61 	.word	0x08005f61
 8005f58:	08005fd5 	.word	0x08005fd5
 8005f5c:	08005fe9 	.word	0x08005fe9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	18d1      	adds	r1, r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f80:	f7ff ff5c 	bl	8005e3c <prvInsertTimerInActiveList>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d069      	beq.n	800605e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05e      	beq.n	800605e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	441a      	add	r2, r3
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2300      	movs	r3, #0
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb2:	f7ff fe05 	bl	8005bc0 <xTimerGenericCommand>
 8005fb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d14f      	bne.n	800605e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	61bb      	str	r3, [r7, #24]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fe6:	e03a      	b.n	800605e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	617b      	str	r3, [r7, #20]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	18d1      	adds	r1, r2, r3
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602c:	f7ff ff06 	bl	8005e3c <prvInsertTimerInActiveList>
					break;
 8006030:	e015      	b.n	800605e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006042:	f000 fbfd 	bl	8006840 <vPortFree>
 8006046:	e00a      	b.n	800605e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800605a:	e000      	b.n	800605e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800605c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <prvProcessReceivedCommands+0x1c0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	1d39      	adds	r1, r7, #4
 8006064:	2200      	movs	r2, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe f83a 	bl	80040e0 <xQueueReceive>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	f47f af2a 	bne.w	8005ec8 <prvProcessReceivedCommands+0x8>
	}
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3730      	adds	r7, #48	; 0x30
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000ebc 	.word	0x20000ebc

08006084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800608a:	e048      	b.n	800611e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800608c:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <prvSwitchTimerLists+0xc0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <prvSwitchTimerLists+0xc0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fd fc63 	bl	8003970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02e      	beq.n	800611e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d90e      	bls.n	80060f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060de:	4b19      	ldr	r3, [pc, #100]	; (8006144 <prvSwitchTimerLists+0xc0>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fd fc08 	bl	80038fe <vListInsert>
 80060ee:	e016      	b.n	800611e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	2100      	movs	r1, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff fd60 	bl	8005bc0 <xTimerGenericCommand>
 8006100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	603b      	str	r3, [r7, #0]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <prvSwitchTimerLists+0xc0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1b1      	bne.n	800608c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <prvSwitchTimerLists+0xc0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <prvSwitchTimerLists+0xc4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a04      	ldr	r2, [pc, #16]	; (8006144 <prvSwitchTimerLists+0xc0>)
 8006134:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006136:	4a04      	ldr	r2, [pc, #16]	; (8006148 <prvSwitchTimerLists+0xc4>)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000eb4 	.word	0x20000eb4
 8006148:	20000eb8 	.word	0x20000eb8

0800614c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006152:	f000 f987 	bl	8006464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006156:	4b15      	ldr	r3, [pc, #84]	; (80061ac <prvCheckForValidListAndQueue+0x60>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d120      	bne.n	80061a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800615e:	4814      	ldr	r0, [pc, #80]	; (80061b0 <prvCheckForValidListAndQueue+0x64>)
 8006160:	f7fd fb7c 	bl	800385c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006164:	4813      	ldr	r0, [pc, #76]	; (80061b4 <prvCheckForValidListAndQueue+0x68>)
 8006166:	f7fd fb79 	bl	800385c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <prvCheckForValidListAndQueue+0x6c>)
 800616c:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <prvCheckForValidListAndQueue+0x64>)
 800616e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <prvCheckForValidListAndQueue+0x70>)
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <prvCheckForValidListAndQueue+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006176:	2300      	movs	r3, #0
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <prvCheckForValidListAndQueue+0x74>)
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <prvCheckForValidListAndQueue+0x78>)
 800617e:	2110      	movs	r1, #16
 8006180:	200a      	movs	r0, #10
 8006182:	f7fd fc87 	bl	8003a94 <xQueueGenericCreateStatic>
 8006186:	4603      	mov	r3, r0
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <prvCheckForValidListAndQueue+0x60>)
 800618a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800618c:	4b07      	ldr	r3, [pc, #28]	; (80061ac <prvCheckForValidListAndQueue+0x60>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <prvCheckForValidListAndQueue+0x60>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	490b      	ldr	r1, [pc, #44]	; (80061c8 <prvCheckForValidListAndQueue+0x7c>)
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fb34 	bl	8004808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061a0:	f000 f990 	bl	80064c4 <vPortExitCritical>
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000ebc 	.word	0x20000ebc
 80061b0:	20000e8c 	.word	0x20000e8c
 80061b4:	20000ea0 	.word	0x20000ea0
 80061b8:	20000eb4 	.word	0x20000eb4
 80061bc:	20000eb8 	.word	0x20000eb8
 80061c0:	20000f68 	.word	0x20000f68
 80061c4:	20000ec8 	.word	0x20000ec8
 80061c8:	0800a79c 	.word	0x0800a79c

080061cc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80061f4:	f000 f936 	bl	8006464 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80061fe:	f000 f961 	bl	80064c4 <vPortExitCritical>

	return pvReturn;
 8006202:	693b      	ldr	r3, [r7, #16]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b04      	subs	r3, #4
 800621c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b04      	subs	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800623c:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <pxPortInitialiseStack+0x64>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3b14      	subs	r3, #20
 8006246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f06f 0202 	mvn.w	r2, #2
 800625a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3b20      	subs	r3, #32
 8006260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	08006275 	.word	0x08006275

08006274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvTaskExitError+0x54>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d00a      	beq.n	800629e <prvTaskExitError+0x2a>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <prvTaskExitError+0x28>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60bb      	str	r3, [r7, #8]
}
 80062b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062b2:	bf00      	nop
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0fc      	beq.n	80062b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2000002c 	.word	0x2000002c
 80062cc:	00000000 	.word	0x00000000

080062d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	4770      	bx	lr
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst2>:
 80062f0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062f8:	4808      	ldr	r0, [pc, #32]	; (800631c <prvPortStartFirstTask+0x24>)
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f380 8808 	msr	MSP, r0
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8814 	msr	CONTROL, r0
 800630a:	b662      	cpsie	i
 800630c:	b661      	cpsie	f
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	df00      	svc	0
 8006318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800631a:	bf00      	nop
 800631c:	e000ed08 	.word	0xe000ed08

08006320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006326:	4b46      	ldr	r3, [pc, #280]	; (8006440 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a46      	ldr	r2, [pc, #280]	; (8006444 <xPortStartScheduler+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x26>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <xPortStartScheduler+0x120>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3f      	ldr	r2, [pc, #252]	; (8006448 <xPortStartScheduler+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10a      	bne.n	8006366 <xPortStartScheduler+0x46>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <xPortStartScheduler+0x12c>)
 8006368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	22ff      	movs	r2, #255	; 0xff
 8006376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006388:	b2da      	uxtb	r2, r3
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <xPortStartScheduler+0x130>)
 800638c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <xPortStartScheduler+0x134>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006394:	e009      	b.n	80063aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3b01      	subs	r3, #1
 800639c:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <xPortStartScheduler+0x134>)
 800639e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d0ef      	beq.n	8006396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <xPortStartScheduler+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1c3 0307 	rsb	r3, r3, #7
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d00a      	beq.n	80063d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <xPortStartScheduler+0x134>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <xPortStartScheduler+0x134>)
 80063e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <xPortStartScheduler+0x134>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <xPortStartScheduler+0x134>)
 80063ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <xPortStartScheduler+0x138>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <xPortStartScheduler+0x138>)
 80063fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <xPortStartScheduler+0x138>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a14      	ldr	r2, [pc, #80]	; (8006458 <xPortStartScheduler+0x138>)
 8006408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800640c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800640e:	f000 f8dd 	bl	80065cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <xPortStartScheduler+0x13c>)
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006418:	f000 f8fc 	bl	8006614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800641c:	4b10      	ldr	r3, [pc, #64]	; (8006460 <xPortStartScheduler+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0f      	ldr	r2, [pc, #60]	; (8006460 <xPortStartScheduler+0x140>)
 8006422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006428:	f7ff ff66 	bl	80062f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800642c:	f7fe fe8c 	bl	8005148 <vTaskSwitchContext>
	prvTaskExitError();
 8006430:	f7ff ff20 	bl	8006274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed00 	.word	0xe000ed00
 8006444:	410fc271 	.word	0x410fc271
 8006448:	410fc270 	.word	0x410fc270
 800644c:	e000e400 	.word	0xe000e400
 8006450:	20000fb8 	.word	0x20000fb8
 8006454:	20000fbc 	.word	0x20000fbc
 8006458:	e000ed20 	.word	0xe000ed20
 800645c:	2000002c 	.word	0x2000002c
 8006460:	e000ef34 	.word	0xe000ef34

08006464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	607b      	str	r3, [r7, #4]
}
 800647c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <vPortEnterCritical+0x58>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <vPortEnterCritical+0x58>)
 8006486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <vPortEnterCritical+0x58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <vPortEnterCritical+0x5c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	603b      	str	r3, [r7, #0]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vPortEnterCritical+0x4a>
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000002c 	.word	0x2000002c
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <vPortExitCritical+0x50>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <vPortExitCritical+0x24>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <vPortExitCritical+0x50>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <vPortExitCritical+0x50>)
 80064f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <vPortExitCritical+0x42>
 80064fa:	2300      	movs	r3, #0
 80064fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000002c 	.word	0x2000002c
	...

08006520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006520:	f3ef 8009 	mrs	r0, PSP
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4b15      	ldr	r3, [pc, #84]	; (8006580 <pxCurrentTCBConst>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f01e 0f10 	tst.w	lr, #16
 8006530:	bf08      	it	eq
 8006532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	6010      	str	r0, [r2, #0]
 800653c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006544:	f380 8811 	msr	BASEPRI, r0
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f7fe fdfa 	bl	8005148 <vTaskSwitchContext>
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f380 8811 	msr	BASEPRI, r0
 800655c:	bc09      	pop	{r0, r3}
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	6808      	ldr	r0, [r1, #0]
 8006562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006566:	f01e 0f10 	tst.w	lr, #16
 800656a:	bf08      	it	eq
 800656c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006570:	f380 8809 	msr	PSP, r0
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst>:
 8006580:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	607b      	str	r3, [r7, #4]
}
 80065a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065a2:	f7fe fd17 	bl	8004fd4 <xTaskIncrementTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <xPortSysTickHandler+0x40>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortSetupTimerInterrupt+0x38>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <vPortSetupTimerInterrupt+0x3c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <vPortSetupTimerInterrupt+0x40>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	099b      	lsrs	r3, r3, #6
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <vPortSetupTimerInterrupt+0x44>)
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	e000e010 	.word	0xe000e010
 8006604:	e000e018 	.word	0xe000e018
 8006608:	20000020 	.word	0x20000020
 800660c:	10624dd3 	.word	0x10624dd3
 8006610:	e000e014 	.word	0xe000e014

08006614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006624 <vPortEnableVFP+0x10>
 8006618:	6801      	ldr	r1, [r0, #0]
 800661a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800661e:	6001      	str	r1, [r0, #0]
 8006620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006622:	bf00      	nop
 8006624:	e000ed88 	.word	0xe000ed88

08006628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800662e:	f3ef 8305 	mrs	r3, IPSR
 8006632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d914      	bls.n	8006664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <vPortValidateInterruptPriority+0x70>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <vPortValidateInterruptPriority+0x74>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	7afa      	ldrb	r2, [r7, #11]
 800664a:	429a      	cmp	r2, r3
 800664c:	d20a      	bcs.n	8006664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <vPortValidateInterruptPriority+0x78>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <vPortValidateInterruptPriority+0x7c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d90a      	bls.n	800668a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	603b      	str	r3, [r7, #0]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <vPortValidateInterruptPriority+0x60>
	}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	e000e3f0 	.word	0xe000e3f0
 800669c:	20000fb8 	.word	0x20000fb8
 80066a0:	e000ed0c 	.word	0xe000ed0c
 80066a4:	20000fbc 	.word	0x20000fbc

080066a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b4:	f7fe fbc0 	bl	8004e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b8:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <pvPortMalloc+0x180>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c0:	f000 f920 	bl	8006904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <pvPortMalloc+0x184>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8093 	bne.w	80067f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066d8:	2208      	movs	r2, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	3308      	adds	r3, #8
 80066f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <pvPortMalloc+0x6c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06e      	beq.n	80067f8 <pvPortMalloc+0x150>
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <pvPortMalloc+0x188>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d869      	bhi.n	80067f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <pvPortMalloc+0x18c>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <pvPortMalloc+0x18c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa4>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b36      	ldr	r3, [pc, #216]	; (8006828 <pvPortMalloc+0x180>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d050      	beq.n	80067f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d91f      	bls.n	80067b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <pvPortMalloc+0xf8>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f908 	bl	80069c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <pvPortMalloc+0x188>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <pvPortMalloc+0x188>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <pvPortMalloc+0x190>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <pvPortMalloc+0x188>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <pvPortMalloc+0x190>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <pvPortMalloc+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <pvPortMalloc+0x194>)
 80067f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f8:	f7fe fb2c 	bl	8004e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pvPortMalloc+0x174>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60fb      	str	r3, [r7, #12]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <pvPortMalloc+0x172>
	return pvReturn;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20004bc8 	.word	0x20004bc8
 800682c:	20004bdc 	.word	0x20004bdc
 8006830:	20004bcc 	.word	0x20004bcc
 8006834:	20004bc0 	.word	0x20004bc0
 8006838:	20004bd0 	.word	0x20004bd0
 800683c:	20004bd4 	.word	0x20004bd4

08006840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04d      	beq.n	80068ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006852:	2308      	movs	r3, #8
 8006854:	425b      	negs	r3, r3
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <vPortFree+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <vPortFree+0x44>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60fb      	str	r3, [r7, #12]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <vPortFree+0x62>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <vPortFree+0xb8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01e      	beq.n	80068ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11a      	bne.n	80068ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <vPortFree+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c8:	f7fe fab6 	bl	8004e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortFree+0xbc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <vPortFree+0xbc>)
 80068d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f000 f874 	bl	80069c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <vPortFree+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vPortFree+0xc0>)
 80068e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ea:	f7fe fab3 	bl	8004e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20004bdc 	.word	0x20004bdc
 80068fc:	20004bcc 	.word	0x20004bcc
 8006900:	20004bd8 	.word	0x20004bd8

08006904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800690e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvHeapInit+0xac>)
 8006912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <prvHeapInit+0xac>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <prvHeapInit+0xb0>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <prvHeapInit+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006950:	2208      	movs	r2, #8
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <prvHeapInit+0xb4>)
 8006964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvHeapInit+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <prvHeapInit+0xb4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvHeapInit+0xb4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvHeapInit+0xb8>)
 8006992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <prvHeapInit+0xbc>)
 800699a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <prvHeapInit+0xc0>)
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000fc0 	.word	0x20000fc0
 80069b4:	20004bc0 	.word	0x20004bc0
 80069b8:	20004bc8 	.word	0x20004bc8
 80069bc:	20004bd0 	.word	0x20004bd0
 80069c0:	20004bcc 	.word	0x20004bcc
 80069c4:	20004bdc 	.word	0x20004bdc

080069c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvInsertBlockIntoFreeList+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e002      	b.n	80069dc <prvInsertBlockIntoFreeList+0x14>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d8f7      	bhi.n	80069d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d108      	bne.n	8006a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d118      	bne.n	8006a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20004bc0 	.word	0x20004bc0
 8006a78:	20004bc8 	.word	0x20004bc8

08006a7c <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f805 	bl	8006a94 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	605a      	str	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	609a      	str	r2, [r3, #8]
#endif
      }
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <_ZN6SPointeqERKS_>:
struct SPoint
{
	uint32_t x;
	uint32_t y;

	bool operator == (const SPoint& point)
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
	{
		return ((x == point.x) && (y == point.y));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d107      	bne.n	8006b04 <_ZN6SPointeqERKS_+0x26>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d101      	bne.n	8006b04 <_ZN6SPointeqERKS_+0x26>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <_ZN6SPointeqERKS_+0x28>
 8006b04:	2300      	movs	r3, #0
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <_ZN6SPointneERKS_>:

	bool operator != (const SPoint& point)
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
	{
		return ((x != point.x) || (y != point.y));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d105      	bne.n	8006b34 <_ZN6SPointneERKS_+0x22>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <_ZN6SPointneERKS_+0x26>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <_ZN6SPointneERKS_+0x28>
 8006b38:	2300      	movs	r3, #0
	}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <_ZNSt7__cxx114listI6SPointSaIS1_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f9db 	bl	8006f0c <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EED1Ev>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <_ZL4Move14EMoveDirection6SPoint>:

static std::list<SPoint> snake = {{0, 0}};
SPoint gAple;

static SPoint Move(EMoveDirection direction, SPoint point)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	e881 000c 	stmia.w	r1, {r2, r3}
	switch(direction)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d830      	bhi.n	8006bd8 <_ZL4Move14EMoveDirection6SPoint+0x78>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <_ZL4Move14EMoveDirection6SPoint+0x1c>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006b9f 	.word	0x08006b9f
 8006b84:	08006bb3 	.word	0x08006bb3
 8006b88:	08006bc5 	.word	0x08006bc5
	{
		case EMoveDirection::Up:
		{
			point.y = (point.y == 0) ? kMaxPoint.y : point.y - 1;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <_ZL4Move14EMoveDirection6SPoint+0x36>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e001      	b.n	8006b9a <_ZL4Move14EMoveDirection6SPoint+0x3a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	607b      	str	r3, [r7, #4]
			break;
 8006b9c:	e01c      	b.n	8006bd8 <_ZL4Move14EMoveDirection6SPoint+0x78>
		}
		case EMoveDirection::Down:
		{
			point.y = (point.y < kMaxPoint.y) ? point.y + 1 : 0;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d202      	bcs.n	8006bac <_ZL4Move14EMoveDirection6SPoint+0x4c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	e000      	b.n	8006bae <_ZL4Move14EMoveDirection6SPoint+0x4e>
 8006bac:	2300      	movs	r3, #0
 8006bae:	607b      	str	r3, [r7, #4]
			break;
 8006bb0:	e012      	b.n	8006bd8 <_ZL4Move14EMoveDirection6SPoint+0x78>
		}
		case EMoveDirection::Left:
		{
			point.x = (point.x == 0) ? kMaxPoint.x : point.x - 1;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <_ZL4Move14EMoveDirection6SPoint+0x5c>
 8006bb8:	230f      	movs	r3, #15
 8006bba:	e001      	b.n	8006bc0 <_ZL4Move14EMoveDirection6SPoint+0x60>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	603b      	str	r3, [r7, #0]
			break;
 8006bc2:	e009      	b.n	8006bd8 <_ZL4Move14EMoveDirection6SPoint+0x78>
		}
		case EMoveDirection::Right:
		{
			point.x = (point.x < kMaxPoint.x) ? point.x + 1 : 0;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	220f      	movs	r2, #15
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d202      	bcs.n	8006bd2 <_ZL4Move14EMoveDirection6SPoint+0x72>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <_ZL4Move14EMoveDirection6SPoint+0x74>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
			break;
 8006bd6:	bf00      	nop
		}
	}

	return point;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	463b      	mov	r3, r7
 8006bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006be2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop

08006bf4 <_Z10SnakeResetv>:

void SnakeReset()
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
	snake = {{0, 0}};
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006c12:	4803      	ldr	r0, [pc, #12]	; (8006c20 <_Z10SnakeResetv+0x2c>)
 8006c14:	f000 f98a 	bl	8006f2c <_ZNSt7__cxx114listI6SPointSaIS1_EEaSESt16initializer_listIS1_E>
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20004be0 	.word	0x20004be0

08006c24 <_Z9SnakeMove14EMoveDirection>:

bool SnakeMove(EMoveDirection direction)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	SPoint head(Move(direction, snake.back()));
 8006c2c:	4833      	ldr	r0, [pc, #204]	; (8006cfc <_Z9SnakeMove14EMoveDirection+0xd8>)
 8006c2e:	f000 f998 	bl	8006f62 <_ZNSt7__cxx114listI6SPointSaIS1_EE4backEv>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f107 001c 	add.w	r0, r7, #28
 8006c38:	cb0c      	ldmia	r3, {r2, r3}
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	f7ff ff90 	bl	8006b60 <_ZL4Move14EMoveDirection6SPoint>

	for (SPoint point : snake)
 8006c40:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <_Z9SnakeMove14EMoveDirection+0xd8>)
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
 8006c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c46:	f000 f9a4 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c50:	f000 f9b0 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8006c54:	4603      	mov	r3, r0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	f107 020c 	add.w	r2, r7, #12
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 f9b6 	bl	8006fd4 <_ZStneRKSt14_List_iteratorI6SPointES3_>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d020      	beq.n	8006cb0 <_Z9SnakeMove14EMoveDirection+0x8c>
 8006c6e:	f107 0310 	add.w	r3, r7, #16
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f9d2 	bl	800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	f107 0314 	add.w	r3, r7, #20
 8006c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c82:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		if (point == head)
 8006c86:	f107 021c 	add.w	r2, r7, #28
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ff24 	bl	8006ade <_ZN6SPointeqERKS_>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <_Z9SnakeMove14EMoveDirection+0x80>
		{
			SnakeReset();
 8006c9c:	f7ff ffaa 	bl	8006bf4 <_Z10SnakeResetv>
			return true;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e027      	b.n	8006cf4 <_Z9SnakeMove14EMoveDirection+0xd0>
	for (SPoint point : snake)
 8006ca4:	f107 0310 	add.w	r3, r7, #16
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 f9a7 	bl	8006ffc <_ZNSt14_List_iteratorI6SPointEppEv>
 8006cae:	e7d3      	b.n	8006c58 <_Z9SnakeMove14EMoveDirection+0x34>
		}
	}

	snake.push_back(head);
 8006cb0:	f107 031c 	add.w	r3, r7, #28
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4811      	ldr	r0, [pc, #68]	; (8006cfc <_Z9SnakeMove14EMoveDirection+0xd8>)
 8006cb8:	f000 f9be 	bl	8007038 <_ZNSt7__cxx114listI6SPointSaIS1_EE9push_backERKS1_>

	if (head != gAple)
 8006cbc:	f107 031c 	add.w	r3, r7, #28
 8006cc0:	490f      	ldr	r1, [pc, #60]	; (8006d00 <_Z9SnakeMove14EMoveDirection+0xdc>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ff25 	bl	8006b12 <_ZN6SPointneERKS_>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <_Z9SnakeMove14EMoveDirection+0xb4>
	{
		snake.pop_front();
 8006cce:	480b      	ldr	r0, [pc, #44]	; (8006cfc <_Z9SnakeMove14EMoveDirection+0xd8>)
 8006cd0:	f000 f9c4 	bl	800705c <_ZNSt7__cxx114listI6SPointSaIS1_EE9pop_frontEv>
		return false;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e00d      	b.n	8006cf4 <_Z9SnakeMove14EMoveDirection+0xd0>
	}
	else if (snake.size() == kMaxSnakeSize)
 8006cd8:	4808      	ldr	r0, [pc, #32]	; (8006cfc <_Z9SnakeMove14EMoveDirection+0xd8>)
 8006cda:	f000 f9cf 	bl	800707c <_ZNKSt7__cxx114listI6SPointSaIS1_EE4sizeEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <_Z9SnakeMove14EMoveDirection+0xce>
	{
		SnakeReset();
 8006cee:	f7ff ff81 	bl	8006bf4 <_Z10SnakeResetv>
	}

	return true;
 8006cf2:	2301      	movs	r3, #1
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3728      	adds	r7, #40	; 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20004be0 	.word	0x20004be0
 8006d00:	20004bec 	.word	0x20004bec

08006d04 <_Z17SnakeGenerateAplem>:

void SnakeGenerateAple(uint32_t rnd)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	uint32_t idx = rnd % (32 - snake.size());
 8006d0c:	4837      	ldr	r0, [pc, #220]	; (8006dec <_Z17SnakeGenerateAplem+0xe8>)
 8006d0e:	f000 f9b5 	bl	800707c <_ZNKSt7__cxx114listI6SPointSaIS1_EE4sizeEv>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f1c3 0220 	rsb	r2, r3, #32
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d1e:	fb01 f202 	mul.w	r2, r1, r2
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	623b      	str	r3, [r7, #32]

	gAple.x = 0;
 8006d26:	4b32      	ldr	r3, [pc, #200]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
	gAple.y = 0;
 8006d2c:	4b30      	ldr	r3, [pc, #192]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	605a      	str	r2, [r3, #4]

	uint8_t i = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	while (i < idx)
 8006d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d950      	bls.n	8006de4 <_Z17SnakeGenerateAplem+0xe0>
	{
		if (gAple.x < kMaxPoint.x)
 8006d42:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	220f      	movs	r2, #15
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d205      	bcs.n	8006d58 <_Z17SnakeGenerateAplem+0x54>
		{
			++gAple.x;
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a27      	ldr	r2, [pc, #156]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e007      	b.n	8006d68 <_Z17SnakeGenerateAplem+0x64>
		}
		else
		{
			gAple.x = 0;
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
			++gAple.y;
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a22      	ldr	r2, [pc, #136]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006d66:	6053      	str	r3, [r2, #4]
		}

		++i;
 8006d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (SPoint point : snake)
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <_Z17SnakeGenerateAplem+0xe8>)
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	69f8      	ldr	r0, [r7, #28]
 8006d78:	f000 f90b 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	69f8      	ldr	r0, [r7, #28]
 8006d82:	f000 f917 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8006d86:	4603      	mov	r3, r0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	f107 020c 	add.w	r2, r7, #12
 8006d8e:	f107 0310 	add.w	r3, r7, #16
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f91d 	bl	8006fd4 <_ZStneRKSt14_List_iteratorI6SPointES3_>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0cb      	beq.n	8006d38 <_Z17SnakeGenerateAplem+0x34>
 8006da0:	f107 0310 	add.w	r3, r7, #16
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 f939 	bl	800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>
 8006daa:	4602      	mov	r2, r0
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006db4:	e883 0003 	stmia.w	r3, {r0, r1}
		{
			if (point == gAple)
 8006db8:	f107 0314 	add.w	r3, r7, #20
 8006dbc:	490c      	ldr	r1, [pc, #48]	; (8006df0 <_Z17SnakeGenerateAplem+0xec>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fe8d 	bl	8006ade <_ZN6SPointeqERKS_>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <_Z17SnakeGenerateAplem+0xd2>
			{
				--i;
 8006dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8006dd4:	e005      	b.n	8006de2 <_Z17SnakeGenerateAplem+0xde>
		for (SPoint point : snake)
 8006dd6:	f107 0310 	add.w	r3, r7, #16
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f90e 	bl	8006ffc <_ZNSt14_List_iteratorI6SPointEppEv>
 8006de0:	e7d3      	b.n	8006d8a <_Z17SnakeGenerateAplem+0x86>
	while (i < idx)
 8006de2:	e7a9      	b.n	8006d38 <_Z17SnakeGenerateAplem+0x34>
			}
		}
	}
}
 8006de4:	bf00      	nop
 8006de6:	3728      	adds	r7, #40	; 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20004be0 	.word	0x20004be0
 8006df0:	20004bec 	.word	0x20004bec

08006df4 <_Z9DrawSnakeSt8functionIFvR6SPointEE>:

void DrawSnake(std::function<void(SPoint&)> draw)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	for (SPoint point : snake)
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <_Z9DrawSnakeSt8functionIFvR6SPointEE+0x70>)
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	69f8      	ldr	r0, [r7, #28]
 8006e02:	f000 f8c6 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 8006e06:	4603      	mov	r3, r0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	69f8      	ldr	r0, [r7, #28]
 8006e0c:	f000 f8d2 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8006e10:	4603      	mov	r3, r0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	f107 020c 	add.w	r2, r7, #12
 8006e18:	f107 0310 	add.w	r3, r7, #16
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f8d8 	bl	8006fd4 <_ZStneRKSt14_List_iteratorI6SPointES3_>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d017      	beq.n	8006e5a <_Z9DrawSnakeSt8functionIFvR6SPointEE+0x66>
 8006e2a:	f107 0310 	add.w	r3, r7, #16
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f8f4 	bl	800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>
 8006e34:	4602      	mov	r2, r0
 8006e36:	f107 0314 	add.w	r3, r7, #20
 8006e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e3e:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		draw(point);
 8006e42:	f107 0314 	add.w	r3, r7, #20
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f923 	bl	8007094 <_ZNKSt8functionIFvR6SPointEEclES1_>
	for (SPoint point : snake)
 8006e4e:	f107 0310 	add.w	r3, r7, #16
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 f8d2 	bl	8006ffc <_ZNSt14_List_iteratorI6SPointEppEv>
 8006e58:	e7dc      	b.n	8006e14 <_Z9DrawSnakeSt8functionIFvR6SPointEE+0x20>
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20004be0 	.word	0x20004be0

08006e68 <_ZNSaI6SPointEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f92b 	bl	80070cc <_ZN9__gnu_cxx13new_allocatorI6SPointEC1Ev>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <_ZNSaI6SPointED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f92a 	bl	80070e2 <_ZN9__gnu_cxx13new_allocatorI6SPointED1Ev>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZNSt7__cxx114listI6SPointSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      list(initializer_list<value_type> __l,
 8006e98:	b5b0      	push	{r4, r5, r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	1d38      	adds	r0, r7, #4
 8006ea2:	e880 0006 	stmia.w	r0, {r1, r2}
 8006ea6:	603b      	str	r3, [r7, #0]
      : _Base(_Node_alloc_type(__a))
 8006ea8:	68fc      	ldr	r4, [r7, #12]
 8006eaa:	f107 0314 	add.w	r3, r7, #20
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 f921 	bl	80070f8 <_ZNSaISt10_List_nodeI6SPointEEC1IS0_EERKSaIT_E>
 8006eb6:	f107 0314 	add.w	r3, r7, #20
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f934 	bl	800712a <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EEC1EOSaISt10_List_nodeIS1_EE>
 8006ec2:	f107 0314 	add.w	r3, r7, #20
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f923 	bl	8007112 <_ZNSaISt10_List_nodeI6SPointEED1Ev>
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f93e 	bl	8007150 <_ZNKSt16initializer_listI6SPointE5beginEv>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f945 	bl	8007168 <_ZNKSt16initializer_listI6SPointE3endEv>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f951 	bl	800718c <_ZNSt7__cxx114listI6SPointSaIS1_EE22_M_initialize_dispatchIPKS1_EEvT_S7_St12__false_type>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bdb0      	pop	{r4, r5, r7, pc}

08006ef4 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE10_List_implD1Ev>:
      struct _List_impl
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f908 	bl	8007112 <_ZNSaISt10_List_nodeI6SPointEED1Ev>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f950 	bl	80071ba <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE8_M_clearEv>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff ffe9 	bl	8006ef4 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE10_List_implD1Ev>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_ZNSt7__cxx114listI6SPointSaIS1_EEaSESt16initializer_listIS1_E>:
       *
       *  Replace the contents of the %list with copies of the elements
       *  in the initializer_list @a __l.  This is linear in l.size().
       */
      list&
      operator=(initializer_list<value_type> __l)
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	1d3b      	adds	r3, r7, #4
 8006f36:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->assign(__l.begin(), __l.end());
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 f907 	bl	8007150 <_ZNKSt16initializer_listI6SPointE5beginEv>
 8006f42:	4604      	mov	r4, r0
 8006f44:	1d3b      	adds	r3, r7, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f90e 	bl	8007168 <_ZNKSt16initializer_listI6SPointE3endEv>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4621      	mov	r1, r4
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f956 	bl	8007204 <_ZNSt7__cxx114listI6SPointSaIS1_EE6assignIPKS1_vEEvT_S7_>
	return *this;
 8006f58:	68fb      	ldr	r3, [r7, #12]
      }
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd90      	pop	{r4, r7, pc}

08006f62 <_ZNSt7__cxx114listI6SPointSaIS1_EE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last element
       *  of the %list.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
      {
	iterator __tmp = end();
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f822 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8006f70:	4603      	mov	r3, r0
 8006f72:	60fb      	str	r3, [r7, #12]
	--__tmp;
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f952 	bl	8007222 <_ZNSt14_List_iteratorI6SPointEmmEv>
	return *__tmp;
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f84a 	bl	800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>
 8006f88:	4603      	mov	r3, r0
      }
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	f107 030c 	add.w	r3, r7, #12
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f94c 	bl	8007242 <_ZNSt14_List_iteratorI6SPointEC1EPNSt8__detail15_List_node_baseE>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	f107 030c 	add.w	r3, r7, #12
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 f93c 	bl	8007242 <_ZNSt14_List_iteratorI6SPointEC1EPNSt8__detail15_List_node_baseE>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZStneRKSt14_List_iteratorI6SPointES3_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	bf14      	ite	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	2300      	moveq	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <_ZNSt14_List_iteratorI6SPointEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
	return *this;
 800700e:	687b      	ldr	r3, [r7, #4]
      }
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f919 	bl	8007260 <_ZNSt10_List_nodeI6SPointE9_M_valptrEv>
 800702e:	4603      	mov	r3, r0
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <_ZNSt7__cxx114listI6SPointSaIS1_EE9push_backERKS1_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff ffb6 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8007048:	4603      	mov	r3, r0
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f914 	bl	800727c <_ZNSt7__cxx114listI6SPointSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZNSt7__cxx114listI6SPointSaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff ff94 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 800706a:	4603      	mov	r3, r0
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f922 	bl	80072b8 <_ZNSt7__cxx114listI6SPointSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <_ZNKSt7__cxx114listI6SPointSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f93d 	bl	8007304 <_ZNKSt7__cxx114listI6SPointSaIS1_EE13_M_node_countEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <_ZNKSt8functionIFvR6SPointEEclES1_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007094:	b5b0      	push	{r4, r5, r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fd0b 	bl	8006abc <_ZNKSt14_Function_base8_M_emptyEv>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <_ZNKSt8functionIFvR6SPointEEclES1_+0x1c>
	__throw_bad_function_call();
 80070ac:	f000 fdd2 	bl	8007c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68dc      	ldr	r4, [r3, #12]
 80070b4:	687d      	ldr	r5, [r7, #4]
 80070b6:	6838      	ldr	r0, [r7, #0]
 80070b8:	f7fa fac8 	bl	800164c <_ZSt7forwardIR6SPointEOT_RNSt16remove_referenceIS2_E4typeE>
 80070bc:	4603      	mov	r3, r0
 80070be:	4619      	mov	r1, r3
 80070c0:	4628      	mov	r0, r5
 80070c2:	47a0      	blx	r4
 80070c4:	bf00      	nop
    }
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bdb0      	pop	{r4, r5, r7, pc}

080070cc <_ZN9__gnu_cxx13new_allocatorI6SPointEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <_ZN9__gnu_cxx13new_allocatorI6SPointED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <_ZNSaISt10_List_nodeI6SPointEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f90b 	bl	800731e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEEC1Ev>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <_ZNSaISt10_List_nodeI6SPointEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f90a 	bl	8007334 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEED1Ev>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EEC1EOSaISt10_List_nodeIS1_EE>:
      _List_base(_Node_alloc_type&& __a)
 800712a:	b590      	push	{r4, r7, lr}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a))
 8007134:	687c      	ldr	r4, [r7, #4]
 8007136:	6838      	ldr	r0, [r7, #0]
 8007138:	f000 f907 	bl	800734a <_ZSt4moveIRSaISt10_List_nodeI6SPointEEEONSt16remove_referenceIT_E4typeEOS6_>
 800713c:	4603      	mov	r3, r0
 800713e:	4619      	mov	r1, r3
 8007140:	4620      	mov	r0, r4
 8007142:	f000 f90d 	bl	8007360 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE10_List_implC1EOSaISt10_List_nodeIS1_EE>
      { }
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}

08007150 <_ZNKSt16initializer_listI6SPointE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <_ZNKSt16initializer_listI6SPointE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ffed 	bl	8007150 <_ZNKSt16initializer_listI6SPointE5beginEv>
 8007176:	4604      	mov	r4, r0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f907 	bl	800738c <_ZNKSt16initializer_listI6SPointE4sizeEv>
 800717e:	4603      	mov	r3, r0
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4423      	add	r3, r4
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}

0800718c <_ZNSt7__cxx114listI6SPointSaIS1_EE22_M_initialize_dispatchIPKS1_EEvT_S7_St12__false_type>:
	{ _M_fill_initialize(static_cast<size_type>(__n), __x); }

      // Called by the range constructor to implement [23.1.1]/9
      template<typename _InputIterator>
	void
	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	703b      	strb	r3, [r7, #0]
			       __false_type)
	{
	  for (; __first != __last; ++__first)
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d007      	beq.n	80071b2 <_ZNSt7__cxx114listI6SPointSaIS1_EE22_M_initialize_dispatchIPKS1_EEvT_S7_St12__false_type+0x26>
#if __cplusplus >= 201103L
	    emplace_back(*__first);
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f8fd 	bl	80073a4 <_ZNSt7__cxx114listI6SPointSaIS1_EE12emplace_backIJRKS1_EEEvDpOT_>
	  for (; __first != __last; ++__first)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3308      	adds	r3, #8
 80071ae:	60bb      	str	r3, [r7, #8]
 80071b0:	e7f3      	b.n	800719a <_ZNSt7__cxx114listI6SPointSaIS1_EE22_M_initialize_dispatchIPKS1_EEvT_S7_St12__false_type+0xe>
#else
	    push_back(*__first);
#endif
	}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d015      	beq.n	80071fc <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80071da:	6938      	ldr	r0, [r7, #16]
 80071dc:	f000 f840 	bl	8007260 <_ZNSt10_List_nodeI6SPointE9_M_valptrEv>
 80071e0:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8f4 	bl	80073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 80071e8:	4603      	mov	r3, r0
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f8fa 	bl	80073e6 <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE7destroyIS1_EEvRS3_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 80071f2:	6939      	ldr	r1, [r7, #16]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f903 	bl	8007400 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
      while (__cur != &_M_impl._M_node)
 80071fa:	e7e5      	b.n	80071c8 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE8_M_clearEv+0xe>
	}
    }
 80071fc:	bf00      	nop
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <_ZNSt7__cxx114listI6SPointSaIS1_EE6assignIPKS1_vEEvT_S7_>:
	assign(_InputIterator __first, _InputIterator __last)
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
	{ _M_assign_dispatch(__first, __last, __false_type()); }
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f902 	bl	800741e <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type>
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <_ZNSt14_List_iteratorI6SPointEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_prev;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]
	return *this;
 8007234:	687b      	ldr	r3, [r7, #4]
      }
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <_ZNSt14_List_iteratorI6SPointEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <_ZNSt10_List_nodeI6SPointE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3308      	adds	r3, #8
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f93b 	bl	80074e8 <_ZN9__gnu_cxx16__aligned_membufI6SPointE6_M_ptrEv>
 8007272:	4603      	mov	r3, r0
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <_ZNSt7__cxx114listI6SPointSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f939 	bl	8007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>
 800728e:	4603      	mov	r3, r0
 8007290:	4619      	mov	r1, r3
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f93f 	bl	8007516 <_ZNSt7__cxx114listI6SPointSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>
 8007298:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fcc8 	bl	8007c36 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2101      	movs	r1, #1
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f967 	bl	800757e <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_inc_sizeEj>
       }
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <_ZNSt7__cxx114listI6SPointSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80072b8:	b590      	push	{r4, r7, lr}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2101      	movs	r1, #1
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f96a 	bl	80075a0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fcb8 	bl	8007c44 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f878 	bl	80073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 80072e0:	4604      	mov	r4, r0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff ffbc 	bl	8007260 <_ZNSt10_List_nodeI6SPointE9_M_valptrEv>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4619      	mov	r1, r3
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 f87a 	bl	80073e6 <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE7destroyIS1_EEvRS3_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f882 	bl	8007400 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
      }
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}

08007304 <_ZNKSt7__cxx114listI6SPointSaIS1_EE13_M_node_countEv>:
      _M_node_count() const
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f957 	bl	80075c2 <_ZNKSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_get_sizeEv>
 8007314:	4603      	mov	r3, r0
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <_ZSt4moveIRSaISt10_List_nodeI6SPointEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE10_List_implC1EOSaISt10_List_nodeIS1_EE>:
	_List_impl(_Node_alloc_type&& __a) noexcept
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a))
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	f7ff ffed 	bl	800734a <_ZSt4moveIRSaISt10_List_nodeI6SPointEEEONSt16remove_referenceIT_E4typeEOS6_>
 8007370:	4603      	mov	r3, r0
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f930 	bl	80075da <_ZNSaISt10_List_nodeI6SPointEEC1ERKS2_>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fb7d 	bl	8006a7c <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <_ZNKSt16initializer_listI6SPointE4sizeEv>:
      size() const noexcept { return _M_len; }
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <_ZNSt7__cxx114listI6SPointSaIS1_EE12emplace_backIJRKS1_EEEvDpOT_>:
	emplace_back(_Args&&... __args)
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	  this->_M_insert(end(), std::forward<_Args>(__args)...);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff fe00 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 80073b4:	4604      	mov	r4, r0
 80073b6:	6838      	ldr	r0, [r7, #0]
 80073b8:	f000 f8a2 	bl	8007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	4621      	mov	r1, r4
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff ff5a 	bl	800727c <_ZNSt7__cxx114listI6SPointSaIS1_EE9_M_insertIJRKS1_EEEvSt14_List_iteratorIS1_EDpOT_>
	}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE7destroyIS1_EEvRS3_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8ff 	bl	80075f6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 f8fb 	bl	800760c <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE10deallocateERS3_PS2_j>
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type>:
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
 800741e:	b580      	push	{r7, lr}
 8007420:	b08a      	sub	sp, #40	; 0x28
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	703b      	strb	r3, [r7, #0]
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
			 __false_type)
      {
        iterator __first1 = begin();
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff fdb0 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 8007432:	4603      	mov	r3, r0
 8007434:	61bb      	str	r3, [r7, #24]
        iterator __last1 = end();
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fdbc 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 800743c:	4603      	mov	r3, r0
 800743e:	617b      	str	r3, [r7, #20]
        for (; __first1 != __last1 && __first2 != __last2;
 8007440:	f107 0214 	add.w	r2, r7, #20
 8007444:	f107 0318 	add.w	r3, r7, #24
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fdc2 	bl	8006fd4 <_ZStneRKSt14_List_iteratorI6SPointES3_>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0x44>
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d001      	beq.n	8007462 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0x44>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0x46>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0x72>
	     ++__first1, (void)++__first2)
          *__first1 = *__first2;
 8007468:	f107 0318 	add.w	r3, r7, #24
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fdd5 	bl	800701c <_ZNKSt14_List_iteratorI6SPointEdeEv>
 8007472:	4603      	mov	r3, r0
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800747a:	e883 0003 	stmia.w	r3, {r0, r1}
	     ++__first1, (void)++__first2)
 800747e:	f107 0318 	add.w	r3, r7, #24
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fdba 	bl	8006ffc <_ZNSt14_List_iteratorI6SPointEppEv>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	3308      	adds	r3, #8
 800748c:	60bb      	str	r3, [r7, #8]
        for (; __first1 != __last1 && __first2 != __last2;
 800748e:	e7d7      	b.n	8007440 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0x22>
        if (__first2 == __last2)
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d115      	bne.n	80074c4 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0xa6>
          erase(__first1, __last1);
 8007498:	f107 0218 	add.w	r2, r7, #24
 800749c:	f107 031c 	add.w	r3, r7, #28
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f8c1 	bl	800762a <_ZNSt20_List_const_iteratorI6SPointEC1ERKSt14_List_iteratorIS0_E>
 80074a8:	f107 0214 	add.w	r2, r7, #20
 80074ac:	f107 0320 	add.w	r3, r7, #32
 80074b0:	4611      	mov	r1, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f8b9 	bl	800762a <_ZNSt20_List_const_iteratorI6SPointEC1ERKSt14_List_iteratorIS0_E>
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	69f9      	ldr	r1, [r7, #28]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f8c4 	bl	800764a <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_ES5_>
        else
          insert(__last1, __first2, __last2);
      }
 80074c2:	e00d      	b.n	80074e0 <_ZNSt7__cxx114listI6SPointSaIS1_EE18_M_assign_dispatchIPKS1_EEvT_S7_St12__false_type+0xc2>
          insert(__last1, __first2, __last2);
 80074c4:	f107 0214 	add.w	r2, r7, #20
 80074c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f8ab 	bl	800762a <_ZNSt20_List_const_iteratorI6SPointEC1ERKSt14_List_iteratorIS0_E>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f8df 	bl	800769e <_ZNSt7__cxx114listI6SPointSaIS1_EE6insertIPKS1_vEESt14_List_iteratorIS1_ESt20_List_const_iteratorIS1_ET_SB_>
      }
 80074e0:	bf00      	nop
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <_ZN9__gnu_cxx16__aligned_membufI6SPointE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f91a 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufI6SPointE7_M_addrEv>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <_ZNSt7__cxx114listI6SPointSaIS1_EE14_M_create_nodeIJRKS1_EEEPSt10_List_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8007516:	b590      	push	{r4, r7, lr}
 8007518:	b087      	sub	sp, #28
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f90c 	bl	8007740 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_get_nodeEv>
 8007528:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff ff4f 	bl	80073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 8007532:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	6939      	ldr	r1, [r7, #16]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f90d 	bl	800775c <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEEC1ERS3_PS2_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f7ff fe8c 	bl	8007260 <_ZNSt10_List_nodeI6SPointE9_M_valptrEv>
 8007548:	4604      	mov	r4, r0
 800754a:	6838      	ldr	r0, [r7, #0]
 800754c:	f7ff ffd8 	bl	8007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	4621      	mov	r1, r4
 8007556:	6938      	ldr	r0, [r7, #16]
 8007558:	f000 f929 	bl	80077ae <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>
	  __guard = nullptr;
 800755c:	f107 0308 	add.w	r3, r7, #8
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f936 	bl	80077d4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEEaSEDn>
	  return __p;
 8007568:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f908 	bl	8007784 <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEED1Ev>
	  return __p;
 8007574:	4623      	mov	r3, r4
	}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}

0800757e <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	441a      	add	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	1ad2      	subs	r2, r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <_ZNKSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <_ZNSaISt10_List_nodeI6SPointEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f903 	bl	80077f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEEC1ERKS4_>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f8f4 	bl	800780a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE10deallocateEPS3_j>
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <_ZNSt20_List_const_iteratorI6SPointEC1ERKSt14_List_iteratorIS0_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_ES5_>:
      erase(const_iterator __first, const_iterator __last) noexcept
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
	while (__first != __last)
 8007656:	1d3a      	adds	r2, r7, #4
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f8e3 	bl	800782a <_ZStneRKSt20_List_const_iteratorI6SPointES3_>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d010      	beq.n	800768c <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_ES5_+0x42>
	  __first = erase(__first);
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f8f0 	bl	8007852 <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_E>
 8007672:	4603      	mov	r3, r0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	f107 0214 	add.w	r2, r7, #20
 800767a:	f107 0310 	add.w	r3, r7, #16
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ffd2 	bl	800762a <_ZNSt20_List_const_iteratorI6SPointEC1ERKSt14_List_iteratorIS0_E>
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	60bb      	str	r3, [r7, #8]
	while (__first != __last)
 800768a:	e7e4      	b.n	8007656 <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_ES5_+0xc>
	return __last._M_const_cast();
 800768c:	1d3b      	adds	r3, r7, #4
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f8fa 	bl	8007888 <_ZNKSt20_List_const_iteratorI6SPointE13_M_const_castEv>
 8007694:	4603      	mov	r3, r0
      }
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <_ZNSt7__cxx114listI6SPointSaIS1_EE6insertIPKS1_vEESt14_List_iteratorIS1_ESt20_List_const_iteratorIS1_ET_SB_>:
      list<_Tp, _Alloc>::
 800769e:	b590      	push	{r4, r7, lr}
 80076a0:	b08b      	sub	sp, #44	; 0x2c
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
	list __tmp(__first, __last, get_allocator());
 80076ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f8f9 	bl	80078aa <_ZNKSt7__cxx114listI6SPointSaIS1_EE13get_allocatorEv>
 80076b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076bc:	f107 0018 	add.w	r0, r7, #24
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	f000 f903 	bl	80078ce <_ZNSt7__cxx114listI6SPointSaIS1_EEC1IPKS1_vEET_S7_RKS2_>
 80076c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fbd7 	bl	8006e80 <_ZNSaI6SPointED1Ev>
	if (!__tmp.empty())
 80076d2:	f107 0318 	add.w	r3, r7, #24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f91d 	bl	8007916 <_ZNKSt7__cxx114listI6SPointSaIS1_EE5emptyEv>
 80076dc:	4603      	mov	r3, r0
 80076de:	f083 0301 	eor.w	r3, r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00f      	beq.n	8007708 <_ZNSt7__cxx114listI6SPointSaIS1_EE6insertIPKS1_vEESt14_List_iteratorIS1_ESt20_List_const_iteratorIS1_ET_SB_+0x6a>
	    iterator __it = __tmp.begin();
 80076e8:	f107 0318 	add.w	r3, r7, #24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fc50 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 80076f2:	4603      	mov	r3, r0
 80076f4:	617b      	str	r3, [r7, #20]
	    splice(__position, __tmp);
 80076f6:	f107 0318 	add.w	r3, r7, #24
 80076fa:	461a      	mov	r2, r3
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f91b 	bl	800793a <_ZNSt7__cxx114listI6SPointSaIS1_EE6spliceESt20_List_const_iteratorIS1_ERS3_>
	    return __it;
 8007704:	697c      	ldr	r4, [r7, #20]
 8007706:	e006      	b.n	8007716 <_ZNSt7__cxx114listI6SPointSaIS1_EE6insertIPKS1_vEESt14_List_iteratorIS1_ESt20_List_const_iteratorIS1_ET_SB_+0x78>
	return __position._M_const_cast();
 8007708:	f107 0308 	add.w	r3, r7, #8
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f8bb 	bl	8007888 <_ZNKSt20_List_const_iteratorI6SPointE13_M_const_castEv>
 8007712:	4604      	mov	r4, r0
 8007714:	bf00      	nop
	list __tmp(__first, __last, get_allocator());
 8007716:	f107 0318 	add.w	r3, r7, #24
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fa13 	bl	8006b46 <_ZNSt7__cxx114listI6SPointSaIS1_EED1Ev>
      }
 8007720:	4623      	mov	r3, r4
 8007722:	4618      	mov	r0, r3
 8007724:	372c      	adds	r7, #44	; 0x2c
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufI6SPointE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2101      	movs	r1, #1
 800774c:	4618      	mov	r0, r3
 800774e:	f000 f907 	bl	8007960 <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE8allocateERS3_j>
 8007752:	4603      	mov	r3, r0
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEEC1ERS3_PS2_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8007768:	68b8      	ldr	r0, [r7, #8]
 800776a:	f000 f908 	bl	800797e <_ZSt11__addressofISaISt10_List_nodeI6SPointEEEPT_RS4_>
 800776e:	4602      	mov	r2, r0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
      { }
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	4619      	mov	r1, r3
 80077a0:	f7ff ff34 	bl	800760c <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE10deallocateERS3_PS2_j>
      }
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE9constructIS1_JRKS1_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fea0 	bl	8007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f8e4 	bl	8007994 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <_ZNSt15__allocated_ptrISaISt10_List_nodeI6SPointEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]
	return *this;
 80077e4:	687b      	ldr	r3, [r7, #4]
      }
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	68b8      	ldr	r0, [r7, #8]
 800781e:	f000 f9e9 	bl	8007bf4 <_ZdlPvj>
      }
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZStneRKSt20_List_const_iteratorI6SPointES3_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <_ZNSt7__cxx114listI6SPointSaIS1_EE5eraseESt20_List_const_iteratorIS1_E>:
    list<_Tp, _Alloc>::
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
      iterator __ret = iterator(__position._M_node->_M_next);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fceb 	bl	8007242 <_ZNSt14_List_iteratorI6SPointEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 800786c:	463b      	mov	r3, r7
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f80a 	bl	8007888 <_ZNKSt20_List_const_iteratorI6SPointE13_M_const_castEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fd1d 	bl	80072b8 <_ZNSt7__cxx114listI6SPointSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>
      return __ret;
 800787e:	68fb      	ldr	r3, [r7, #12]
    }
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <_ZNKSt20_List_const_iteratorI6SPointE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fcd1 	bl	8007242 <_ZNSt14_List_iteratorI6SPointEC1EPNSt8__detail15_List_node_baseE>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <_ZNKSt7__cxx114listI6SPointSaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
      { return allocator_type(_Base::_M_get_Node_allocator()); }
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f885 	bl	80079c6 <_ZNKSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 80078bc:	4603      	mov	r3, r0
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f88b 	bl	80079dc <_ZNSaI6SPointEC1ISt10_List_nodeIS_EEERKSaIT_E>
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <_ZNSt7__cxx114listI6SPointSaIS1_EEC1IPKS1_vEET_S7_RKS2_>:
	list(_InputIterator __first, _InputIterator __last,
 80078ce:	b5b0      	push	{r4, r5, r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	603b      	str	r3, [r7, #0]
	: _Base(_Node_alloc_type(__a))
 80078dc:	68fc      	ldr	r4, [r7, #12]
 80078de:	f107 0314 	add.w	r3, r7, #20
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fc07 	bl	80070f8 <_ZNSaISt10_List_nodeI6SPointEEC1IS0_EERKSaIT_E>
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	4619      	mov	r1, r3
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff fc1a 	bl	800712a <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EEC1EOSaISt10_List_nodeIS1_EE>
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fc09 	bl	8007112 <_ZNSaISt10_List_nodeI6SPointEED1Ev>
	{ _M_initialize_dispatch(__first, __last, __false_type()); }
 8007900:	462b      	mov	r3, r5
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fc40 	bl	800718c <_ZNSt7__cxx114listI6SPointSaIS1_EE22_M_initialize_dispatchIPKS1_EEvT_S7_St12__false_type>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bdb0      	pop	{r4, r5, r7, pc}

08007916 <_ZNKSt7__cxx114listI6SPointSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <_ZNSt7__cxx114listI6SPointSaIS1_EE6spliceESt20_List_const_iteratorIS1_ERS3_>:
      splice(const_iterator __position, list& __x) noexcept
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
      { splice(__position, std::move(__x)); }
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f855 	bl	80079f6 <_ZSt4moveIRNSt7__cxx114listI6SPointSaIS2_EEEEONSt16remove_referenceIT_E4typeEOS7_>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f85a 	bl	8007a0c <_ZNSt7__cxx114listI6SPointSaIS1_EE6spliceESt20_List_const_iteratorIS1_EOS3_>
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <_ZNSt16allocator_traitsISaISt10_List_nodeI6SPointEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800796a:	2200      	movs	r2, #0
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f885 	bl	8007a7e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE8allocateEjPKv>
 8007974:	4603      	mov	r3, r0
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZSt11__addressofISaISt10_List_nodeI6SPointEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fdad 	bl	8007500 <_ZSt7forwardIRK6SPointEOT_RNSt16remove_referenceIS3_E4typeE>
 80079a6:	4604      	mov	r4, r0
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4619      	mov	r1, r3
 80079ac:	2008      	movs	r0, #8
 80079ae:	f7f9 fa7d 	bl	8000eac <_ZnwjPv>
 80079b2:	4603      	mov	r3, r0
 80079b4:	4622      	mov	r2, r4
 80079b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}

080079c6 <_ZNKSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <_ZNSaI6SPointEC1ISt10_List_nodeIS_EEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fb70 	bl	80070cc <_ZN9__gnu_cxx13new_allocatorI6SPointEC1Ev>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <_ZSt4moveIRNSt7__cxx114listI6SPointSaIS2_EEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <_ZNSt7__cxx114listI6SPointSaIS1_EE6spliceESt20_List_const_iteratorIS1_EOS3_>:
      splice(const_iterator __position, list&& __x) noexcept
 8007a0c:	b5b0      	push	{r4, r5, r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
	if (!__x.empty())
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff ff7c 	bl	8007916 <_ZNKSt7__cxx114listI6SPointSaIS1_EE5emptyEv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f083 0301 	eor.w	r3, r3, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d025      	beq.n	8007a76 <_ZNSt7__cxx114listI6SPointSaIS1_EE6spliceESt20_List_const_iteratorIS1_EOS3_+0x6a>
	    _M_check_equal_allocators(__x);
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f844 	bl	8007aba <_ZNSt7__cxx114listI6SPointSaIS1_EE25_M_check_equal_allocatorsERS3_>
	    this->_M_transfer(__position._M_const_cast(),
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ff26 	bl	8007888 <_ZNKSt20_List_const_iteratorI6SPointE13_M_const_castEv>
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff faa7 	bl	8006f92 <_ZNSt7__cxx114listI6SPointSaIS1_EE5beginEv>
 8007a44:	4605      	mov	r5, r0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fab4 	bl	8006fb4 <_ZNSt7__cxx114listI6SPointSaIS1_EE3endEv>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	462a      	mov	r2, r5
 8007a50:	4621      	mov	r1, r4
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f84d 	bl	8007af2 <_ZNSt7__cxx114listI6SPointSaIS1_EE11_M_transferESt14_List_iteratorIS1_ES5_S5_>
	    this->_M_inc_size(__x._M_get_size());
 8007a58:	68fc      	ldr	r4, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fdb0 	bl	80075c2 <_ZNKSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_get_sizeEv>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4619      	mov	r1, r3
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff fd89 	bl	800757e <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_inc_sizeEj>
	    __x._M_set_size(0);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f84f 	bl	8007b14 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_set_sizeEj>
      }
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bdb0      	pop	{r4, r5, r7, pc}

08007a7e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f850 	bl	8007b30 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE11_M_max_sizeEv>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4293      	cmp	r3, r2
 8007a96:	bf8c      	ite	hi
 8007a98:	2301      	movhi	r3, #1
 8007a9a:	2300      	movls	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007aa2:	f000 f8d4 	bl	8007c4e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f8a4 	bl	8007bf8 <_Znwj>
 8007ab0:	4603      	mov	r3, r0
      }
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <_ZNSt7__cxx114listI6SPointSaIS1_EE25_M_check_equal_allocatorsERS3_>:

      // To implement the splice (and merge) bits of N1599.
      void
      _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT
 8007aba:	b590      	push	{r4, r7, lr}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
      {
	if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
	    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff fc82 	bl	80073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 8007acc:	4604      	mov	r4, r0
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fc7d 	bl	80073d0 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE21_M_get_Node_allocatorEv>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f834 	bl	8007b48 <_ZNSt11__alloc_neqISaISt10_List_nodeI6SPointEELb1EE8_S_do_itERKS3_S6_>
 8007ae0:	4603      	mov	r3, r0
	if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <_ZNSt7__cxx114listI6SPointSaIS1_EE25_M_check_equal_allocatorsERS3_+0x30>
	  __builtin_abort();
 8007ae6:	f000 f8c3 	bl	8007c70 <abort>
      }
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd90      	pop	{r4, r7, pc}

08007af2 <_ZNSt7__cxx114listI6SPointSaIS1_EE11_M_transferESt14_List_iteratorIS1_ES5_S5_>:
      _M_transfer(iterator __position, iterator __first, iterator __last)
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	603b      	str	r3, [r7, #0]
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f887 	bl	8007c1a <_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_>
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <_ZNSt7__cxx1110_List_baseI6SPointSaIS1_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	609a      	str	r2, [r3, #8]
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeI6SPointEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b38:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <_ZNSt11__alloc_neqISaISt10_List_nodeI6SPointEELb1EE8_S_do_itERKS3_S6_>:
  // Optimize for stateless allocators.
  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
      { return false; }
 8007b52:	2300      	movs	r3, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <_Z41__static_initialization_and_destruction_0ii>:
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d11f      	bne.n	8007bb0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d11a      	bne.n	8007bb0 <_Z41__static_initialization_and_destruction_0ii+0x50>
static std::list<SPoint> snake = {{0, 0}};
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	f107 0314 	add.w	r3, r7, #20
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	f107 031c 	add.w	r3, r7, #28
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f969 	bl	8006e68 <_ZNSaI6SPointEC1Ev>
 8007b96:	f107 031c 	add.w	r3, r7, #28
 8007b9a:	f107 020c 	add.w	r2, r7, #12
 8007b9e:	ca06      	ldmia	r2, {r1, r2}
 8007ba0:	480b      	ldr	r0, [pc, #44]	; (8007bd0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007ba2:	f7ff f979 	bl	8006e98 <_ZNSt7__cxx114listI6SPointSaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8007ba6:	f107 031c 	add.w	r3, r7, #28
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff f968 	bl	8006e80 <_ZNSaI6SPointED1Ev>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d107      	bne.n	8007bc6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d102      	bne.n	8007bc6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8007bc0:	4803      	ldr	r0, [pc, #12]	; (8007bd0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007bc2:	f7fe ffc0 	bl	8006b46 <_ZNSt7__cxx114listI6SPointSaIS1_EED1Ev>
}
 8007bc6:	bf00      	nop
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20004be0 	.word	0x20004be0

08007bd4 <_GLOBAL__sub_I_gAple>:
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bdc:	2001      	movs	r0, #1
 8007bde:	f7ff ffbf 	bl	8007b60 <_Z41__static_initialization_and_destruction_0ii>
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_GLOBAL__sub_D_gAple>:
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bec:	2000      	movs	r0, #0
 8007bee:	f7ff ffb7 	bl	8007b60 <_Z41__static_initialization_and_destruction_0ii>
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZdlPvj>:
 8007bf4:	f000 b831 	b.w	8007c5a <_ZdlPv>

08007bf8 <_Znwj>:
 8007bf8:	2801      	cmp	r0, #1
 8007bfa:	bf38      	it	cc
 8007bfc:	2001      	movcc	r0, #1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	4604      	mov	r4, r0
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f866 	bl	8007cd4 <malloc>
 8007c08:	b930      	cbnz	r0, 8007c18 <_Znwj+0x20>
 8007c0a:	f000 f829 	bl	8007c60 <_ZSt15get_new_handlerv>
 8007c0e:	b908      	cbnz	r0, 8007c14 <_Znwj+0x1c>
 8007c10:	f000 f82e 	bl	8007c70 <abort>
 8007c14:	4780      	blx	r0
 8007c16:	e7f4      	b.n	8007c02 <_Znwj+0xa>
 8007c18:	bd10      	pop	{r4, pc}

08007c1a <_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_>:
 8007c1a:	4290      	cmp	r0, r2
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	d009      	beq.n	8007c34 <_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_+0x1a>
 8007c20:	6854      	ldr	r4, [r2, #4]
 8007c22:	684b      	ldr	r3, [r1, #4]
 8007c24:	6020      	str	r0, [r4, #0]
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	6843      	ldr	r3, [r0, #4]
 8007c2a:	6019      	str	r1, [r3, #0]
 8007c2c:	6044      	str	r4, [r0, #4]
 8007c2e:	6848      	ldr	r0, [r1, #4]
 8007c30:	6050      	str	r0, [r2, #4]
 8007c32:	604b      	str	r3, [r1, #4]
 8007c34:	bd10      	pop	{r4, pc}

08007c36 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8007c36:	684b      	ldr	r3, [r1, #4]
 8007c38:	6043      	str	r3, [r0, #4]
 8007c3a:	684b      	ldr	r3, [r1, #4]
 8007c3c:	6001      	str	r1, [r0, #0]
 8007c3e:	6018      	str	r0, [r3, #0]
 8007c40:	6048      	str	r0, [r1, #4]
 8007c42:	4770      	bx	lr

08007c44 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8007c44:	e9d0 3200 	ldrd	r3, r2, [r0]
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	605a      	str	r2, [r3, #4]
 8007c4c:	4770      	bx	lr

08007c4e <_ZSt17__throw_bad_allocv>:
 8007c4e:	b508      	push	{r3, lr}
 8007c50:	f000 f80e 	bl	8007c70 <abort>

08007c54 <_ZSt25__throw_bad_function_callv>:
 8007c54:	b508      	push	{r3, lr}
 8007c56:	f000 f80b 	bl	8007c70 <abort>

08007c5a <_ZdlPv>:
 8007c5a:	f000 b843 	b.w	8007ce4 <free>
	...

08007c60 <_ZSt15get_new_handlerv>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <_ZSt15get_new_handlerv+0xc>)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	f3bf 8f5b 	dmb	ish
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20004bf4 	.word	0x20004bf4

08007c70 <abort>:
 8007c70:	b508      	push	{r3, lr}
 8007c72:	2006      	movs	r0, #6
 8007c74:	f000 fdd6 	bl	8008824 <raise>
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7f9 fe10 	bl	800189e <_exit>
	...

08007c80 <__errno>:
 8007c80:	4b01      	ldr	r3, [pc, #4]	; (8007c88 <__errno+0x8>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000030 	.word	0x20000030

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	; (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	; (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	; (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f002 fd36 	bl	800a710 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	0800ac5c 	.word	0x0800ac5c
 8007cc8:	0800ac5c 	.word	0x0800ac5c
 8007ccc:	0800ac5c 	.word	0x0800ac5c
 8007cd0:	0800ac64 	.word	0x0800ac64

08007cd4 <malloc>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <malloc+0xc>)
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f000 b88d 	b.w	8007df8 <_malloc_r>
 8007cde:	bf00      	nop
 8007ce0:	20000030 	.word	0x20000030

08007ce4 <free>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <free+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f000 b819 	b.w	8007d20 <_free_r>
 8007cee:	bf00      	nop
 8007cf0:	20000030 	.word	0x20000030

08007cf4 <memcpy>:
 8007cf4:	440a      	add	r2, r1
 8007cf6:	4291      	cmp	r1, r2
 8007cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cfc:	d100      	bne.n	8007d00 <memcpy+0xc>
 8007cfe:	4770      	bx	lr
 8007d00:	b510      	push	{r4, lr}
 8007d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	d1f9      	bne.n	8007d02 <memcpy+0xe>
 8007d0e:	bd10      	pop	{r4, pc}

08007d10 <memset>:
 8007d10:	4402      	add	r2, r0
 8007d12:	4603      	mov	r3, r0
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d100      	bne.n	8007d1a <memset+0xa>
 8007d18:	4770      	bx	lr
 8007d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1e:	e7f9      	b.n	8007d14 <memset+0x4>

08007d20 <_free_r>:
 8007d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d22:	2900      	cmp	r1, #0
 8007d24:	d044      	beq.n	8007db0 <_free_r+0x90>
 8007d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d2a:	9001      	str	r0, [sp, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d32:	bfb8      	it	lt
 8007d34:	18e4      	addlt	r4, r4, r3
 8007d36:	f001 fc11 	bl	800955c <__malloc_lock>
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <_free_r+0x94>)
 8007d3c:	9801      	ldr	r0, [sp, #4]
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	b933      	cbnz	r3, 8007d50 <_free_r+0x30>
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	6014      	str	r4, [r2, #0]
 8007d46:	b003      	add	sp, #12
 8007d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d4c:	f001 bc0c 	b.w	8009568 <__malloc_unlock>
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d908      	bls.n	8007d66 <_free_r+0x46>
 8007d54:	6825      	ldr	r5, [r4, #0]
 8007d56:	1961      	adds	r1, r4, r5
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf01      	itttt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	1949      	addeq	r1, r1, r5
 8007d62:	6021      	streq	r1, [r4, #0]
 8007d64:	e7ed      	b.n	8007d42 <_free_r+0x22>
 8007d66:	461a      	mov	r2, r3
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b10b      	cbz	r3, 8007d70 <_free_r+0x50>
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d9fa      	bls.n	8007d66 <_free_r+0x46>
 8007d70:	6811      	ldr	r1, [r2, #0]
 8007d72:	1855      	adds	r5, r2, r1
 8007d74:	42a5      	cmp	r5, r4
 8007d76:	d10b      	bne.n	8007d90 <_free_r+0x70>
 8007d78:	6824      	ldr	r4, [r4, #0]
 8007d7a:	4421      	add	r1, r4
 8007d7c:	1854      	adds	r4, r2, r1
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	6011      	str	r1, [r2, #0]
 8007d82:	d1e0      	bne.n	8007d46 <_free_r+0x26>
 8007d84:	681c      	ldr	r4, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	6053      	str	r3, [r2, #4]
 8007d8a:	4421      	add	r1, r4
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	e7da      	b.n	8007d46 <_free_r+0x26>
 8007d90:	d902      	bls.n	8007d98 <_free_r+0x78>
 8007d92:	230c      	movs	r3, #12
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	e7d6      	b.n	8007d46 <_free_r+0x26>
 8007d98:	6825      	ldr	r5, [r4, #0]
 8007d9a:	1961      	adds	r1, r4, r5
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf04      	itt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	bf04      	itt	eq
 8007da8:	1949      	addeq	r1, r1, r5
 8007daa:	6021      	streq	r1, [r4, #0]
 8007dac:	6054      	str	r4, [r2, #4]
 8007dae:	e7ca      	b.n	8007d46 <_free_r+0x26>
 8007db0:	b003      	add	sp, #12
 8007db2:	bd30      	pop	{r4, r5, pc}
 8007db4:	20004bf8 	.word	0x20004bf8

08007db8 <sbrk_aligned>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4e0e      	ldr	r6, [pc, #56]	; (8007df4 <sbrk_aligned+0x3c>)
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6831      	ldr	r1, [r6, #0]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	b911      	cbnz	r1, 8007dca <sbrk_aligned+0x12>
 8007dc4:	f000 fcf6 	bl	80087b4 <_sbrk_r>
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 fcf1 	bl	80087b4 <_sbrk_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d00a      	beq.n	8007dec <sbrk_aligned+0x34>
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d007      	beq.n	8007df0 <sbrk_aligned+0x38>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 fce6 	bl	80087b4 <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d101      	bne.n	8007df0 <sbrk_aligned+0x38>
 8007dec:	f04f 34ff 	mov.w	r4, #4294967295
 8007df0:	4620      	mov	r0, r4
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	20004bfc 	.word	0x20004bfc

08007df8 <_malloc_r>:
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	1ccd      	adds	r5, r1, #3
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	2d00      	cmp	r5, #0
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	db01      	blt.n	8007e14 <_malloc_r+0x1c>
 8007e10:	42a9      	cmp	r1, r5
 8007e12:	d905      	bls.n	8007e20 <_malloc_r+0x28>
 8007e14:	230c      	movs	r3, #12
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	2600      	movs	r6, #0
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e20:	4e2e      	ldr	r6, [pc, #184]	; (8007edc <_malloc_r+0xe4>)
 8007e22:	f001 fb9b 	bl	800955c <__malloc_lock>
 8007e26:	6833      	ldr	r3, [r6, #0]
 8007e28:	461c      	mov	r4, r3
 8007e2a:	bb34      	cbnz	r4, 8007e7a <_malloc_r+0x82>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff ffc2 	bl	8007db8 <sbrk_aligned>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	4604      	mov	r4, r0
 8007e38:	d14d      	bne.n	8007ed6 <_malloc_r+0xde>
 8007e3a:	6834      	ldr	r4, [r6, #0]
 8007e3c:	4626      	mov	r6, r4
 8007e3e:	2e00      	cmp	r6, #0
 8007e40:	d140      	bne.n	8007ec4 <_malloc_r+0xcc>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4631      	mov	r1, r6
 8007e46:	4638      	mov	r0, r7
 8007e48:	eb04 0803 	add.w	r8, r4, r3
 8007e4c:	f000 fcb2 	bl	80087b4 <_sbrk_r>
 8007e50:	4580      	cmp	r8, r0
 8007e52:	d13a      	bne.n	8007eca <_malloc_r+0xd2>
 8007e54:	6821      	ldr	r1, [r4, #0]
 8007e56:	3503      	adds	r5, #3
 8007e58:	1a6d      	subs	r5, r5, r1
 8007e5a:	f025 0503 	bic.w	r5, r5, #3
 8007e5e:	3508      	adds	r5, #8
 8007e60:	2d0c      	cmp	r5, #12
 8007e62:	bf38      	it	cc
 8007e64:	250c      	movcc	r5, #12
 8007e66:	4629      	mov	r1, r5
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff ffa5 	bl	8007db8 <sbrk_aligned>
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d02b      	beq.n	8007eca <_malloc_r+0xd2>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	442b      	add	r3, r5
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	e00e      	b.n	8007e98 <_malloc_r+0xa0>
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	1b52      	subs	r2, r2, r5
 8007e7e:	d41e      	bmi.n	8007ebe <_malloc_r+0xc6>
 8007e80:	2a0b      	cmp	r2, #11
 8007e82:	d916      	bls.n	8007eb2 <_malloc_r+0xba>
 8007e84:	1961      	adds	r1, r4, r5
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	6025      	str	r5, [r4, #0]
 8007e8a:	bf18      	it	ne
 8007e8c:	6059      	strne	r1, [r3, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	bf08      	it	eq
 8007e92:	6031      	streq	r1, [r6, #0]
 8007e94:	5162      	str	r2, [r4, r5]
 8007e96:	604b      	str	r3, [r1, #4]
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f104 060b 	add.w	r6, r4, #11
 8007e9e:	f001 fb63 	bl	8009568 <__malloc_unlock>
 8007ea2:	f026 0607 	bic.w	r6, r6, #7
 8007ea6:	1d23      	adds	r3, r4, #4
 8007ea8:	1af2      	subs	r2, r6, r3
 8007eaa:	d0b6      	beq.n	8007e1a <_malloc_r+0x22>
 8007eac:	1b9b      	subs	r3, r3, r6
 8007eae:	50a3      	str	r3, [r4, r2]
 8007eb0:	e7b3      	b.n	8007e1a <_malloc_r+0x22>
 8007eb2:	6862      	ldr	r2, [r4, #4]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	bf0c      	ite	eq
 8007eb8:	6032      	streq	r2, [r6, #0]
 8007eba:	605a      	strne	r2, [r3, #4]
 8007ebc:	e7ec      	b.n	8007e98 <_malloc_r+0xa0>
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	6864      	ldr	r4, [r4, #4]
 8007ec2:	e7b2      	b.n	8007e2a <_malloc_r+0x32>
 8007ec4:	4634      	mov	r4, r6
 8007ec6:	6876      	ldr	r6, [r6, #4]
 8007ec8:	e7b9      	b.n	8007e3e <_malloc_r+0x46>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f001 fb4a 	bl	8009568 <__malloc_unlock>
 8007ed4:	e7a1      	b.n	8007e1a <_malloc_r+0x22>
 8007ed6:	6025      	str	r5, [r4, #0]
 8007ed8:	e7de      	b.n	8007e98 <_malloc_r+0xa0>
 8007eda:	bf00      	nop
 8007edc:	20004bf8 	.word	0x20004bf8

08007ee0 <__cvt>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	ec55 4b10 	vmov	r4, r5, d0
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	460e      	mov	r6, r1
 8007eec:	4619      	mov	r1, r3
 8007eee:	462b      	mov	r3, r5
 8007ef0:	bfbb      	ittet	lt
 8007ef2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ef6:	461d      	movlt	r5, r3
 8007ef8:	2300      	movge	r3, #0
 8007efa:	232d      	movlt	r3, #45	; 0x2d
 8007efc:	700b      	strb	r3, [r1, #0]
 8007efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f04:	4691      	mov	r9, r2
 8007f06:	f023 0820 	bic.w	r8, r3, #32
 8007f0a:	bfbc      	itt	lt
 8007f0c:	4622      	movlt	r2, r4
 8007f0e:	4614      	movlt	r4, r2
 8007f10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f14:	d005      	beq.n	8007f22 <__cvt+0x42>
 8007f16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f1a:	d100      	bne.n	8007f1e <__cvt+0x3e>
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	2102      	movs	r1, #2
 8007f20:	e000      	b.n	8007f24 <__cvt+0x44>
 8007f22:	2103      	movs	r1, #3
 8007f24:	ab03      	add	r3, sp, #12
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	ab02      	add	r3, sp, #8
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	ec45 4b10 	vmov	d0, r4, r5
 8007f30:	4653      	mov	r3, sl
 8007f32:	4632      	mov	r2, r6
 8007f34:	f000 fd20 	bl	8008978 <_dtoa_r>
 8007f38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	d102      	bne.n	8007f46 <__cvt+0x66>
 8007f40:	f019 0f01 	tst.w	r9, #1
 8007f44:	d022      	beq.n	8007f8c <__cvt+0xac>
 8007f46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f4a:	eb07 0906 	add.w	r9, r7, r6
 8007f4e:	d110      	bne.n	8007f72 <__cvt+0x92>
 8007f50:	783b      	ldrb	r3, [r7, #0]
 8007f52:	2b30      	cmp	r3, #48	; 0x30
 8007f54:	d10a      	bne.n	8007f6c <__cvt+0x8c>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f62:	b918      	cbnz	r0, 8007f6c <__cvt+0x8c>
 8007f64:	f1c6 0601 	rsb	r6, r6, #1
 8007f68:	f8ca 6000 	str.w	r6, [sl]
 8007f6c:	f8da 3000 	ldr.w	r3, [sl]
 8007f70:	4499      	add	r9, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f7e:	b108      	cbz	r0, 8007f84 <__cvt+0xa4>
 8007f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f84:	2230      	movs	r2, #48	; 0x30
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	454b      	cmp	r3, r9
 8007f8a:	d307      	bcc.n	8007f9c <__cvt+0xbc>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f90:	1bdb      	subs	r3, r3, r7
 8007f92:	4638      	mov	r0, r7
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	b004      	add	sp, #16
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	1c59      	adds	r1, r3, #1
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e7f0      	b.n	8007f86 <__cvt+0xa6>

08007fa4 <__exponent>:
 8007fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	bfb8      	it	lt
 8007fac:	4249      	neglt	r1, r1
 8007fae:	f803 2b02 	strb.w	r2, [r3], #2
 8007fb2:	bfb4      	ite	lt
 8007fb4:	222d      	movlt	r2, #45	; 0x2d
 8007fb6:	222b      	movge	r2, #43	; 0x2b
 8007fb8:	2909      	cmp	r1, #9
 8007fba:	7042      	strb	r2, [r0, #1]
 8007fbc:	dd2a      	ble.n	8008014 <__exponent+0x70>
 8007fbe:	f10d 0407 	add.w	r4, sp, #7
 8007fc2:	46a4      	mov	ip, r4
 8007fc4:	270a      	movs	r7, #10
 8007fc6:	46a6      	mov	lr, r4
 8007fc8:	460a      	mov	r2, r1
 8007fca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fce:	fb07 1516 	mls	r5, r7, r6, r1
 8007fd2:	3530      	adds	r5, #48	; 0x30
 8007fd4:	2a63      	cmp	r2, #99	; 0x63
 8007fd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fde:	4631      	mov	r1, r6
 8007fe0:	dcf1      	bgt.n	8007fc6 <__exponent+0x22>
 8007fe2:	3130      	adds	r1, #48	; 0x30
 8007fe4:	f1ae 0502 	sub.w	r5, lr, #2
 8007fe8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fec:	1c44      	adds	r4, r0, #1
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4561      	cmp	r1, ip
 8007ff2:	d30a      	bcc.n	800800a <__exponent+0x66>
 8007ff4:	f10d 0209 	add.w	r2, sp, #9
 8007ff8:	eba2 020e 	sub.w	r2, r2, lr
 8007ffc:	4565      	cmp	r5, ip
 8007ffe:	bf88      	it	hi
 8008000:	2200      	movhi	r2, #0
 8008002:	4413      	add	r3, r2
 8008004:	1a18      	subs	r0, r3, r0
 8008006:	b003      	add	sp, #12
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008012:	e7ed      	b.n	8007ff0 <__exponent+0x4c>
 8008014:	2330      	movs	r3, #48	; 0x30
 8008016:	3130      	adds	r1, #48	; 0x30
 8008018:	7083      	strb	r3, [r0, #2]
 800801a:	70c1      	strb	r1, [r0, #3]
 800801c:	1d03      	adds	r3, r0, #4
 800801e:	e7f1      	b.n	8008004 <__exponent+0x60>

08008020 <_printf_float>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	ed2d 8b02 	vpush	{d8}
 8008028:	b08d      	sub	sp, #52	; 0x34
 800802a:	460c      	mov	r4, r1
 800802c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008030:	4616      	mov	r6, r2
 8008032:	461f      	mov	r7, r3
 8008034:	4605      	mov	r5, r0
 8008036:	f001 fa8d 	bl	8009554 <_localeconv_r>
 800803a:	f8d0 a000 	ldr.w	sl, [r0]
 800803e:	4650      	mov	r0, sl
 8008040:	f7f8 f8c6 	bl	80001d0 <strlen>
 8008044:	2300      	movs	r3, #0
 8008046:	930a      	str	r3, [sp, #40]	; 0x28
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	9305      	str	r3, [sp, #20]
 800804c:	f8d8 3000 	ldr.w	r3, [r8]
 8008050:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008054:	3307      	adds	r3, #7
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	f103 0208 	add.w	r2, r3, #8
 800805e:	f8c8 2000 	str.w	r2, [r8]
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800806a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800806e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	f8cd 8018 	str.w	r8, [sp, #24]
 8008078:	ee08 0a10 	vmov	s16, r0
 800807c:	4b9f      	ldr	r3, [pc, #636]	; (80082fc <_printf_float+0x2dc>)
 800807e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	f7f8 fd51 	bl	8000b2c <__aeabi_dcmpun>
 800808a:	bb88      	cbnz	r0, 80080f0 <_printf_float+0xd0>
 800808c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008090:	4b9a      	ldr	r3, [pc, #616]	; (80082fc <_printf_float+0x2dc>)
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	f7f8 fd2b 	bl	8000af0 <__aeabi_dcmple>
 800809a:	bb48      	cbnz	r0, 80080f0 <_printf_float+0xd0>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 fd1a 	bl	8000adc <__aeabi_dcmplt>
 80080a8:	b110      	cbz	r0, 80080b0 <_printf_float+0x90>
 80080aa:	232d      	movs	r3, #45	; 0x2d
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b0:	4b93      	ldr	r3, [pc, #588]	; (8008300 <_printf_float+0x2e0>)
 80080b2:	4894      	ldr	r0, [pc, #592]	; (8008304 <_printf_float+0x2e4>)
 80080b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080b8:	bf94      	ite	ls
 80080ba:	4698      	movls	r8, r3
 80080bc:	4680      	movhi	r8, r0
 80080be:	2303      	movs	r3, #3
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	f023 0204 	bic.w	r2, r3, #4
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	f04f 0900 	mov.w	r9, #0
 80080ce:	9700      	str	r7, [sp, #0]
 80080d0:	4633      	mov	r3, r6
 80080d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80080d4:	4621      	mov	r1, r4
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 f9d8 	bl	800848c <_printf_common>
 80080dc:	3001      	adds	r0, #1
 80080de:	f040 8090 	bne.w	8008202 <_printf_float+0x1e2>
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	b00d      	add	sp, #52	; 0x34
 80080e8:	ecbd 8b02 	vpop	{d8}
 80080ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 fd18 	bl	8000b2c <__aeabi_dcmpun>
 80080fc:	b140      	cbz	r0, 8008110 <_printf_float+0xf0>
 80080fe:	464b      	mov	r3, r9
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbc      	itt	lt
 8008104:	232d      	movlt	r3, #45	; 0x2d
 8008106:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800810a:	487f      	ldr	r0, [pc, #508]	; (8008308 <_printf_float+0x2e8>)
 800810c:	4b7f      	ldr	r3, [pc, #508]	; (800830c <_printf_float+0x2ec>)
 800810e:	e7d1      	b.n	80080b4 <_printf_float+0x94>
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008116:	9206      	str	r2, [sp, #24]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	d13f      	bne.n	800819c <_printf_float+0x17c>
 800811c:	2306      	movs	r3, #6
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	9b05      	ldr	r3, [sp, #20]
 8008122:	6861      	ldr	r1, [r4, #4]
 8008124:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008128:	2300      	movs	r3, #0
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	ab0a      	add	r3, sp, #40	; 0x28
 800812e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008132:	ab09      	add	r3, sp, #36	; 0x24
 8008134:	ec49 8b10 	vmov	d0, r8, r9
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff fecd 	bl	8007ee0 <__cvt>
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814a:	2b47      	cmp	r3, #71	; 0x47
 800814c:	4680      	mov	r8, r0
 800814e:	d108      	bne.n	8008162 <_printf_float+0x142>
 8008150:	1cc8      	adds	r0, r1, #3
 8008152:	db02      	blt.n	800815a <_printf_float+0x13a>
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	4299      	cmp	r1, r3
 8008158:	dd41      	ble.n	80081de <_printf_float+0x1be>
 800815a:	f1ab 0b02 	sub.w	fp, fp, #2
 800815e:	fa5f fb8b 	uxtb.w	fp, fp
 8008162:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008166:	d820      	bhi.n	80081aa <_printf_float+0x18a>
 8008168:	3901      	subs	r1, #1
 800816a:	465a      	mov	r2, fp
 800816c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008170:	9109      	str	r1, [sp, #36]	; 0x24
 8008172:	f7ff ff17 	bl	8007fa4 <__exponent>
 8008176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008178:	1813      	adds	r3, r2, r0
 800817a:	2a01      	cmp	r2, #1
 800817c:	4681      	mov	r9, r0
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	dc02      	bgt.n	8008188 <_printf_float+0x168>
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	07d2      	lsls	r2, r2, #31
 8008186:	d501      	bpl.n	800818c <_printf_float+0x16c>
 8008188:	3301      	adds	r3, #1
 800818a:	6123      	str	r3, [r4, #16]
 800818c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008190:	2b00      	cmp	r3, #0
 8008192:	d09c      	beq.n	80080ce <_printf_float+0xae>
 8008194:	232d      	movs	r3, #45	; 0x2d
 8008196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819a:	e798      	b.n	80080ce <_printf_float+0xae>
 800819c:	9a06      	ldr	r2, [sp, #24]
 800819e:	2a47      	cmp	r2, #71	; 0x47
 80081a0:	d1be      	bne.n	8008120 <_printf_float+0x100>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1bc      	bne.n	8008120 <_printf_float+0x100>
 80081a6:	2301      	movs	r3, #1
 80081a8:	e7b9      	b.n	800811e <_printf_float+0xfe>
 80081aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081ae:	d118      	bne.n	80081e2 <_printf_float+0x1c2>
 80081b0:	2900      	cmp	r1, #0
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	dd0b      	ble.n	80081ce <_printf_float+0x1ae>
 80081b6:	6121      	str	r1, [r4, #16]
 80081b8:	b913      	cbnz	r3, 80081c0 <_printf_float+0x1a0>
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	07d0      	lsls	r0, r2, #31
 80081be:	d502      	bpl.n	80081c6 <_printf_float+0x1a6>
 80081c0:	3301      	adds	r3, #1
 80081c2:	440b      	add	r3, r1
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	e7de      	b.n	800818c <_printf_float+0x16c>
 80081ce:	b913      	cbnz	r3, 80081d6 <_printf_float+0x1b6>
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	07d2      	lsls	r2, r2, #31
 80081d4:	d501      	bpl.n	80081da <_printf_float+0x1ba>
 80081d6:	3302      	adds	r3, #2
 80081d8:	e7f4      	b.n	80081c4 <_printf_float+0x1a4>
 80081da:	2301      	movs	r3, #1
 80081dc:	e7f2      	b.n	80081c4 <_printf_float+0x1a4>
 80081de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e4:	4299      	cmp	r1, r3
 80081e6:	db05      	blt.n	80081f4 <_printf_float+0x1d4>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	6121      	str	r1, [r4, #16]
 80081ec:	07d8      	lsls	r0, r3, #31
 80081ee:	d5ea      	bpl.n	80081c6 <_printf_float+0x1a6>
 80081f0:	1c4b      	adds	r3, r1, #1
 80081f2:	e7e7      	b.n	80081c4 <_printf_float+0x1a4>
 80081f4:	2900      	cmp	r1, #0
 80081f6:	bfd4      	ite	le
 80081f8:	f1c1 0202 	rsble	r2, r1, #2
 80081fc:	2201      	movgt	r2, #1
 80081fe:	4413      	add	r3, r2
 8008200:	e7e0      	b.n	80081c4 <_printf_float+0x1a4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	055a      	lsls	r2, r3, #21
 8008206:	d407      	bmi.n	8008218 <_printf_float+0x1f8>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	4642      	mov	r2, r8
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	d12c      	bne.n	8008270 <_printf_float+0x250>
 8008216:	e764      	b.n	80080e2 <_printf_float+0xc2>
 8008218:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800821c:	f240 80e0 	bls.w	80083e0 <_printf_float+0x3c0>
 8008220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008224:	2200      	movs	r2, #0
 8008226:	2300      	movs	r3, #0
 8008228:	f7f8 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800822c:	2800      	cmp	r0, #0
 800822e:	d034      	beq.n	800829a <_printf_float+0x27a>
 8008230:	4a37      	ldr	r2, [pc, #220]	; (8008310 <_printf_float+0x2f0>)
 8008232:	2301      	movs	r3, #1
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f af51 	beq.w	80080e2 <_printf_float+0xc2>
 8008240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008244:	429a      	cmp	r2, r3
 8008246:	db02      	blt.n	800824e <_printf_float+0x22e>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07d8      	lsls	r0, r3, #31
 800824c:	d510      	bpl.n	8008270 <_printf_float+0x250>
 800824e:	ee18 3a10 	vmov	r3, s16
 8008252:	4652      	mov	r2, sl
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f af41 	beq.w	80080e2 <_printf_float+0xc2>
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	f104 091a 	add.w	r9, r4, #26
 8008268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826a:	3b01      	subs	r3, #1
 800826c:	4543      	cmp	r3, r8
 800826e:	dc09      	bgt.n	8008284 <_printf_float+0x264>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	079b      	lsls	r3, r3, #30
 8008274:	f100 8105 	bmi.w	8008482 <_printf_float+0x462>
 8008278:	68e0      	ldr	r0, [r4, #12]
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	4298      	cmp	r0, r3
 800827e:	bfb8      	it	lt
 8008280:	4618      	movlt	r0, r3
 8008282:	e730      	b.n	80080e6 <_printf_float+0xc6>
 8008284:	2301      	movs	r3, #1
 8008286:	464a      	mov	r2, r9
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af27 	beq.w	80080e2 <_printf_float+0xc2>
 8008294:	f108 0801 	add.w	r8, r8, #1
 8008298:	e7e6      	b.n	8008268 <_printf_float+0x248>
 800829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc39      	bgt.n	8008314 <_printf_float+0x2f4>
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <_printf_float+0x2f0>)
 80082a2:	2301      	movs	r3, #1
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af19 	beq.w	80080e2 <_printf_float+0xc2>
 80082b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b4:	4313      	orrs	r3, r2
 80082b6:	d102      	bne.n	80082be <_printf_float+0x29e>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d5d8      	bpl.n	8008270 <_printf_float+0x250>
 80082be:	ee18 3a10 	vmov	r3, s16
 80082c2:	4652      	mov	r2, sl
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	f43f af09 	beq.w	80080e2 <_printf_float+0xc2>
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	f104 0a1a 	add.w	sl, r4, #26
 80082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082da:	425b      	negs	r3, r3
 80082dc:	454b      	cmp	r3, r9
 80082de:	dc01      	bgt.n	80082e4 <_printf_float+0x2c4>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	e792      	b.n	800820a <_printf_float+0x1ea>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4652      	mov	r2, sl
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f aef7 	beq.w	80080e2 <_printf_float+0xc2>
 80082f4:	f109 0901 	add.w	r9, r9, #1
 80082f8:	e7ee      	b.n	80082d8 <_printf_float+0x2b8>
 80082fa:	bf00      	nop
 80082fc:	7fefffff 	.word	0x7fefffff
 8008300:	0800a880 	.word	0x0800a880
 8008304:	0800a884 	.word	0x0800a884
 8008308:	0800a88c 	.word	0x0800a88c
 800830c:	0800a888 	.word	0x0800a888
 8008310:	0800a890 	.word	0x0800a890
 8008314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008318:	429a      	cmp	r2, r3
 800831a:	bfa8      	it	ge
 800831c:	461a      	movge	r2, r3
 800831e:	2a00      	cmp	r2, #0
 8008320:	4691      	mov	r9, r2
 8008322:	dc37      	bgt.n	8008394 <_printf_float+0x374>
 8008324:	f04f 0b00 	mov.w	fp, #0
 8008328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800832c:	f104 021a 	add.w	r2, r4, #26
 8008330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008332:	9305      	str	r3, [sp, #20]
 8008334:	eba3 0309 	sub.w	r3, r3, r9
 8008338:	455b      	cmp	r3, fp
 800833a:	dc33      	bgt.n	80083a4 <_printf_float+0x384>
 800833c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008340:	429a      	cmp	r2, r3
 8008342:	db3b      	blt.n	80083bc <_printf_float+0x39c>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d438      	bmi.n	80083bc <_printf_float+0x39c>
 800834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834c:	9a05      	ldr	r2, [sp, #20]
 800834e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008350:	1a9a      	subs	r2, r3, r2
 8008352:	eba3 0901 	sub.w	r9, r3, r1
 8008356:	4591      	cmp	r9, r2
 8008358:	bfa8      	it	ge
 800835a:	4691      	movge	r9, r2
 800835c:	f1b9 0f00 	cmp.w	r9, #0
 8008360:	dc35      	bgt.n	80083ce <_printf_float+0x3ae>
 8008362:	f04f 0800 	mov.w	r8, #0
 8008366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800836a:	f104 0a1a 	add.w	sl, r4, #26
 800836e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	eba3 0309 	sub.w	r3, r3, r9
 8008378:	4543      	cmp	r3, r8
 800837a:	f77f af79 	ble.w	8008270 <_printf_float+0x250>
 800837e:	2301      	movs	r3, #1
 8008380:	4652      	mov	r2, sl
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f aeaa 	beq.w	80080e2 <_printf_float+0xc2>
 800838e:	f108 0801 	add.w	r8, r8, #1
 8008392:	e7ec      	b.n	800836e <_printf_float+0x34e>
 8008394:	4613      	mov	r3, r2
 8008396:	4631      	mov	r1, r6
 8008398:	4642      	mov	r2, r8
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	d1c0      	bne.n	8008324 <_printf_float+0x304>
 80083a2:	e69e      	b.n	80080e2 <_printf_float+0xc2>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	9205      	str	r2, [sp, #20]
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f ae97 	beq.w	80080e2 <_printf_float+0xc2>
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	f10b 0b01 	add.w	fp, fp, #1
 80083ba:	e7b9      	b.n	8008330 <_printf_float+0x310>
 80083bc:	ee18 3a10 	vmov	r3, s16
 80083c0:	4652      	mov	r2, sl
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	d1be      	bne.n	800834a <_printf_float+0x32a>
 80083cc:	e689      	b.n	80080e2 <_printf_float+0xc2>
 80083ce:	9a05      	ldr	r2, [sp, #20]
 80083d0:	464b      	mov	r3, r9
 80083d2:	4442      	add	r2, r8
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	d1c1      	bne.n	8008362 <_printf_float+0x342>
 80083de:	e680      	b.n	80080e2 <_printf_float+0xc2>
 80083e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083e2:	2a01      	cmp	r2, #1
 80083e4:	dc01      	bgt.n	80083ea <_printf_float+0x3ca>
 80083e6:	07db      	lsls	r3, r3, #31
 80083e8:	d538      	bpl.n	800845c <_printf_float+0x43c>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4642      	mov	r2, r8
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f ae74 	beq.w	80080e2 <_printf_float+0xc2>
 80083fa:	ee18 3a10 	vmov	r3, s16
 80083fe:	4652      	mov	r2, sl
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	f43f ae6b 	beq.w	80080e2 <_printf_float+0xc2>
 800840c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	f7f8 fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008418:	b9d8      	cbnz	r0, 8008452 <_printf_float+0x432>
 800841a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841c:	f108 0201 	add.w	r2, r8, #1
 8008420:	3b01      	subs	r3, #1
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	d10e      	bne.n	800844a <_printf_float+0x42a>
 800842c:	e659      	b.n	80080e2 <_printf_float+0xc2>
 800842e:	2301      	movs	r3, #1
 8008430:	4652      	mov	r2, sl
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f ae52 	beq.w	80080e2 <_printf_float+0xc2>
 800843e:	f108 0801 	add.w	r8, r8, #1
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	3b01      	subs	r3, #1
 8008446:	4543      	cmp	r3, r8
 8008448:	dcf1      	bgt.n	800842e <_printf_float+0x40e>
 800844a:	464b      	mov	r3, r9
 800844c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008450:	e6dc      	b.n	800820c <_printf_float+0x1ec>
 8008452:	f04f 0800 	mov.w	r8, #0
 8008456:	f104 0a1a 	add.w	sl, r4, #26
 800845a:	e7f2      	b.n	8008442 <_printf_float+0x422>
 800845c:	2301      	movs	r3, #1
 800845e:	4642      	mov	r2, r8
 8008460:	e7df      	b.n	8008422 <_printf_float+0x402>
 8008462:	2301      	movs	r3, #1
 8008464:	464a      	mov	r2, r9
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f ae38 	beq.w	80080e2 <_printf_float+0xc2>
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	68e3      	ldr	r3, [r4, #12]
 8008478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800847a:	1a5b      	subs	r3, r3, r1
 800847c:	4543      	cmp	r3, r8
 800847e:	dcf0      	bgt.n	8008462 <_printf_float+0x442>
 8008480:	e6fa      	b.n	8008278 <_printf_float+0x258>
 8008482:	f04f 0800 	mov.w	r8, #0
 8008486:	f104 0919 	add.w	r9, r4, #25
 800848a:	e7f4      	b.n	8008476 <_printf_float+0x456>

0800848c <_printf_common>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	4616      	mov	r6, r2
 8008492:	4699      	mov	r9, r3
 8008494:	688a      	ldr	r2, [r1, #8]
 8008496:	690b      	ldr	r3, [r1, #16]
 8008498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800849c:	4293      	cmp	r3, r2
 800849e:	bfb8      	it	lt
 80084a0:	4613      	movlt	r3, r2
 80084a2:	6033      	str	r3, [r6, #0]
 80084a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a8:	4607      	mov	r7, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b10a      	cbz	r2, 80084b2 <_printf_common+0x26>
 80084ae:	3301      	adds	r3, #1
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	0699      	lsls	r1, r3, #26
 80084b6:	bf42      	ittt	mi
 80084b8:	6833      	ldrmi	r3, [r6, #0]
 80084ba:	3302      	addmi	r3, #2
 80084bc:	6033      	strmi	r3, [r6, #0]
 80084be:	6825      	ldr	r5, [r4, #0]
 80084c0:	f015 0506 	ands.w	r5, r5, #6
 80084c4:	d106      	bne.n	80084d4 <_printf_common+0x48>
 80084c6:	f104 0a19 	add.w	sl, r4, #25
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	6832      	ldr	r2, [r6, #0]
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	dc26      	bgt.n	8008522 <_printf_common+0x96>
 80084d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d8:	1e13      	subs	r3, r2, #0
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	bf18      	it	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	0692      	lsls	r2, r2, #26
 80084e2:	d42b      	bmi.n	800853c <_printf_common+0xb0>
 80084e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e8:	4649      	mov	r1, r9
 80084ea:	4638      	mov	r0, r7
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d01e      	beq.n	8008530 <_printf_common+0xa4>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	68e5      	ldr	r5, [r4, #12]
 80084f6:	6832      	ldr	r2, [r6, #0]
 80084f8:	f003 0306 	and.w	r3, r3, #6
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	bf08      	it	eq
 8008500:	1aad      	subeq	r5, r5, r2
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	bf0c      	ite	eq
 8008508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800850c:	2500      	movne	r5, #0
 800850e:	4293      	cmp	r3, r2
 8008510:	bfc4      	itt	gt
 8008512:	1a9b      	subgt	r3, r3, r2
 8008514:	18ed      	addgt	r5, r5, r3
 8008516:	2600      	movs	r6, #0
 8008518:	341a      	adds	r4, #26
 800851a:	42b5      	cmp	r5, r6
 800851c:	d11a      	bne.n	8008554 <_printf_common+0xc8>
 800851e:	2000      	movs	r0, #0
 8008520:	e008      	b.n	8008534 <_printf_common+0xa8>
 8008522:	2301      	movs	r3, #1
 8008524:	4652      	mov	r2, sl
 8008526:	4649      	mov	r1, r9
 8008528:	4638      	mov	r0, r7
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d103      	bne.n	8008538 <_printf_common+0xac>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008538:	3501      	adds	r5, #1
 800853a:	e7c6      	b.n	80084ca <_printf_common+0x3e>
 800853c:	18e1      	adds	r1, r4, r3
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	2030      	movs	r0, #48	; 0x30
 8008542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008546:	4422      	add	r2, r4
 8008548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800854c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008550:	3302      	adds	r3, #2
 8008552:	e7c7      	b.n	80084e4 <_printf_common+0x58>
 8008554:	2301      	movs	r3, #1
 8008556:	4622      	mov	r2, r4
 8008558:	4649      	mov	r1, r9
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d0e6      	beq.n	8008530 <_printf_common+0xa4>
 8008562:	3601      	adds	r6, #1
 8008564:	e7d9      	b.n	800851a <_printf_common+0x8e>
	...

08008568 <_printf_i>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	7e0f      	ldrb	r7, [r1, #24]
 800856e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008570:	2f78      	cmp	r7, #120	; 0x78
 8008572:	4691      	mov	r9, r2
 8008574:	4680      	mov	r8, r0
 8008576:	460c      	mov	r4, r1
 8008578:	469a      	mov	sl, r3
 800857a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800857e:	d807      	bhi.n	8008590 <_printf_i+0x28>
 8008580:	2f62      	cmp	r7, #98	; 0x62
 8008582:	d80a      	bhi.n	800859a <_printf_i+0x32>
 8008584:	2f00      	cmp	r7, #0
 8008586:	f000 80d8 	beq.w	800873a <_printf_i+0x1d2>
 800858a:	2f58      	cmp	r7, #88	; 0x58
 800858c:	f000 80a3 	beq.w	80086d6 <_printf_i+0x16e>
 8008590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008598:	e03a      	b.n	8008610 <_printf_i+0xa8>
 800859a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859e:	2b15      	cmp	r3, #21
 80085a0:	d8f6      	bhi.n	8008590 <_printf_i+0x28>
 80085a2:	a101      	add	r1, pc, #4	; (adr r1, 80085a8 <_printf_i+0x40>)
 80085a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008615 	.word	0x08008615
 80085b0:	08008591 	.word	0x08008591
 80085b4:	08008591 	.word	0x08008591
 80085b8:	08008591 	.word	0x08008591
 80085bc:	08008591 	.word	0x08008591
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008591 	.word	0x08008591
 80085c8:	08008591 	.word	0x08008591
 80085cc:	08008591 	.word	0x08008591
 80085d0:	08008591 	.word	0x08008591
 80085d4:	08008721 	.word	0x08008721
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008703 	.word	0x08008703
 80085e0:	08008591 	.word	0x08008591
 80085e4:	08008591 	.word	0x08008591
 80085e8:	08008743 	.word	0x08008743
 80085ec:	08008591 	.word	0x08008591
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008591 	.word	0x08008591
 80085f8:	08008591 	.word	0x08008591
 80085fc:	0800870b 	.word	0x0800870b
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	1d1a      	adds	r2, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	602a      	str	r2, [r5, #0]
 8008608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800860c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008610:	2301      	movs	r3, #1
 8008612:	e0a3      	b.n	800875c <_printf_i+0x1f4>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	0606      	lsls	r6, r0, #24
 800861a:	f101 0304 	add.w	r3, r1, #4
 800861e:	d50a      	bpl.n	8008636 <_printf_i+0xce>
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	2e00      	cmp	r6, #0
 8008626:	da03      	bge.n	8008630 <_printf_i+0xc8>
 8008628:	232d      	movs	r3, #45	; 0x2d
 800862a:	4276      	negs	r6, r6
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	485e      	ldr	r0, [pc, #376]	; (80087ac <_printf_i+0x244>)
 8008632:	230a      	movs	r3, #10
 8008634:	e019      	b.n	800866a <_printf_i+0x102>
 8008636:	680e      	ldr	r6, [r1, #0]
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800863e:	bf18      	it	ne
 8008640:	b236      	sxthne	r6, r6
 8008642:	e7ef      	b.n	8008624 <_printf_i+0xbc>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	0601      	lsls	r1, r0, #24
 800864e:	d501      	bpl.n	8008654 <_printf_i+0xec>
 8008650:	681e      	ldr	r6, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0xf2>
 8008654:	0646      	lsls	r6, r0, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0xe8>
 8008658:	881e      	ldrh	r6, [r3, #0]
 800865a:	4854      	ldr	r0, [pc, #336]	; (80087ac <_printf_i+0x244>)
 800865c:	2f6f      	cmp	r7, #111	; 0x6f
 800865e:	bf0c      	ite	eq
 8008660:	2308      	moveq	r3, #8
 8008662:	230a      	movne	r3, #10
 8008664:	2100      	movs	r1, #0
 8008666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866a:	6865      	ldr	r5, [r4, #4]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	2d00      	cmp	r5, #0
 8008670:	bfa2      	ittt	ge
 8008672:	6821      	ldrge	r1, [r4, #0]
 8008674:	f021 0104 	bicge.w	r1, r1, #4
 8008678:	6021      	strge	r1, [r4, #0]
 800867a:	b90e      	cbnz	r6, 8008680 <_printf_i+0x118>
 800867c:	2d00      	cmp	r5, #0
 800867e:	d04d      	beq.n	800871c <_printf_i+0x1b4>
 8008680:	4615      	mov	r5, r2
 8008682:	fbb6 f1f3 	udiv	r1, r6, r3
 8008686:	fb03 6711 	mls	r7, r3, r1, r6
 800868a:	5dc7      	ldrb	r7, [r0, r7]
 800868c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008690:	4637      	mov	r7, r6
 8008692:	42bb      	cmp	r3, r7
 8008694:	460e      	mov	r6, r1
 8008696:	d9f4      	bls.n	8008682 <_printf_i+0x11a>
 8008698:	2b08      	cmp	r3, #8
 800869a:	d10b      	bne.n	80086b4 <_printf_i+0x14c>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	07de      	lsls	r6, r3, #31
 80086a0:	d508      	bpl.n	80086b4 <_printf_i+0x14c>
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4299      	cmp	r1, r3
 80086a8:	bfde      	ittt	le
 80086aa:	2330      	movle	r3, #48	; 0x30
 80086ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086b4:	1b52      	subs	r2, r2, r5
 80086b6:	6122      	str	r2, [r4, #16]
 80086b8:	f8cd a000 	str.w	sl, [sp]
 80086bc:	464b      	mov	r3, r9
 80086be:	aa03      	add	r2, sp, #12
 80086c0:	4621      	mov	r1, r4
 80086c2:	4640      	mov	r0, r8
 80086c4:	f7ff fee2 	bl	800848c <_printf_common>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d14c      	bne.n	8008766 <_printf_i+0x1fe>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	b004      	add	sp, #16
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	4835      	ldr	r0, [pc, #212]	; (80087ac <_printf_i+0x244>)
 80086d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086dc:	6829      	ldr	r1, [r5, #0]
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	061d      	lsls	r5, r3, #24
 80086e8:	d514      	bpl.n	8008714 <_printf_i+0x1ac>
 80086ea:	07df      	lsls	r7, r3, #31
 80086ec:	bf44      	itt	mi
 80086ee:	f043 0320 	orrmi.w	r3, r3, #32
 80086f2:	6023      	strmi	r3, [r4, #0]
 80086f4:	b91e      	cbnz	r6, 80086fe <_printf_i+0x196>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	f023 0320 	bic.w	r3, r3, #32
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	2310      	movs	r3, #16
 8008700:	e7b0      	b.n	8008664 <_printf_i+0xfc>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f043 0320 	orr.w	r3, r3, #32
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2378      	movs	r3, #120	; 0x78
 800870c:	4828      	ldr	r0, [pc, #160]	; (80087b0 <_printf_i+0x248>)
 800870e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008712:	e7e3      	b.n	80086dc <_printf_i+0x174>
 8008714:	0659      	lsls	r1, r3, #25
 8008716:	bf48      	it	mi
 8008718:	b2b6      	uxthmi	r6, r6
 800871a:	e7e6      	b.n	80086ea <_printf_i+0x182>
 800871c:	4615      	mov	r5, r2
 800871e:	e7bb      	b.n	8008698 <_printf_i+0x130>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	6826      	ldr	r6, [r4, #0]
 8008724:	6961      	ldr	r1, [r4, #20]
 8008726:	1d18      	adds	r0, r3, #4
 8008728:	6028      	str	r0, [r5, #0]
 800872a:	0635      	lsls	r5, r6, #24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	d501      	bpl.n	8008734 <_printf_i+0x1cc>
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	e002      	b.n	800873a <_printf_i+0x1d2>
 8008734:	0670      	lsls	r0, r6, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0x1c8>
 8008738:	8019      	strh	r1, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	4615      	mov	r5, r2
 8008740:	e7ba      	b.n	80086b8 <_printf_i+0x150>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	1d1a      	adds	r2, r3, #4
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	681d      	ldr	r5, [r3, #0]
 800874a:	6862      	ldr	r2, [r4, #4]
 800874c:	2100      	movs	r1, #0
 800874e:	4628      	mov	r0, r5
 8008750:	f7f7 fd46 	bl	80001e0 <memchr>
 8008754:	b108      	cbz	r0, 800875a <_printf_i+0x1f2>
 8008756:	1b40      	subs	r0, r0, r5
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	2300      	movs	r3, #0
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008764:	e7a8      	b.n	80086b8 <_printf_i+0x150>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	462a      	mov	r2, r5
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d0ab      	beq.n	80086cc <_printf_i+0x164>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	079b      	lsls	r3, r3, #30
 8008778:	d413      	bmi.n	80087a2 <_printf_i+0x23a>
 800877a:	68e0      	ldr	r0, [r4, #12]
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	4298      	cmp	r0, r3
 8008780:	bfb8      	it	lt
 8008782:	4618      	movlt	r0, r3
 8008784:	e7a4      	b.n	80086d0 <_printf_i+0x168>
 8008786:	2301      	movs	r3, #1
 8008788:	4632      	mov	r2, r6
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	47d0      	blx	sl
 8008790:	3001      	adds	r0, #1
 8008792:	d09b      	beq.n	80086cc <_printf_i+0x164>
 8008794:	3501      	adds	r5, #1
 8008796:	68e3      	ldr	r3, [r4, #12]
 8008798:	9903      	ldr	r1, [sp, #12]
 800879a:	1a5b      	subs	r3, r3, r1
 800879c:	42ab      	cmp	r3, r5
 800879e:	dcf2      	bgt.n	8008786 <_printf_i+0x21e>
 80087a0:	e7eb      	b.n	800877a <_printf_i+0x212>
 80087a2:	2500      	movs	r5, #0
 80087a4:	f104 0619 	add.w	r6, r4, #25
 80087a8:	e7f5      	b.n	8008796 <_printf_i+0x22e>
 80087aa:	bf00      	nop
 80087ac:	0800a892 	.word	0x0800a892
 80087b0:	0800a8a3 	.word	0x0800a8a3

080087b4 <_sbrk_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d06      	ldr	r5, [pc, #24]	; (80087d0 <_sbrk_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f7f9 f8e4 	bl	800198c <_sbrk>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_sbrk_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_sbrk_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20004c00 	.word	0x20004c00

080087d4 <_raise_r>:
 80087d4:	291f      	cmp	r1, #31
 80087d6:	b538      	push	{r3, r4, r5, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	d904      	bls.n	80087e8 <_raise_r+0x14>
 80087de:	2316      	movs	r3, #22
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	f04f 30ff 	mov.w	r0, #4294967295
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087ea:	b112      	cbz	r2, 80087f2 <_raise_r+0x1e>
 80087ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f0:	b94b      	cbnz	r3, 8008806 <_raise_r+0x32>
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f830 	bl	8008858 <_getpid_r>
 80087f8:	462a      	mov	r2, r5
 80087fa:	4601      	mov	r1, r0
 80087fc:	4620      	mov	r0, r4
 80087fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008802:	f000 b817 	b.w	8008834 <_kill_r>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d00a      	beq.n	8008820 <_raise_r+0x4c>
 800880a:	1c59      	adds	r1, r3, #1
 800880c:	d103      	bne.n	8008816 <_raise_r+0x42>
 800880e:	2316      	movs	r3, #22
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	2001      	movs	r0, #1
 8008814:	e7e7      	b.n	80087e6 <_raise_r+0x12>
 8008816:	2400      	movs	r4, #0
 8008818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800881c:	4628      	mov	r0, r5
 800881e:	4798      	blx	r3
 8008820:	2000      	movs	r0, #0
 8008822:	e7e0      	b.n	80087e6 <_raise_r+0x12>

08008824 <raise>:
 8008824:	4b02      	ldr	r3, [pc, #8]	; (8008830 <raise+0xc>)
 8008826:	4601      	mov	r1, r0
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	f7ff bfd3 	b.w	80087d4 <_raise_r>
 800882e:	bf00      	nop
 8008830:	20000030 	.word	0x20000030

08008834 <_kill_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	; (8008854 <_kill_r+0x20>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	4611      	mov	r1, r2
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	f7f9 f81c 	bl	800187e <_kill>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d102      	bne.n	8008850 <_kill_r+0x1c>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b103      	cbz	r3, 8008850 <_kill_r+0x1c>
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	20004c00 	.word	0x20004c00

08008858 <_getpid_r>:
 8008858:	f7f9 b809 	b.w	800186e <_getpid>

0800885c <quorem>:
 800885c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	6903      	ldr	r3, [r0, #16]
 8008862:	690c      	ldr	r4, [r1, #16]
 8008864:	42a3      	cmp	r3, r4
 8008866:	4607      	mov	r7, r0
 8008868:	f2c0 8081 	blt.w	800896e <quorem+0x112>
 800886c:	3c01      	subs	r4, #1
 800886e:	f101 0814 	add.w	r8, r1, #20
 8008872:	f100 0514 	add.w	r5, r0, #20
 8008876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008884:	3301      	adds	r3, #1
 8008886:	429a      	cmp	r2, r3
 8008888:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800888c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008890:	fbb2 f6f3 	udiv	r6, r2, r3
 8008894:	d331      	bcc.n	80088fa <quorem+0x9e>
 8008896:	f04f 0e00 	mov.w	lr, #0
 800889a:	4640      	mov	r0, r8
 800889c:	46ac      	mov	ip, r5
 800889e:	46f2      	mov	sl, lr
 80088a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80088a4:	b293      	uxth	r3, r2
 80088a6:	fb06 e303 	mla	r3, r6, r3, lr
 80088aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	ebaa 0303 	sub.w	r3, sl, r3
 80088b4:	f8dc a000 	ldr.w	sl, [ip]
 80088b8:	0c12      	lsrs	r2, r2, #16
 80088ba:	fa13 f38a 	uxtah	r3, r3, sl
 80088be:	fb06 e202 	mla	r2, r6, r2, lr
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	9b00      	ldr	r3, [sp, #0]
 80088c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ca:	b292      	uxth	r2, r2
 80088cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80088d8:	4581      	cmp	r9, r0
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	f84c 3b04 	str.w	r3, [ip], #4
 80088e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088e6:	d2db      	bcs.n	80088a0 <quorem+0x44>
 80088e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088ec:	b92b      	cbnz	r3, 80088fa <quorem+0x9e>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	429d      	cmp	r5, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	d32e      	bcc.n	8008956 <quorem+0xfa>
 80088f8:	613c      	str	r4, [r7, #16]
 80088fa:	4638      	mov	r0, r7
 80088fc:	f001 f8bc 	bl	8009a78 <__mcmp>
 8008900:	2800      	cmp	r0, #0
 8008902:	db24      	blt.n	800894e <quorem+0xf2>
 8008904:	3601      	adds	r6, #1
 8008906:	4628      	mov	r0, r5
 8008908:	f04f 0c00 	mov.w	ip, #0
 800890c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008910:	f8d0 e000 	ldr.w	lr, [r0]
 8008914:	b293      	uxth	r3, r2
 8008916:	ebac 0303 	sub.w	r3, ip, r3
 800891a:	0c12      	lsrs	r2, r2, #16
 800891c:	fa13 f38e 	uxtah	r3, r3, lr
 8008920:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008928:	b29b      	uxth	r3, r3
 800892a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800892e:	45c1      	cmp	r9, r8
 8008930:	f840 3b04 	str.w	r3, [r0], #4
 8008934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008938:	d2e8      	bcs.n	800890c <quorem+0xb0>
 800893a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800893e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008942:	b922      	cbnz	r2, 800894e <quorem+0xf2>
 8008944:	3b04      	subs	r3, #4
 8008946:	429d      	cmp	r5, r3
 8008948:	461a      	mov	r2, r3
 800894a:	d30a      	bcc.n	8008962 <quorem+0x106>
 800894c:	613c      	str	r4, [r7, #16]
 800894e:	4630      	mov	r0, r6
 8008950:	b003      	add	sp, #12
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	6812      	ldr	r2, [r2, #0]
 8008958:	3b04      	subs	r3, #4
 800895a:	2a00      	cmp	r2, #0
 800895c:	d1cc      	bne.n	80088f8 <quorem+0x9c>
 800895e:	3c01      	subs	r4, #1
 8008960:	e7c7      	b.n	80088f2 <quorem+0x96>
 8008962:	6812      	ldr	r2, [r2, #0]
 8008964:	3b04      	subs	r3, #4
 8008966:	2a00      	cmp	r2, #0
 8008968:	d1f0      	bne.n	800894c <quorem+0xf0>
 800896a:	3c01      	subs	r4, #1
 800896c:	e7eb      	b.n	8008946 <quorem+0xea>
 800896e:	2000      	movs	r0, #0
 8008970:	e7ee      	b.n	8008950 <quorem+0xf4>
 8008972:	0000      	movs	r0, r0
 8008974:	0000      	movs	r0, r0
	...

08008978 <_dtoa_r>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	ed2d 8b04 	vpush	{d8-d9}
 8008980:	ec57 6b10 	vmov	r6, r7, d0
 8008984:	b093      	sub	sp, #76	; 0x4c
 8008986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800898c:	9106      	str	r1, [sp, #24]
 800898e:	ee10 aa10 	vmov	sl, s0
 8008992:	4604      	mov	r4, r0
 8008994:	9209      	str	r2, [sp, #36]	; 0x24
 8008996:	930c      	str	r3, [sp, #48]	; 0x30
 8008998:	46bb      	mov	fp, r7
 800899a:	b975      	cbnz	r5, 80089ba <_dtoa_r+0x42>
 800899c:	2010      	movs	r0, #16
 800899e:	f7ff f999 	bl	8007cd4 <malloc>
 80089a2:	4602      	mov	r2, r0
 80089a4:	6260      	str	r0, [r4, #36]	; 0x24
 80089a6:	b920      	cbnz	r0, 80089b2 <_dtoa_r+0x3a>
 80089a8:	4ba7      	ldr	r3, [pc, #668]	; (8008c48 <_dtoa_r+0x2d0>)
 80089aa:	21ea      	movs	r1, #234	; 0xea
 80089ac:	48a7      	ldr	r0, [pc, #668]	; (8008c4c <_dtoa_r+0x2d4>)
 80089ae:	f001 f97b 	bl	8009ca8 <__assert_func>
 80089b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089b6:	6005      	str	r5, [r0, #0]
 80089b8:	60c5      	str	r5, [r0, #12]
 80089ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089bc:	6819      	ldr	r1, [r3, #0]
 80089be:	b151      	cbz	r1, 80089d6 <_dtoa_r+0x5e>
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	604a      	str	r2, [r1, #4]
 80089c4:	2301      	movs	r3, #1
 80089c6:	4093      	lsls	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fe12 	bl	80095f4 <_Bfree>
 80089d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	1e3b      	subs	r3, r7, #0
 80089d8:	bfaa      	itet	ge
 80089da:	2300      	movge	r3, #0
 80089dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089e0:	f8c8 3000 	strge.w	r3, [r8]
 80089e4:	4b9a      	ldr	r3, [pc, #616]	; (8008c50 <_dtoa_r+0x2d8>)
 80089e6:	bfbc      	itt	lt
 80089e8:	2201      	movlt	r2, #1
 80089ea:	f8c8 2000 	strlt.w	r2, [r8]
 80089ee:	ea33 030b 	bics.w	r3, r3, fp
 80089f2:	d11b      	bne.n	8008a2c <_dtoa_r+0xb4>
 80089f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a00:	4333      	orrs	r3, r6
 8008a02:	f000 8592 	beq.w	800952a <_dtoa_r+0xbb2>
 8008a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a08:	b963      	cbnz	r3, 8008a24 <_dtoa_r+0xac>
 8008a0a:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <_dtoa_r+0x2dc>)
 8008a0c:	e022      	b.n	8008a54 <_dtoa_r+0xdc>
 8008a0e:	4b92      	ldr	r3, [pc, #584]	; (8008c58 <_dtoa_r+0x2e0>)
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	3308      	adds	r3, #8
 8008a14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	9801      	ldr	r0, [sp, #4]
 8008a1a:	b013      	add	sp, #76	; 0x4c
 8008a1c:	ecbd 8b04 	vpop	{d8-d9}
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	4b8b      	ldr	r3, [pc, #556]	; (8008c54 <_dtoa_r+0x2dc>)
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	3303      	adds	r3, #3
 8008a2a:	e7f3      	b.n	8008a14 <_dtoa_r+0x9c>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4650      	mov	r0, sl
 8008a32:	4659      	mov	r1, fp
 8008a34:	f7f8 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a38:	ec4b ab19 	vmov	d9, sl, fp
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	b158      	cbz	r0, 8008a58 <_dtoa_r+0xe0>
 8008a40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a42:	2301      	movs	r3, #1
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 856b 	beq.w	8009524 <_dtoa_r+0xbac>
 8008a4e:	4883      	ldr	r0, [pc, #524]	; (8008c5c <_dtoa_r+0x2e4>)
 8008a50:	6018      	str	r0, [r3, #0]
 8008a52:	1e43      	subs	r3, r0, #1
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	e7df      	b.n	8008a18 <_dtoa_r+0xa0>
 8008a58:	ec4b ab10 	vmov	d0, sl, fp
 8008a5c:	aa10      	add	r2, sp, #64	; 0x40
 8008a5e:	a911      	add	r1, sp, #68	; 0x44
 8008a60:	4620      	mov	r0, r4
 8008a62:	f001 f8af 	bl	8009bc4 <__d2b>
 8008a66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a6a:	ee08 0a10 	vmov	s16, r0
 8008a6e:	2d00      	cmp	r5, #0
 8008a70:	f000 8084 	beq.w	8008b7c <_dtoa_r+0x204>
 8008a74:	ee19 3a90 	vmov	r3, s19
 8008a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a80:	4656      	mov	r6, sl
 8008a82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a8e:	4b74      	ldr	r3, [pc, #464]	; (8008c60 <_dtoa_r+0x2e8>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	4630      	mov	r0, r6
 8008a94:	4639      	mov	r1, r7
 8008a96:	f7f7 fbf7 	bl	8000288 <__aeabi_dsub>
 8008a9a:	a365      	add	r3, pc, #404	; (adr r3, 8008c30 <_dtoa_r+0x2b8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fdaa 	bl	80005f8 <__aeabi_dmul>
 8008aa4:	a364      	add	r3, pc, #400	; (adr r3, 8008c38 <_dtoa_r+0x2c0>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fbef 	bl	800028c <__adddf3>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	f7f7 fd36 	bl	8000524 <__aeabi_i2d>
 8008ab8:	a361      	add	r3, pc, #388	; (adr r3, 8008c40 <_dtoa_r+0x2c8>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fd9b 	bl	80005f8 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fbdf 	bl	800028c <__adddf3>
 8008ace:	4606      	mov	r6, r0
 8008ad0:	460f      	mov	r7, r1
 8008ad2:	f7f8 f841 	bl	8000b58 <__aeabi_d2iz>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	9000      	str	r0, [sp, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 fffc 	bl	8000adc <__aeabi_dcmplt>
 8008ae4:	b150      	cbz	r0, 8008afc <_dtoa_r+0x184>
 8008ae6:	9800      	ldr	r0, [sp, #0]
 8008ae8:	f7f7 fd1c 	bl	8000524 <__aeabi_i2d>
 8008aec:	4632      	mov	r2, r6
 8008aee:	463b      	mov	r3, r7
 8008af0:	f7f7 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af4:	b910      	cbnz	r0, 8008afc <_dtoa_r+0x184>
 8008af6:	9b00      	ldr	r3, [sp, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	9b00      	ldr	r3, [sp, #0]
 8008afe:	2b16      	cmp	r3, #22
 8008b00:	d85a      	bhi.n	8008bb8 <_dtoa_r+0x240>
 8008b02:	9a00      	ldr	r2, [sp, #0]
 8008b04:	4b57      	ldr	r3, [pc, #348]	; (8008c64 <_dtoa_r+0x2ec>)
 8008b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	ec51 0b19 	vmov	r0, r1, d9
 8008b12:	f7f7 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d050      	beq.n	8008bbc <_dtoa_r+0x244>
 8008b1a:	9b00      	ldr	r3, [sp, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b26:	1b5d      	subs	r5, r3, r5
 8008b28:	1e6b      	subs	r3, r5, #1
 8008b2a:	9305      	str	r3, [sp, #20]
 8008b2c:	bf45      	ittet	mi
 8008b2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b32:	9304      	strmi	r3, [sp, #16]
 8008b34:	2300      	movpl	r3, #0
 8008b36:	2300      	movmi	r3, #0
 8008b38:	bf4c      	ite	mi
 8008b3a:	9305      	strmi	r3, [sp, #20]
 8008b3c:	9304      	strpl	r3, [sp, #16]
 8008b3e:	9b00      	ldr	r3, [sp, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	db3d      	blt.n	8008bc0 <_dtoa_r+0x248>
 8008b44:	9b05      	ldr	r3, [sp, #20]
 8008b46:	9a00      	ldr	r2, [sp, #0]
 8008b48:	920a      	str	r2, [sp, #40]	; 0x28
 8008b4a:	4413      	add	r3, r2
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	9b06      	ldr	r3, [sp, #24]
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	f200 8089 	bhi.w	8008c6c <_dtoa_r+0x2f4>
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	bfc4      	itt	gt
 8008b5e:	3b04      	subgt	r3, #4
 8008b60:	9306      	strgt	r3, [sp, #24]
 8008b62:	9b06      	ldr	r3, [sp, #24]
 8008b64:	f1a3 0302 	sub.w	r3, r3, #2
 8008b68:	bfcc      	ite	gt
 8008b6a:	2500      	movgt	r5, #0
 8008b6c:	2501      	movle	r5, #1
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	f200 8087 	bhi.w	8008c82 <_dtoa_r+0x30a>
 8008b74:	e8df f003 	tbb	[pc, r3]
 8008b78:	59383a2d 	.word	0x59383a2d
 8008b7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b80:	441d      	add	r5, r3
 8008b82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	bfc1      	itttt	gt
 8008b8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b92:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b9a:	bfda      	itte	le
 8008b9c:	f1c3 0320 	rsble	r3, r3, #32
 8008ba0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ba4:	4318      	orrgt	r0, r3
 8008ba6:	f7f7 fcad 	bl	8000504 <__aeabi_ui2d>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4606      	mov	r6, r0
 8008bae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bb2:	3d01      	subs	r5, #1
 8008bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8008bb6:	e76a      	b.n	8008a8e <_dtoa_r+0x116>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7b2      	b.n	8008b22 <_dtoa_r+0x1aa>
 8008bbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bbe:	e7b1      	b.n	8008b24 <_dtoa_r+0x1ac>
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	9a00      	ldr	r2, [sp, #0]
 8008bc4:	1a9b      	subs	r3, r3, r2
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	4253      	negs	r3, r2
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd0:	e7bf      	b.n	8008b52 <_dtoa_r+0x1da>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9308      	str	r3, [sp, #32]
 8008bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc55      	bgt.n	8008c88 <_dtoa_r+0x310>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008be2:	461a      	mov	r2, r3
 8008be4:	9209      	str	r2, [sp, #36]	; 0x24
 8008be6:	e00c      	b.n	8008c02 <_dtoa_r+0x28a>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e7f3      	b.n	8008bd4 <_dtoa_r+0x25c>
 8008bec:	2300      	movs	r3, #0
 8008bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf0:	9308      	str	r3, [sp, #32]
 8008bf2:	9b00      	ldr	r3, [sp, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	9302      	str	r3, [sp, #8]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	9303      	str	r3, [sp, #12]
 8008bfe:	bfb8      	it	lt
 8008c00:	2301      	movlt	r3, #1
 8008c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c04:	2200      	movs	r2, #0
 8008c06:	6042      	str	r2, [r0, #4]
 8008c08:	2204      	movs	r2, #4
 8008c0a:	f102 0614 	add.w	r6, r2, #20
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	6841      	ldr	r1, [r0, #4]
 8008c12:	d93d      	bls.n	8008c90 <_dtoa_r+0x318>
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fcad 	bl	8009574 <_Balloc>
 8008c1a:	9001      	str	r0, [sp, #4]
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d13b      	bne.n	8008c98 <_dtoa_r+0x320>
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <_dtoa_r+0x2f0>)
 8008c22:	4602      	mov	r2, r0
 8008c24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c28:	e6c0      	b.n	80089ac <_dtoa_r+0x34>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7df      	b.n	8008bee <_dtoa_r+0x276>
 8008c2e:	bf00      	nop
 8008c30:	636f4361 	.word	0x636f4361
 8008c34:	3fd287a7 	.word	0x3fd287a7
 8008c38:	8b60c8b3 	.word	0x8b60c8b3
 8008c3c:	3fc68a28 	.word	0x3fc68a28
 8008c40:	509f79fb 	.word	0x509f79fb
 8008c44:	3fd34413 	.word	0x3fd34413
 8008c48:	0800a8c1 	.word	0x0800a8c1
 8008c4c:	0800a8d8 	.word	0x0800a8d8
 8008c50:	7ff00000 	.word	0x7ff00000
 8008c54:	0800a8bd 	.word	0x0800a8bd
 8008c58:	0800a8b4 	.word	0x0800a8b4
 8008c5c:	0800a891 	.word	0x0800a891
 8008c60:	3ff80000 	.word	0x3ff80000
 8008c64:	0800a9c8 	.word	0x0800a9c8
 8008c68:	0800a933 	.word	0x0800a933
 8008c6c:	2501      	movs	r5, #1
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9306      	str	r3, [sp, #24]
 8008c72:	9508      	str	r5, [sp, #32]
 8008c74:	f04f 33ff 	mov.w	r3, #4294967295
 8008c78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2312      	movs	r3, #18
 8008c80:	e7b0      	b.n	8008be4 <_dtoa_r+0x26c>
 8008c82:	2301      	movs	r3, #1
 8008c84:	9308      	str	r3, [sp, #32]
 8008c86:	e7f5      	b.n	8008c74 <_dtoa_r+0x2fc>
 8008c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c8e:	e7b8      	b.n	8008c02 <_dtoa_r+0x28a>
 8008c90:	3101      	adds	r1, #1
 8008c92:	6041      	str	r1, [r0, #4]
 8008c94:	0052      	lsls	r2, r2, #1
 8008c96:	e7b8      	b.n	8008c0a <_dtoa_r+0x292>
 8008c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	2b0e      	cmp	r3, #14
 8008ca2:	f200 809d 	bhi.w	8008de0 <_dtoa_r+0x468>
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	f000 809a 	beq.w	8008de0 <_dtoa_r+0x468>
 8008cac:	9b00      	ldr	r3, [sp, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd32      	ble.n	8008d18 <_dtoa_r+0x3a0>
 8008cb2:	4ab7      	ldr	r2, [pc, #732]	; (8008f90 <_dtoa_r+0x618>)
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	05d8      	lsls	r0, r3, #23
 8008cc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008cc8:	d516      	bpl.n	8008cf8 <_dtoa_r+0x380>
 8008cca:	4bb2      	ldr	r3, [pc, #712]	; (8008f94 <_dtoa_r+0x61c>)
 8008ccc:	ec51 0b19 	vmov	r0, r1, d9
 8008cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cd4:	f7f7 fdba 	bl	800084c <__aeabi_ddiv>
 8008cd8:	f007 070f 	and.w	r7, r7, #15
 8008cdc:	4682      	mov	sl, r0
 8008cde:	468b      	mov	fp, r1
 8008ce0:	2503      	movs	r5, #3
 8008ce2:	4eac      	ldr	r6, [pc, #688]	; (8008f94 <_dtoa_r+0x61c>)
 8008ce4:	b957      	cbnz	r7, 8008cfc <_dtoa_r+0x384>
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	464b      	mov	r3, r9
 8008cea:	4650      	mov	r0, sl
 8008cec:	4659      	mov	r1, fp
 8008cee:	f7f7 fdad 	bl	800084c <__aeabi_ddiv>
 8008cf2:	4682      	mov	sl, r0
 8008cf4:	468b      	mov	fp, r1
 8008cf6:	e028      	b.n	8008d4a <_dtoa_r+0x3d2>
 8008cf8:	2502      	movs	r5, #2
 8008cfa:	e7f2      	b.n	8008ce2 <_dtoa_r+0x36a>
 8008cfc:	07f9      	lsls	r1, r7, #31
 8008cfe:	d508      	bpl.n	8008d12 <_dtoa_r+0x39a>
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d08:	f7f7 fc76 	bl	80005f8 <__aeabi_dmul>
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	4680      	mov	r8, r0
 8008d10:	4689      	mov	r9, r1
 8008d12:	107f      	asrs	r7, r7, #1
 8008d14:	3608      	adds	r6, #8
 8008d16:	e7e5      	b.n	8008ce4 <_dtoa_r+0x36c>
 8008d18:	f000 809b 	beq.w	8008e52 <_dtoa_r+0x4da>
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	4f9d      	ldr	r7, [pc, #628]	; (8008f94 <_dtoa_r+0x61c>)
 8008d20:	425e      	negs	r6, r3
 8008d22:	4b9b      	ldr	r3, [pc, #620]	; (8008f90 <_dtoa_r+0x618>)
 8008d24:	f006 020f 	and.w	r2, r6, #15
 8008d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	ec51 0b19 	vmov	r0, r1, d9
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	1136      	asrs	r6, r6, #4
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	468b      	mov	fp, r1
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2502      	movs	r5, #2
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d17a      	bne.n	8008e3c <_dtoa_r+0x4c4>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1d3      	bne.n	8008cf2 <_dtoa_r+0x37a>
 8008d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8082 	beq.w	8008e56 <_dtoa_r+0x4de>
 8008d52:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <_dtoa_r+0x620>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	4650      	mov	r0, sl
 8008d58:	4659      	mov	r1, fp
 8008d5a:	f7f7 febf 	bl	8000adc <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d079      	beq.n	8008e56 <_dtoa_r+0x4de>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d076      	beq.n	8008e56 <_dtoa_r+0x4de>
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dd36      	ble.n	8008ddc <_dtoa_r+0x464>
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	4650      	mov	r0, sl
 8008d72:	4659      	mov	r1, fp
 8008d74:	1e5f      	subs	r7, r3, #1
 8008d76:	2200      	movs	r2, #0
 8008d78:	4b88      	ldr	r3, [pc, #544]	; (8008f9c <_dtoa_r+0x624>)
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	9e02      	ldr	r6, [sp, #8]
 8008d80:	4682      	mov	sl, r0
 8008d82:	468b      	mov	fp, r1
 8008d84:	3501      	adds	r5, #1
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	465b      	mov	r3, fp
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	4b82      	ldr	r3, [pc, #520]	; (8008fa0 <_dtoa_r+0x628>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	f7f7 fa78 	bl	800028c <__adddf3>
 8008d9c:	46d0      	mov	r8, sl
 8008d9e:	46d9      	mov	r9, fp
 8008da0:	4682      	mov	sl, r0
 8008da2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d158      	bne.n	8008e5c <_dtoa_r+0x4e4>
 8008daa:	4b7e      	ldr	r3, [pc, #504]	; (8008fa4 <_dtoa_r+0x62c>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fa69 	bl	8000288 <__aeabi_dsub>
 8008db6:	4652      	mov	r2, sl
 8008db8:	465b      	mov	r3, fp
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4689      	mov	r9, r1
 8008dbe:	f7f7 feab 	bl	8000b18 <__aeabi_dcmpgt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f040 8295 	bne.w	80092f2 <_dtoa_r+0x97a>
 8008dc8:	4652      	mov	r2, sl
 8008dca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 fe83 	bl	8000adc <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8289 	bne.w	80092ee <_dtoa_r+0x976>
 8008ddc:	ec5b ab19 	vmov	sl, fp, d9
 8008de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f2c0 8148 	blt.w	8009078 <_dtoa_r+0x700>
 8008de8:	9a00      	ldr	r2, [sp, #0]
 8008dea:	2a0e      	cmp	r2, #14
 8008dec:	f300 8144 	bgt.w	8009078 <_dtoa_r+0x700>
 8008df0:	4b67      	ldr	r3, [pc, #412]	; (8008f90 <_dtoa_r+0x618>)
 8008df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f280 80d5 	bge.w	8008fac <_dtoa_r+0x634>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f300 80d1 	bgt.w	8008fac <_dtoa_r+0x634>
 8008e0a:	f040 826f 	bne.w	80092ec <_dtoa_r+0x974>
 8008e0e:	4b65      	ldr	r3, [pc, #404]	; (8008fa4 <_dtoa_r+0x62c>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	4640      	mov	r0, r8
 8008e14:	4649      	mov	r1, r9
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	f7f7 fe71 	bl	8000b04 <__aeabi_dcmpge>
 8008e22:	9e03      	ldr	r6, [sp, #12]
 8008e24:	4637      	mov	r7, r6
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f040 8245 	bne.w	80092b6 <_dtoa_r+0x93e>
 8008e2c:	9d01      	ldr	r5, [sp, #4]
 8008e2e:	2331      	movs	r3, #49	; 0x31
 8008e30:	f805 3b01 	strb.w	r3, [r5], #1
 8008e34:	9b00      	ldr	r3, [sp, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	e240      	b.n	80092be <_dtoa_r+0x946>
 8008e3c:	07f2      	lsls	r2, r6, #31
 8008e3e:	d505      	bpl.n	8008e4c <_dtoa_r+0x4d4>
 8008e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	3501      	adds	r5, #1
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	1076      	asrs	r6, r6, #1
 8008e4e:	3708      	adds	r7, #8
 8008e50:	e777      	b.n	8008d42 <_dtoa_r+0x3ca>
 8008e52:	2502      	movs	r5, #2
 8008e54:	e779      	b.n	8008d4a <_dtoa_r+0x3d2>
 8008e56:	9f00      	ldr	r7, [sp, #0]
 8008e58:	9e03      	ldr	r6, [sp, #12]
 8008e5a:	e794      	b.n	8008d86 <_dtoa_r+0x40e>
 8008e5c:	9901      	ldr	r1, [sp, #4]
 8008e5e:	4b4c      	ldr	r3, [pc, #304]	; (8008f90 <_dtoa_r+0x618>)
 8008e60:	4431      	add	r1, r6
 8008e62:	910d      	str	r1, [sp, #52]	; 0x34
 8008e64:	9908      	ldr	r1, [sp, #32]
 8008e66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	d043      	beq.n	8008efa <_dtoa_r+0x582>
 8008e72:	494d      	ldr	r1, [pc, #308]	; (8008fa8 <_dtoa_r+0x630>)
 8008e74:	2000      	movs	r0, #0
 8008e76:	f7f7 fce9 	bl	800084c <__aeabi_ddiv>
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	f7f7 fa03 	bl	8000288 <__aeabi_dsub>
 8008e82:	9d01      	ldr	r5, [sp, #4]
 8008e84:	4682      	mov	sl, r0
 8008e86:	468b      	mov	fp, r1
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7f7 fe64 	bl	8000b58 <__aeabi_d2iz>
 8008e90:	4606      	mov	r6, r0
 8008e92:	f7f7 fb47 	bl	8000524 <__aeabi_i2d>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 f9f3 	bl	8000288 <__aeabi_dsub>
 8008ea2:	3630      	adds	r6, #48	; 0x30
 8008ea4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	465b      	mov	r3, fp
 8008eac:	4680      	mov	r8, r0
 8008eae:	4689      	mov	r9, r1
 8008eb0:	f7f7 fe14 	bl	8000adc <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d163      	bne.n	8008f80 <_dtoa_r+0x608>
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	4936      	ldr	r1, [pc, #216]	; (8008f98 <_dtoa_r+0x620>)
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	f7f7 fe08 	bl	8000adc <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f040 80b5 	bne.w	800903c <_dtoa_r+0x6c4>
 8008ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed4:	429d      	cmp	r5, r3
 8008ed6:	d081      	beq.n	8008ddc <_dtoa_r+0x464>
 8008ed8:	4b30      	ldr	r3, [pc, #192]	; (8008f9c <_dtoa_r+0x624>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	4650      	mov	r0, sl
 8008ede:	4659      	mov	r1, fp
 8008ee0:	f7f7 fb8a 	bl	80005f8 <__aeabi_dmul>
 8008ee4:	4b2d      	ldr	r3, [pc, #180]	; (8008f9c <_dtoa_r+0x624>)
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	e7c6      	b.n	8008e88 <_dtoa_r+0x510>
 8008efa:	4650      	mov	r0, sl
 8008efc:	4659      	mov	r1, fp
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f04:	9d01      	ldr	r5, [sp, #4]
 8008f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f08:	4682      	mov	sl, r0
 8008f0a:	468b      	mov	fp, r1
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4640      	mov	r0, r8
 8008f10:	f7f7 fe22 	bl	8000b58 <__aeabi_d2iz>
 8008f14:	4606      	mov	r6, r0
 8008f16:	f7f7 fb05 	bl	8000524 <__aeabi_i2d>
 8008f1a:	3630      	adds	r6, #48	; 0x30
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 f9b0 	bl	8000288 <__aeabi_dsub>
 8008f28:	f805 6b01 	strb.w	r6, [r5], #1
 8008f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	d124      	bne.n	8008f84 <_dtoa_r+0x60c>
 8008f3a:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <_dtoa_r+0x630>)
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	4659      	mov	r1, fp
 8008f40:	f7f7 f9a4 	bl	800028c <__adddf3>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	f7f7 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d173      	bne.n	800903c <_dtoa_r+0x6c4>
 8008f54:	4652      	mov	r2, sl
 8008f56:	465b      	mov	r3, fp
 8008f58:	4913      	ldr	r1, [pc, #76]	; (8008fa8 <_dtoa_r+0x630>)
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f7f7 f994 	bl	8000288 <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f43f af35 	beq.w	8008ddc <_dtoa_r+0x464>
 8008f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f74:	1e6b      	subs	r3, r5, #1
 8008f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f7c:	2b30      	cmp	r3, #48	; 0x30
 8008f7e:	d0f8      	beq.n	8008f72 <_dtoa_r+0x5fa>
 8008f80:	9700      	str	r7, [sp, #0]
 8008f82:	e049      	b.n	8009018 <_dtoa_r+0x6a0>
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <_dtoa_r+0x624>)
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	e7bd      	b.n	8008f0c <_dtoa_r+0x594>
 8008f90:	0800a9c8 	.word	0x0800a9c8
 8008f94:	0800a9a0 	.word	0x0800a9a0
 8008f98:	3ff00000 	.word	0x3ff00000
 8008f9c:	40240000 	.word	0x40240000
 8008fa0:	401c0000 	.word	0x401c0000
 8008fa4:	40140000 	.word	0x40140000
 8008fa8:	3fe00000 	.word	0x3fe00000
 8008fac:	9d01      	ldr	r5, [sp, #4]
 8008fae:	4656      	mov	r6, sl
 8008fb0:	465f      	mov	r7, fp
 8008fb2:	4642      	mov	r2, r8
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	4639      	mov	r1, r7
 8008fba:	f7f7 fc47 	bl	800084c <__aeabi_ddiv>
 8008fbe:	f7f7 fdcb 	bl	8000b58 <__aeabi_d2iz>
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	f7f7 faae 	bl	8000524 <__aeabi_i2d>
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	f7f7 fb14 	bl	80005f8 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008fdc:	f7f7 f954 	bl	8000288 <__aeabi_dsub>
 8008fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fe4:	9e01      	ldr	r6, [sp, #4]
 8008fe6:	9f03      	ldr	r7, [sp, #12]
 8008fe8:	1bae      	subs	r6, r5, r6
 8008fea:	42b7      	cmp	r7, r6
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	d135      	bne.n	800905e <_dtoa_r+0x6e6>
 8008ff2:	f7f7 f94b 	bl	800028c <__adddf3>
 8008ff6:	4642      	mov	r2, r8
 8008ff8:	464b      	mov	r3, r9
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	f7f7 fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009002:	b9d0      	cbnz	r0, 800903a <_dtoa_r+0x6c2>
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	f7f7 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009010:	b110      	cbz	r0, 8009018 <_dtoa_r+0x6a0>
 8009012:	f01a 0f01 	tst.w	sl, #1
 8009016:	d110      	bne.n	800903a <_dtoa_r+0x6c2>
 8009018:	4620      	mov	r0, r4
 800901a:	ee18 1a10 	vmov	r1, s16
 800901e:	f000 fae9 	bl	80095f4 <_Bfree>
 8009022:	2300      	movs	r3, #0
 8009024:	9800      	ldr	r0, [sp, #0]
 8009026:	702b      	strb	r3, [r5, #0]
 8009028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800902a:	3001      	adds	r0, #1
 800902c:	6018      	str	r0, [r3, #0]
 800902e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009030:	2b00      	cmp	r3, #0
 8009032:	f43f acf1 	beq.w	8008a18 <_dtoa_r+0xa0>
 8009036:	601d      	str	r5, [r3, #0]
 8009038:	e4ee      	b.n	8008a18 <_dtoa_r+0xa0>
 800903a:	9f00      	ldr	r7, [sp, #0]
 800903c:	462b      	mov	r3, r5
 800903e:	461d      	mov	r5, r3
 8009040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009044:	2a39      	cmp	r2, #57	; 0x39
 8009046:	d106      	bne.n	8009056 <_dtoa_r+0x6de>
 8009048:	9a01      	ldr	r2, [sp, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d1f7      	bne.n	800903e <_dtoa_r+0x6c6>
 800904e:	9901      	ldr	r1, [sp, #4]
 8009050:	2230      	movs	r2, #48	; 0x30
 8009052:	3701      	adds	r7, #1
 8009054:	700a      	strb	r2, [r1, #0]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	3201      	adds	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]
 800905c:	e790      	b.n	8008f80 <_dtoa_r+0x608>
 800905e:	4ba6      	ldr	r3, [pc, #664]	; (80092f8 <_dtoa_r+0x980>)
 8009060:	2200      	movs	r2, #0
 8009062:	f7f7 fac9 	bl	80005f8 <__aeabi_dmul>
 8009066:	2200      	movs	r2, #0
 8009068:	2300      	movs	r3, #0
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	f7f7 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009072:	2800      	cmp	r0, #0
 8009074:	d09d      	beq.n	8008fb2 <_dtoa_r+0x63a>
 8009076:	e7cf      	b.n	8009018 <_dtoa_r+0x6a0>
 8009078:	9a08      	ldr	r2, [sp, #32]
 800907a:	2a00      	cmp	r2, #0
 800907c:	f000 80d7 	beq.w	800922e <_dtoa_r+0x8b6>
 8009080:	9a06      	ldr	r2, [sp, #24]
 8009082:	2a01      	cmp	r2, #1
 8009084:	f300 80ba 	bgt.w	80091fc <_dtoa_r+0x884>
 8009088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800908a:	2a00      	cmp	r2, #0
 800908c:	f000 80b2 	beq.w	80091f4 <_dtoa_r+0x87c>
 8009090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009094:	9e07      	ldr	r6, [sp, #28]
 8009096:	9d04      	ldr	r5, [sp, #16]
 8009098:	9a04      	ldr	r2, [sp, #16]
 800909a:	441a      	add	r2, r3
 800909c:	9204      	str	r2, [sp, #16]
 800909e:	9a05      	ldr	r2, [sp, #20]
 80090a0:	2101      	movs	r1, #1
 80090a2:	441a      	add	r2, r3
 80090a4:	4620      	mov	r0, r4
 80090a6:	9205      	str	r2, [sp, #20]
 80090a8:	f000 fb5c 	bl	8009764 <__i2b>
 80090ac:	4607      	mov	r7, r0
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	dd0c      	ble.n	80090cc <_dtoa_r+0x754>
 80090b2:	9b05      	ldr	r3, [sp, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd09      	ble.n	80090cc <_dtoa_r+0x754>
 80090b8:	42ab      	cmp	r3, r5
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	bfa8      	it	ge
 80090be:	462b      	movge	r3, r5
 80090c0:	1ad2      	subs	r2, r2, r3
 80090c2:	9204      	str	r2, [sp, #16]
 80090c4:	9a05      	ldr	r2, [sp, #20]
 80090c6:	1aed      	subs	r5, r5, r3
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	9b07      	ldr	r3, [sp, #28]
 80090ce:	b31b      	cbz	r3, 8009118 <_dtoa_r+0x7a0>
 80090d0:	9b08      	ldr	r3, [sp, #32]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 80af 	beq.w	8009236 <_dtoa_r+0x8be>
 80090d8:	2e00      	cmp	r6, #0
 80090da:	dd13      	ble.n	8009104 <_dtoa_r+0x78c>
 80090dc:	4639      	mov	r1, r7
 80090de:	4632      	mov	r2, r6
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fbff 	bl	80098e4 <__pow5mult>
 80090e6:	ee18 2a10 	vmov	r2, s16
 80090ea:	4601      	mov	r1, r0
 80090ec:	4607      	mov	r7, r0
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fb4e 	bl	8009790 <__multiply>
 80090f4:	ee18 1a10 	vmov	r1, s16
 80090f8:	4680      	mov	r8, r0
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fa7a 	bl	80095f4 <_Bfree>
 8009100:	ee08 8a10 	vmov	s16, r8
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	1b9a      	subs	r2, r3, r6
 8009108:	d006      	beq.n	8009118 <_dtoa_r+0x7a0>
 800910a:	ee18 1a10 	vmov	r1, s16
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fbe8 	bl	80098e4 <__pow5mult>
 8009114:	ee08 0a10 	vmov	s16, r0
 8009118:	2101      	movs	r1, #1
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fb22 	bl	8009764 <__i2b>
 8009120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	4606      	mov	r6, r0
 8009126:	f340 8088 	ble.w	800923a <_dtoa_r+0x8c2>
 800912a:	461a      	mov	r2, r3
 800912c:	4601      	mov	r1, r0
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fbd8 	bl	80098e4 <__pow5mult>
 8009134:	9b06      	ldr	r3, [sp, #24]
 8009136:	2b01      	cmp	r3, #1
 8009138:	4606      	mov	r6, r0
 800913a:	f340 8081 	ble.w	8009240 <_dtoa_r+0x8c8>
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	6933      	ldr	r3, [r6, #16]
 8009144:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009148:	6918      	ldr	r0, [r3, #16]
 800914a:	f000 fabb 	bl	80096c4 <__hi0bits>
 800914e:	f1c0 0020 	rsb	r0, r0, #32
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	4418      	add	r0, r3
 8009156:	f010 001f 	ands.w	r0, r0, #31
 800915a:	f000 8092 	beq.w	8009282 <_dtoa_r+0x90a>
 800915e:	f1c0 0320 	rsb	r3, r0, #32
 8009162:	2b04      	cmp	r3, #4
 8009164:	f340 808a 	ble.w	800927c <_dtoa_r+0x904>
 8009168:	f1c0 001c 	rsb	r0, r0, #28
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	4403      	add	r3, r0
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	9b05      	ldr	r3, [sp, #20]
 8009174:	4403      	add	r3, r0
 8009176:	4405      	add	r5, r0
 8009178:	9305      	str	r3, [sp, #20]
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	dd07      	ble.n	8009190 <_dtoa_r+0x818>
 8009180:	ee18 1a10 	vmov	r1, s16
 8009184:	461a      	mov	r2, r3
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fc06 	bl	8009998 <__lshift>
 800918c:	ee08 0a10 	vmov	s16, r0
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd05      	ble.n	80091a2 <_dtoa_r+0x82a>
 8009196:	4631      	mov	r1, r6
 8009198:	461a      	mov	r2, r3
 800919a:	4620      	mov	r0, r4
 800919c:	f000 fbfc 	bl	8009998 <__lshift>
 80091a0:	4606      	mov	r6, r0
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d06e      	beq.n	8009286 <_dtoa_r+0x90e>
 80091a8:	ee18 0a10 	vmov	r0, s16
 80091ac:	4631      	mov	r1, r6
 80091ae:	f000 fc63 	bl	8009a78 <__mcmp>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	da67      	bge.n	8009286 <_dtoa_r+0x90e>
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	ee18 1a10 	vmov	r1, s16
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	220a      	movs	r2, #10
 80091c2:	2300      	movs	r3, #0
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fa37 	bl	8009638 <__multadd>
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	ee08 0a10 	vmov	s16, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 81b1 	beq.w	8009538 <_dtoa_r+0xbc0>
 80091d6:	2300      	movs	r3, #0
 80091d8:	4639      	mov	r1, r7
 80091da:	220a      	movs	r2, #10
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 fa2b 	bl	8009638 <__multadd>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	4607      	mov	r7, r0
 80091e8:	f300 808e 	bgt.w	8009308 <_dtoa_r+0x990>
 80091ec:	9b06      	ldr	r3, [sp, #24]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	dc51      	bgt.n	8009296 <_dtoa_r+0x91e>
 80091f2:	e089      	b.n	8009308 <_dtoa_r+0x990>
 80091f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091fa:	e74b      	b.n	8009094 <_dtoa_r+0x71c>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1e5e      	subs	r6, r3, #1
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	42b3      	cmp	r3, r6
 8009204:	bfbf      	itttt	lt
 8009206:	9b07      	ldrlt	r3, [sp, #28]
 8009208:	9607      	strlt	r6, [sp, #28]
 800920a:	1af2      	sublt	r2, r6, r3
 800920c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800920e:	bfb6      	itet	lt
 8009210:	189b      	addlt	r3, r3, r2
 8009212:	1b9e      	subge	r6, r3, r6
 8009214:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	bfb8      	it	lt
 800921a:	2600      	movlt	r6, #0
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfb7      	itett	lt
 8009220:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009224:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009228:	1a9d      	sublt	r5, r3, r2
 800922a:	2300      	movlt	r3, #0
 800922c:	e734      	b.n	8009098 <_dtoa_r+0x720>
 800922e:	9e07      	ldr	r6, [sp, #28]
 8009230:	9d04      	ldr	r5, [sp, #16]
 8009232:	9f08      	ldr	r7, [sp, #32]
 8009234:	e73b      	b.n	80090ae <_dtoa_r+0x736>
 8009236:	9a07      	ldr	r2, [sp, #28]
 8009238:	e767      	b.n	800910a <_dtoa_r+0x792>
 800923a:	9b06      	ldr	r3, [sp, #24]
 800923c:	2b01      	cmp	r3, #1
 800923e:	dc18      	bgt.n	8009272 <_dtoa_r+0x8fa>
 8009240:	f1ba 0f00 	cmp.w	sl, #0
 8009244:	d115      	bne.n	8009272 <_dtoa_r+0x8fa>
 8009246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800924a:	b993      	cbnz	r3, 8009272 <_dtoa_r+0x8fa>
 800924c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009250:	0d1b      	lsrs	r3, r3, #20
 8009252:	051b      	lsls	r3, r3, #20
 8009254:	b183      	cbz	r3, 8009278 <_dtoa_r+0x900>
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	3301      	adds	r3, #1
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	3301      	adds	r3, #1
 8009260:	9305      	str	r3, [sp, #20]
 8009262:	f04f 0801 	mov.w	r8, #1
 8009266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	f47f af6a 	bne.w	8009142 <_dtoa_r+0x7ca>
 800926e:	2001      	movs	r0, #1
 8009270:	e76f      	b.n	8009152 <_dtoa_r+0x7da>
 8009272:	f04f 0800 	mov.w	r8, #0
 8009276:	e7f6      	b.n	8009266 <_dtoa_r+0x8ee>
 8009278:	4698      	mov	r8, r3
 800927a:	e7f4      	b.n	8009266 <_dtoa_r+0x8ee>
 800927c:	f43f af7d 	beq.w	800917a <_dtoa_r+0x802>
 8009280:	4618      	mov	r0, r3
 8009282:	301c      	adds	r0, #28
 8009284:	e772      	b.n	800916c <_dtoa_r+0x7f4>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc37      	bgt.n	80092fc <_dtoa_r+0x984>
 800928c:	9b06      	ldr	r3, [sp, #24]
 800928e:	2b02      	cmp	r3, #2
 8009290:	dd34      	ble.n	80092fc <_dtoa_r+0x984>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	b96b      	cbnz	r3, 80092b6 <_dtoa_r+0x93e>
 800929a:	4631      	mov	r1, r6
 800929c:	2205      	movs	r2, #5
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f9ca 	bl	8009638 <__multadd>
 80092a4:	4601      	mov	r1, r0
 80092a6:	4606      	mov	r6, r0
 80092a8:	ee18 0a10 	vmov	r0, s16
 80092ac:	f000 fbe4 	bl	8009a78 <__mcmp>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f73f adbb 	bgt.w	8008e2c <_dtoa_r+0x4b4>
 80092b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b8:	9d01      	ldr	r5, [sp, #4]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	4631      	mov	r1, r6
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 f995 	bl	80095f4 <_Bfree>
 80092ca:	2f00      	cmp	r7, #0
 80092cc:	f43f aea4 	beq.w	8009018 <_dtoa_r+0x6a0>
 80092d0:	f1b8 0f00 	cmp.w	r8, #0
 80092d4:	d005      	beq.n	80092e2 <_dtoa_r+0x96a>
 80092d6:	45b8      	cmp	r8, r7
 80092d8:	d003      	beq.n	80092e2 <_dtoa_r+0x96a>
 80092da:	4641      	mov	r1, r8
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f989 	bl	80095f4 <_Bfree>
 80092e2:	4639      	mov	r1, r7
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 f985 	bl	80095f4 <_Bfree>
 80092ea:	e695      	b.n	8009018 <_dtoa_r+0x6a0>
 80092ec:	2600      	movs	r6, #0
 80092ee:	4637      	mov	r7, r6
 80092f0:	e7e1      	b.n	80092b6 <_dtoa_r+0x93e>
 80092f2:	9700      	str	r7, [sp, #0]
 80092f4:	4637      	mov	r7, r6
 80092f6:	e599      	b.n	8008e2c <_dtoa_r+0x4b4>
 80092f8:	40240000 	.word	0x40240000
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 80ca 	beq.w	8009498 <_dtoa_r+0xb20>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	2d00      	cmp	r5, #0
 800930a:	dd05      	ble.n	8009318 <_dtoa_r+0x9a0>
 800930c:	4639      	mov	r1, r7
 800930e:	462a      	mov	r2, r5
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fb41 	bl	8009998 <__lshift>
 8009316:	4607      	mov	r7, r0
 8009318:	f1b8 0f00 	cmp.w	r8, #0
 800931c:	d05b      	beq.n	80093d6 <_dtoa_r+0xa5e>
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f927 	bl	8009574 <_Balloc>
 8009326:	4605      	mov	r5, r0
 8009328:	b928      	cbnz	r0, 8009336 <_dtoa_r+0x9be>
 800932a:	4b87      	ldr	r3, [pc, #540]	; (8009548 <_dtoa_r+0xbd0>)
 800932c:	4602      	mov	r2, r0
 800932e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009332:	f7ff bb3b 	b.w	80089ac <_dtoa_r+0x34>
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	3202      	adds	r2, #2
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	f107 010c 	add.w	r1, r7, #12
 8009340:	300c      	adds	r0, #12
 8009342:	f7fe fcd7 	bl	8007cf4 <memcpy>
 8009346:	2201      	movs	r2, #1
 8009348:	4629      	mov	r1, r5
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fb24 	bl	8009998 <__lshift>
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	f103 0901 	add.w	r9, r3, #1
 8009356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800935a:	4413      	add	r3, r2
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f00a 0301 	and.w	r3, sl, #1
 8009362:	46b8      	mov	r8, r7
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	4607      	mov	r7, r0
 8009368:	4631      	mov	r1, r6
 800936a:	ee18 0a10 	vmov	r0, s16
 800936e:	f7ff fa75 	bl	800885c <quorem>
 8009372:	4641      	mov	r1, r8
 8009374:	9002      	str	r0, [sp, #8]
 8009376:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800937a:	ee18 0a10 	vmov	r0, s16
 800937e:	f000 fb7b 	bl	8009a78 <__mcmp>
 8009382:	463a      	mov	r2, r7
 8009384:	9003      	str	r0, [sp, #12]
 8009386:	4631      	mov	r1, r6
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fb91 	bl	8009ab0 <__mdiff>
 800938e:	68c2      	ldr	r2, [r0, #12]
 8009390:	f109 3bff 	add.w	fp, r9, #4294967295
 8009394:	4605      	mov	r5, r0
 8009396:	bb02      	cbnz	r2, 80093da <_dtoa_r+0xa62>
 8009398:	4601      	mov	r1, r0
 800939a:	ee18 0a10 	vmov	r0, s16
 800939e:	f000 fb6b 	bl	8009a78 <__mcmp>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4629      	mov	r1, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	9207      	str	r2, [sp, #28]
 80093aa:	f000 f923 	bl	80095f4 <_Bfree>
 80093ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80093b2:	ea43 0102 	orr.w	r1, r3, r2
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	430b      	orrs	r3, r1
 80093ba:	464d      	mov	r5, r9
 80093bc:	d10f      	bne.n	80093de <_dtoa_r+0xa66>
 80093be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093c2:	d02a      	beq.n	800941a <_dtoa_r+0xaa2>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd02      	ble.n	80093d0 <_dtoa_r+0xa58>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80093d0:	f88b a000 	strb.w	sl, [fp]
 80093d4:	e775      	b.n	80092c2 <_dtoa_r+0x94a>
 80093d6:	4638      	mov	r0, r7
 80093d8:	e7ba      	b.n	8009350 <_dtoa_r+0x9d8>
 80093da:	2201      	movs	r2, #1
 80093dc:	e7e2      	b.n	80093a4 <_dtoa_r+0xa2c>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db04      	blt.n	80093ee <_dtoa_r+0xa76>
 80093e4:	9906      	ldr	r1, [sp, #24]
 80093e6:	430b      	orrs	r3, r1
 80093e8:	9904      	ldr	r1, [sp, #16]
 80093ea:	430b      	orrs	r3, r1
 80093ec:	d122      	bne.n	8009434 <_dtoa_r+0xabc>
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	ddee      	ble.n	80093d0 <_dtoa_r+0xa58>
 80093f2:	ee18 1a10 	vmov	r1, s16
 80093f6:	2201      	movs	r2, #1
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 facd 	bl	8009998 <__lshift>
 80093fe:	4631      	mov	r1, r6
 8009400:	ee08 0a10 	vmov	s16, r0
 8009404:	f000 fb38 	bl	8009a78 <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	dc03      	bgt.n	8009414 <_dtoa_r+0xa9c>
 800940c:	d1e0      	bne.n	80093d0 <_dtoa_r+0xa58>
 800940e:	f01a 0f01 	tst.w	sl, #1
 8009412:	d0dd      	beq.n	80093d0 <_dtoa_r+0xa58>
 8009414:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009418:	d1d7      	bne.n	80093ca <_dtoa_r+0xa52>
 800941a:	2339      	movs	r3, #57	; 0x39
 800941c:	f88b 3000 	strb.w	r3, [fp]
 8009420:	462b      	mov	r3, r5
 8009422:	461d      	mov	r5, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800942a:	2a39      	cmp	r2, #57	; 0x39
 800942c:	d071      	beq.n	8009512 <_dtoa_r+0xb9a>
 800942e:	3201      	adds	r2, #1
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	e746      	b.n	80092c2 <_dtoa_r+0x94a>
 8009434:	2a00      	cmp	r2, #0
 8009436:	dd07      	ble.n	8009448 <_dtoa_r+0xad0>
 8009438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800943c:	d0ed      	beq.n	800941a <_dtoa_r+0xaa2>
 800943e:	f10a 0301 	add.w	r3, sl, #1
 8009442:	f88b 3000 	strb.w	r3, [fp]
 8009446:	e73c      	b.n	80092c2 <_dtoa_r+0x94a>
 8009448:	9b05      	ldr	r3, [sp, #20]
 800944a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800944e:	4599      	cmp	r9, r3
 8009450:	d047      	beq.n	80094e2 <_dtoa_r+0xb6a>
 8009452:	ee18 1a10 	vmov	r1, s16
 8009456:	2300      	movs	r3, #0
 8009458:	220a      	movs	r2, #10
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f8ec 	bl	8009638 <__multadd>
 8009460:	45b8      	cmp	r8, r7
 8009462:	ee08 0a10 	vmov	s16, r0
 8009466:	f04f 0300 	mov.w	r3, #0
 800946a:	f04f 020a 	mov.w	r2, #10
 800946e:	4641      	mov	r1, r8
 8009470:	4620      	mov	r0, r4
 8009472:	d106      	bne.n	8009482 <_dtoa_r+0xb0a>
 8009474:	f000 f8e0 	bl	8009638 <__multadd>
 8009478:	4680      	mov	r8, r0
 800947a:	4607      	mov	r7, r0
 800947c:	f109 0901 	add.w	r9, r9, #1
 8009480:	e772      	b.n	8009368 <_dtoa_r+0x9f0>
 8009482:	f000 f8d9 	bl	8009638 <__multadd>
 8009486:	4639      	mov	r1, r7
 8009488:	4680      	mov	r8, r0
 800948a:	2300      	movs	r3, #0
 800948c:	220a      	movs	r2, #10
 800948e:	4620      	mov	r0, r4
 8009490:	f000 f8d2 	bl	8009638 <__multadd>
 8009494:	4607      	mov	r7, r0
 8009496:	e7f1      	b.n	800947c <_dtoa_r+0xb04>
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	9302      	str	r3, [sp, #8]
 800949c:	9d01      	ldr	r5, [sp, #4]
 800949e:	ee18 0a10 	vmov	r0, s16
 80094a2:	4631      	mov	r1, r6
 80094a4:	f7ff f9da 	bl	800885c <quorem>
 80094a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	f805 ab01 	strb.w	sl, [r5], #1
 80094b2:	1aea      	subs	r2, r5, r3
 80094b4:	9b02      	ldr	r3, [sp, #8]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	dd09      	ble.n	80094ce <_dtoa_r+0xb56>
 80094ba:	ee18 1a10 	vmov	r1, s16
 80094be:	2300      	movs	r3, #0
 80094c0:	220a      	movs	r2, #10
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f8b8 	bl	8009638 <__multadd>
 80094c8:	ee08 0a10 	vmov	s16, r0
 80094cc:	e7e7      	b.n	800949e <_dtoa_r+0xb26>
 80094ce:	9b02      	ldr	r3, [sp, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bfc8      	it	gt
 80094d4:	461d      	movgt	r5, r3
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	bfd8      	it	le
 80094da:	2501      	movle	r5, #1
 80094dc:	441d      	add	r5, r3
 80094de:	f04f 0800 	mov.w	r8, #0
 80094e2:	ee18 1a10 	vmov	r1, s16
 80094e6:	2201      	movs	r2, #1
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fa55 	bl	8009998 <__lshift>
 80094ee:	4631      	mov	r1, r6
 80094f0:	ee08 0a10 	vmov	s16, r0
 80094f4:	f000 fac0 	bl	8009a78 <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	dc91      	bgt.n	8009420 <_dtoa_r+0xaa8>
 80094fc:	d102      	bne.n	8009504 <_dtoa_r+0xb8c>
 80094fe:	f01a 0f01 	tst.w	sl, #1
 8009502:	d18d      	bne.n	8009420 <_dtoa_r+0xaa8>
 8009504:	462b      	mov	r3, r5
 8009506:	461d      	mov	r5, r3
 8009508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800950c:	2a30      	cmp	r2, #48	; 0x30
 800950e:	d0fa      	beq.n	8009506 <_dtoa_r+0xb8e>
 8009510:	e6d7      	b.n	80092c2 <_dtoa_r+0x94a>
 8009512:	9a01      	ldr	r2, [sp, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d184      	bne.n	8009422 <_dtoa_r+0xaaa>
 8009518:	9b00      	ldr	r3, [sp, #0]
 800951a:	3301      	adds	r3, #1
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	2331      	movs	r3, #49	; 0x31
 8009520:	7013      	strb	r3, [r2, #0]
 8009522:	e6ce      	b.n	80092c2 <_dtoa_r+0x94a>
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <_dtoa_r+0xbd4>)
 8009526:	f7ff ba95 	b.w	8008a54 <_dtoa_r+0xdc>
 800952a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800952c:	2b00      	cmp	r3, #0
 800952e:	f47f aa6e 	bne.w	8008a0e <_dtoa_r+0x96>
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <_dtoa_r+0xbd8>)
 8009534:	f7ff ba8e 	b.w	8008a54 <_dtoa_r+0xdc>
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	dcae      	bgt.n	800949c <_dtoa_r+0xb24>
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	2b02      	cmp	r3, #2
 8009542:	f73f aea8 	bgt.w	8009296 <_dtoa_r+0x91e>
 8009546:	e7a9      	b.n	800949c <_dtoa_r+0xb24>
 8009548:	0800a933 	.word	0x0800a933
 800954c:	0800a890 	.word	0x0800a890
 8009550:	0800a8b4 	.word	0x0800a8b4

08009554 <_localeconv_r>:
 8009554:	4800      	ldr	r0, [pc, #0]	; (8009558 <_localeconv_r+0x4>)
 8009556:	4770      	bx	lr
 8009558:	20000184 	.word	0x20000184

0800955c <__malloc_lock>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__malloc_lock+0x8>)
 800955e:	f000 bbd4 	b.w	8009d0a <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	20004c04 	.word	0x20004c04

08009568 <__malloc_unlock>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__malloc_unlock+0x8>)
 800956a:	f000 bbcf 	b.w	8009d0c <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	20004c04 	.word	0x20004c04

08009574 <_Balloc>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009578:	4604      	mov	r4, r0
 800957a:	460d      	mov	r5, r1
 800957c:	b976      	cbnz	r6, 800959c <_Balloc+0x28>
 800957e:	2010      	movs	r0, #16
 8009580:	f7fe fba8 	bl	8007cd4 <malloc>
 8009584:	4602      	mov	r2, r0
 8009586:	6260      	str	r0, [r4, #36]	; 0x24
 8009588:	b920      	cbnz	r0, 8009594 <_Balloc+0x20>
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <_Balloc+0x78>)
 800958c:	4818      	ldr	r0, [pc, #96]	; (80095f0 <_Balloc+0x7c>)
 800958e:	2166      	movs	r1, #102	; 0x66
 8009590:	f000 fb8a 	bl	8009ca8 <__assert_func>
 8009594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009598:	6006      	str	r6, [r0, #0]
 800959a:	60c6      	str	r6, [r0, #12]
 800959c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800959e:	68f3      	ldr	r3, [r6, #12]
 80095a0:	b183      	cbz	r3, 80095c4 <_Balloc+0x50>
 80095a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095aa:	b9b8      	cbnz	r0, 80095dc <_Balloc+0x68>
 80095ac:	2101      	movs	r1, #1
 80095ae:	fa01 f605 	lsl.w	r6, r1, r5
 80095b2:	1d72      	adds	r2, r6, #5
 80095b4:	0092      	lsls	r2, r2, #2
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 fb60 	bl	8009c7c <_calloc_r>
 80095bc:	b160      	cbz	r0, 80095d8 <_Balloc+0x64>
 80095be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095c2:	e00e      	b.n	80095e2 <_Balloc+0x6e>
 80095c4:	2221      	movs	r2, #33	; 0x21
 80095c6:	2104      	movs	r1, #4
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fb57 	bl	8009c7c <_calloc_r>
 80095ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d0:	60f0      	str	r0, [r6, #12]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e4      	bne.n	80095a2 <_Balloc+0x2e>
 80095d8:	2000      	movs	r0, #0
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	6802      	ldr	r2, [r0, #0]
 80095de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095e2:	2300      	movs	r3, #0
 80095e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095e8:	e7f7      	b.n	80095da <_Balloc+0x66>
 80095ea:	bf00      	nop
 80095ec:	0800a8c1 	.word	0x0800a8c1
 80095f0:	0800a944 	.word	0x0800a944

080095f4 <_Bfree>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095f8:	4605      	mov	r5, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	b976      	cbnz	r6, 800961c <_Bfree+0x28>
 80095fe:	2010      	movs	r0, #16
 8009600:	f7fe fb68 	bl	8007cd4 <malloc>
 8009604:	4602      	mov	r2, r0
 8009606:	6268      	str	r0, [r5, #36]	; 0x24
 8009608:	b920      	cbnz	r0, 8009614 <_Bfree+0x20>
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <_Bfree+0x3c>)
 800960c:	4809      	ldr	r0, [pc, #36]	; (8009634 <_Bfree+0x40>)
 800960e:	218a      	movs	r1, #138	; 0x8a
 8009610:	f000 fb4a 	bl	8009ca8 <__assert_func>
 8009614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009618:	6006      	str	r6, [r0, #0]
 800961a:	60c6      	str	r6, [r0, #12]
 800961c:	b13c      	cbz	r4, 800962e <_Bfree+0x3a>
 800961e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009620:	6862      	ldr	r2, [r4, #4]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009628:	6021      	str	r1, [r4, #0]
 800962a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	0800a8c1 	.word	0x0800a8c1
 8009634:	0800a944 	.word	0x0800a944

08009638 <__multadd>:
 8009638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963c:	690d      	ldr	r5, [r1, #16]
 800963e:	4607      	mov	r7, r0
 8009640:	460c      	mov	r4, r1
 8009642:	461e      	mov	r6, r3
 8009644:	f101 0c14 	add.w	ip, r1, #20
 8009648:	2000      	movs	r0, #0
 800964a:	f8dc 3000 	ldr.w	r3, [ip]
 800964e:	b299      	uxth	r1, r3
 8009650:	fb02 6101 	mla	r1, r2, r1, r6
 8009654:	0c1e      	lsrs	r6, r3, #16
 8009656:	0c0b      	lsrs	r3, r1, #16
 8009658:	fb02 3306 	mla	r3, r2, r6, r3
 800965c:	b289      	uxth	r1, r1
 800965e:	3001      	adds	r0, #1
 8009660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009664:	4285      	cmp	r5, r0
 8009666:	f84c 1b04 	str.w	r1, [ip], #4
 800966a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800966e:	dcec      	bgt.n	800964a <__multadd+0x12>
 8009670:	b30e      	cbz	r6, 80096b6 <__multadd+0x7e>
 8009672:	68a3      	ldr	r3, [r4, #8]
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc19      	bgt.n	80096ac <__multadd+0x74>
 8009678:	6861      	ldr	r1, [r4, #4]
 800967a:	4638      	mov	r0, r7
 800967c:	3101      	adds	r1, #1
 800967e:	f7ff ff79 	bl	8009574 <_Balloc>
 8009682:	4680      	mov	r8, r0
 8009684:	b928      	cbnz	r0, 8009692 <__multadd+0x5a>
 8009686:	4602      	mov	r2, r0
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <__multadd+0x84>)
 800968a:	480d      	ldr	r0, [pc, #52]	; (80096c0 <__multadd+0x88>)
 800968c:	21b5      	movs	r1, #181	; 0xb5
 800968e:	f000 fb0b 	bl	8009ca8 <__assert_func>
 8009692:	6922      	ldr	r2, [r4, #16]
 8009694:	3202      	adds	r2, #2
 8009696:	f104 010c 	add.w	r1, r4, #12
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	300c      	adds	r0, #12
 800969e:	f7fe fb29 	bl	8007cf4 <memcpy>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff ffa5 	bl	80095f4 <_Bfree>
 80096aa:	4644      	mov	r4, r8
 80096ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096b0:	3501      	adds	r5, #1
 80096b2:	615e      	str	r6, [r3, #20]
 80096b4:	6125      	str	r5, [r4, #16]
 80096b6:	4620      	mov	r0, r4
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	0800a933 	.word	0x0800a933
 80096c0:	0800a944 	.word	0x0800a944

080096c4 <__hi0bits>:
 80096c4:	0c03      	lsrs	r3, r0, #16
 80096c6:	041b      	lsls	r3, r3, #16
 80096c8:	b9d3      	cbnz	r3, 8009700 <__hi0bits+0x3c>
 80096ca:	0400      	lsls	r0, r0, #16
 80096cc:	2310      	movs	r3, #16
 80096ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096d2:	bf04      	itt	eq
 80096d4:	0200      	lsleq	r0, r0, #8
 80096d6:	3308      	addeq	r3, #8
 80096d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096dc:	bf04      	itt	eq
 80096de:	0100      	lsleq	r0, r0, #4
 80096e0:	3304      	addeq	r3, #4
 80096e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096e6:	bf04      	itt	eq
 80096e8:	0080      	lsleq	r0, r0, #2
 80096ea:	3302      	addeq	r3, #2
 80096ec:	2800      	cmp	r0, #0
 80096ee:	db05      	blt.n	80096fc <__hi0bits+0x38>
 80096f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096f4:	f103 0301 	add.w	r3, r3, #1
 80096f8:	bf08      	it	eq
 80096fa:	2320      	moveq	r3, #32
 80096fc:	4618      	mov	r0, r3
 80096fe:	4770      	bx	lr
 8009700:	2300      	movs	r3, #0
 8009702:	e7e4      	b.n	80096ce <__hi0bits+0xa>

08009704 <__lo0bits>:
 8009704:	6803      	ldr	r3, [r0, #0]
 8009706:	f013 0207 	ands.w	r2, r3, #7
 800970a:	4601      	mov	r1, r0
 800970c:	d00b      	beq.n	8009726 <__lo0bits+0x22>
 800970e:	07da      	lsls	r2, r3, #31
 8009710:	d423      	bmi.n	800975a <__lo0bits+0x56>
 8009712:	0798      	lsls	r0, r3, #30
 8009714:	bf49      	itett	mi
 8009716:	085b      	lsrmi	r3, r3, #1
 8009718:	089b      	lsrpl	r3, r3, #2
 800971a:	2001      	movmi	r0, #1
 800971c:	600b      	strmi	r3, [r1, #0]
 800971e:	bf5c      	itt	pl
 8009720:	600b      	strpl	r3, [r1, #0]
 8009722:	2002      	movpl	r0, #2
 8009724:	4770      	bx	lr
 8009726:	b298      	uxth	r0, r3
 8009728:	b9a8      	cbnz	r0, 8009756 <__lo0bits+0x52>
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	2010      	movs	r0, #16
 800972e:	b2da      	uxtb	r2, r3
 8009730:	b90a      	cbnz	r2, 8009736 <__lo0bits+0x32>
 8009732:	3008      	adds	r0, #8
 8009734:	0a1b      	lsrs	r3, r3, #8
 8009736:	071a      	lsls	r2, r3, #28
 8009738:	bf04      	itt	eq
 800973a:	091b      	lsreq	r3, r3, #4
 800973c:	3004      	addeq	r0, #4
 800973e:	079a      	lsls	r2, r3, #30
 8009740:	bf04      	itt	eq
 8009742:	089b      	lsreq	r3, r3, #2
 8009744:	3002      	addeq	r0, #2
 8009746:	07da      	lsls	r2, r3, #31
 8009748:	d403      	bmi.n	8009752 <__lo0bits+0x4e>
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	f100 0001 	add.w	r0, r0, #1
 8009750:	d005      	beq.n	800975e <__lo0bits+0x5a>
 8009752:	600b      	str	r3, [r1, #0]
 8009754:	4770      	bx	lr
 8009756:	4610      	mov	r0, r2
 8009758:	e7e9      	b.n	800972e <__lo0bits+0x2a>
 800975a:	2000      	movs	r0, #0
 800975c:	4770      	bx	lr
 800975e:	2020      	movs	r0, #32
 8009760:	4770      	bx	lr
	...

08009764 <__i2b>:
 8009764:	b510      	push	{r4, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	2101      	movs	r1, #1
 800976a:	f7ff ff03 	bl	8009574 <_Balloc>
 800976e:	4602      	mov	r2, r0
 8009770:	b928      	cbnz	r0, 800977e <__i2b+0x1a>
 8009772:	4b05      	ldr	r3, [pc, #20]	; (8009788 <__i2b+0x24>)
 8009774:	4805      	ldr	r0, [pc, #20]	; (800978c <__i2b+0x28>)
 8009776:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800977a:	f000 fa95 	bl	8009ca8 <__assert_func>
 800977e:	2301      	movs	r3, #1
 8009780:	6144      	str	r4, [r0, #20]
 8009782:	6103      	str	r3, [r0, #16]
 8009784:	bd10      	pop	{r4, pc}
 8009786:	bf00      	nop
 8009788:	0800a933 	.word	0x0800a933
 800978c:	0800a944 	.word	0x0800a944

08009790 <__multiply>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	4691      	mov	r9, r2
 8009796:	690a      	ldr	r2, [r1, #16]
 8009798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800979c:	429a      	cmp	r2, r3
 800979e:	bfb8      	it	lt
 80097a0:	460b      	movlt	r3, r1
 80097a2:	460c      	mov	r4, r1
 80097a4:	bfbc      	itt	lt
 80097a6:	464c      	movlt	r4, r9
 80097a8:	4699      	movlt	r9, r3
 80097aa:	6927      	ldr	r7, [r4, #16]
 80097ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	6861      	ldr	r1, [r4, #4]
 80097b4:	eb07 060a 	add.w	r6, r7, sl
 80097b8:	42b3      	cmp	r3, r6
 80097ba:	b085      	sub	sp, #20
 80097bc:	bfb8      	it	lt
 80097be:	3101      	addlt	r1, #1
 80097c0:	f7ff fed8 	bl	8009574 <_Balloc>
 80097c4:	b930      	cbnz	r0, 80097d4 <__multiply+0x44>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b44      	ldr	r3, [pc, #272]	; (80098dc <__multiply+0x14c>)
 80097ca:	4845      	ldr	r0, [pc, #276]	; (80098e0 <__multiply+0x150>)
 80097cc:	f240 115d 	movw	r1, #349	; 0x15d
 80097d0:	f000 fa6a 	bl	8009ca8 <__assert_func>
 80097d4:	f100 0514 	add.w	r5, r0, #20
 80097d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097dc:	462b      	mov	r3, r5
 80097de:	2200      	movs	r2, #0
 80097e0:	4543      	cmp	r3, r8
 80097e2:	d321      	bcc.n	8009828 <__multiply+0x98>
 80097e4:	f104 0314 	add.w	r3, r4, #20
 80097e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80097ec:	f109 0314 	add.w	r3, r9, #20
 80097f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80097f4:	9202      	str	r2, [sp, #8]
 80097f6:	1b3a      	subs	r2, r7, r4
 80097f8:	3a15      	subs	r2, #21
 80097fa:	f022 0203 	bic.w	r2, r2, #3
 80097fe:	3204      	adds	r2, #4
 8009800:	f104 0115 	add.w	r1, r4, #21
 8009804:	428f      	cmp	r7, r1
 8009806:	bf38      	it	cc
 8009808:	2204      	movcc	r2, #4
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9a02      	ldr	r2, [sp, #8]
 800980e:	9303      	str	r3, [sp, #12]
 8009810:	429a      	cmp	r2, r3
 8009812:	d80c      	bhi.n	800982e <__multiply+0x9e>
 8009814:	2e00      	cmp	r6, #0
 8009816:	dd03      	ble.n	8009820 <__multiply+0x90>
 8009818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800981c:	2b00      	cmp	r3, #0
 800981e:	d05a      	beq.n	80098d6 <__multiply+0x146>
 8009820:	6106      	str	r6, [r0, #16]
 8009822:	b005      	add	sp, #20
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	f843 2b04 	str.w	r2, [r3], #4
 800982c:	e7d8      	b.n	80097e0 <__multiply+0x50>
 800982e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009832:	f1ba 0f00 	cmp.w	sl, #0
 8009836:	d024      	beq.n	8009882 <__multiply+0xf2>
 8009838:	f104 0e14 	add.w	lr, r4, #20
 800983c:	46a9      	mov	r9, r5
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009846:	f8d9 1000 	ldr.w	r1, [r9]
 800984a:	fa1f fb82 	uxth.w	fp, r2
 800984e:	b289      	uxth	r1, r1
 8009850:	fb0a 110b 	mla	r1, sl, fp, r1
 8009854:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009858:	f8d9 2000 	ldr.w	r2, [r9]
 800985c:	4461      	add	r1, ip
 800985e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009862:	fb0a c20b 	mla	r2, sl, fp, ip
 8009866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800986a:	b289      	uxth	r1, r1
 800986c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009870:	4577      	cmp	r7, lr
 8009872:	f849 1b04 	str.w	r1, [r9], #4
 8009876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800987a:	d8e2      	bhi.n	8009842 <__multiply+0xb2>
 800987c:	9a01      	ldr	r2, [sp, #4]
 800987e:	f845 c002 	str.w	ip, [r5, r2]
 8009882:	9a03      	ldr	r2, [sp, #12]
 8009884:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009888:	3304      	adds	r3, #4
 800988a:	f1b9 0f00 	cmp.w	r9, #0
 800988e:	d020      	beq.n	80098d2 <__multiply+0x142>
 8009890:	6829      	ldr	r1, [r5, #0]
 8009892:	f104 0c14 	add.w	ip, r4, #20
 8009896:	46ae      	mov	lr, r5
 8009898:	f04f 0a00 	mov.w	sl, #0
 800989c:	f8bc b000 	ldrh.w	fp, [ip]
 80098a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098a4:	fb09 220b 	mla	r2, r9, fp, r2
 80098a8:	4492      	add	sl, r2
 80098aa:	b289      	uxth	r1, r1
 80098ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098b0:	f84e 1b04 	str.w	r1, [lr], #4
 80098b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098b8:	f8be 1000 	ldrh.w	r1, [lr]
 80098bc:	0c12      	lsrs	r2, r2, #16
 80098be:	fb09 1102 	mla	r1, r9, r2, r1
 80098c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098c6:	4567      	cmp	r7, ip
 80098c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098cc:	d8e6      	bhi.n	800989c <__multiply+0x10c>
 80098ce:	9a01      	ldr	r2, [sp, #4]
 80098d0:	50a9      	str	r1, [r5, r2]
 80098d2:	3504      	adds	r5, #4
 80098d4:	e79a      	b.n	800980c <__multiply+0x7c>
 80098d6:	3e01      	subs	r6, #1
 80098d8:	e79c      	b.n	8009814 <__multiply+0x84>
 80098da:	bf00      	nop
 80098dc:	0800a933 	.word	0x0800a933
 80098e0:	0800a944 	.word	0x0800a944

080098e4 <__pow5mult>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4615      	mov	r5, r2
 80098ea:	f012 0203 	ands.w	r2, r2, #3
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	d007      	beq.n	8009904 <__pow5mult+0x20>
 80098f4:	4c25      	ldr	r4, [pc, #148]	; (800998c <__pow5mult+0xa8>)
 80098f6:	3a01      	subs	r2, #1
 80098f8:	2300      	movs	r3, #0
 80098fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098fe:	f7ff fe9b 	bl	8009638 <__multadd>
 8009902:	4607      	mov	r7, r0
 8009904:	10ad      	asrs	r5, r5, #2
 8009906:	d03d      	beq.n	8009984 <__pow5mult+0xa0>
 8009908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800990a:	b97c      	cbnz	r4, 800992c <__pow5mult+0x48>
 800990c:	2010      	movs	r0, #16
 800990e:	f7fe f9e1 	bl	8007cd4 <malloc>
 8009912:	4602      	mov	r2, r0
 8009914:	6270      	str	r0, [r6, #36]	; 0x24
 8009916:	b928      	cbnz	r0, 8009924 <__pow5mult+0x40>
 8009918:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <__pow5mult+0xac>)
 800991a:	481e      	ldr	r0, [pc, #120]	; (8009994 <__pow5mult+0xb0>)
 800991c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009920:	f000 f9c2 	bl	8009ca8 <__assert_func>
 8009924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009928:	6004      	str	r4, [r0, #0]
 800992a:	60c4      	str	r4, [r0, #12]
 800992c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009934:	b94c      	cbnz	r4, 800994a <__pow5mult+0x66>
 8009936:	f240 2171 	movw	r1, #625	; 0x271
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ff12 	bl	8009764 <__i2b>
 8009940:	2300      	movs	r3, #0
 8009942:	f8c8 0008 	str.w	r0, [r8, #8]
 8009946:	4604      	mov	r4, r0
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	f04f 0900 	mov.w	r9, #0
 800994e:	07eb      	lsls	r3, r5, #31
 8009950:	d50a      	bpl.n	8009968 <__pow5mult+0x84>
 8009952:	4639      	mov	r1, r7
 8009954:	4622      	mov	r2, r4
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ff1a 	bl	8009790 <__multiply>
 800995c:	4639      	mov	r1, r7
 800995e:	4680      	mov	r8, r0
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff fe47 	bl	80095f4 <_Bfree>
 8009966:	4647      	mov	r7, r8
 8009968:	106d      	asrs	r5, r5, #1
 800996a:	d00b      	beq.n	8009984 <__pow5mult+0xa0>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	b938      	cbnz	r0, 8009980 <__pow5mult+0x9c>
 8009970:	4622      	mov	r2, r4
 8009972:	4621      	mov	r1, r4
 8009974:	4630      	mov	r0, r6
 8009976:	f7ff ff0b 	bl	8009790 <__multiply>
 800997a:	6020      	str	r0, [r4, #0]
 800997c:	f8c0 9000 	str.w	r9, [r0]
 8009980:	4604      	mov	r4, r0
 8009982:	e7e4      	b.n	800994e <__pow5mult+0x6a>
 8009984:	4638      	mov	r0, r7
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998a:	bf00      	nop
 800998c:	0800aa90 	.word	0x0800aa90
 8009990:	0800a8c1 	.word	0x0800a8c1
 8009994:	0800a944 	.word	0x0800a944

08009998 <__lshift>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	6849      	ldr	r1, [r1, #4]
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	4607      	mov	r7, r0
 80099aa:	4691      	mov	r9, r2
 80099ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099b0:	f108 0601 	add.w	r6, r8, #1
 80099b4:	42b3      	cmp	r3, r6
 80099b6:	db0b      	blt.n	80099d0 <__lshift+0x38>
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff fddb 	bl	8009574 <_Balloc>
 80099be:	4605      	mov	r5, r0
 80099c0:	b948      	cbnz	r0, 80099d6 <__lshift+0x3e>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b2a      	ldr	r3, [pc, #168]	; (8009a70 <__lshift+0xd8>)
 80099c6:	482b      	ldr	r0, [pc, #172]	; (8009a74 <__lshift+0xdc>)
 80099c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099cc:	f000 f96c 	bl	8009ca8 <__assert_func>
 80099d0:	3101      	adds	r1, #1
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	e7ee      	b.n	80099b4 <__lshift+0x1c>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f100 0114 	add.w	r1, r0, #20
 80099dc:	f100 0210 	add.w	r2, r0, #16
 80099e0:	4618      	mov	r0, r3
 80099e2:	4553      	cmp	r3, sl
 80099e4:	db37      	blt.n	8009a56 <__lshift+0xbe>
 80099e6:	6920      	ldr	r0, [r4, #16]
 80099e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099ec:	f104 0314 	add.w	r3, r4, #20
 80099f0:	f019 091f 	ands.w	r9, r9, #31
 80099f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099fc:	d02f      	beq.n	8009a5e <__lshift+0xc6>
 80099fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009a02:	468a      	mov	sl, r1
 8009a04:	f04f 0c00 	mov.w	ip, #0
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	fa02 f209 	lsl.w	r2, r2, r9
 8009a0e:	ea42 020c 	orr.w	r2, r2, ip
 8009a12:	f84a 2b04 	str.w	r2, [sl], #4
 8009a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1a:	4298      	cmp	r0, r3
 8009a1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a20:	d8f2      	bhi.n	8009a08 <__lshift+0x70>
 8009a22:	1b03      	subs	r3, r0, r4
 8009a24:	3b15      	subs	r3, #21
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	f104 0215 	add.w	r2, r4, #21
 8009a30:	4290      	cmp	r0, r2
 8009a32:	bf38      	it	cc
 8009a34:	2304      	movcc	r3, #4
 8009a36:	f841 c003 	str.w	ip, [r1, r3]
 8009a3a:	f1bc 0f00 	cmp.w	ip, #0
 8009a3e:	d001      	beq.n	8009a44 <__lshift+0xac>
 8009a40:	f108 0602 	add.w	r6, r8, #2
 8009a44:	3e01      	subs	r6, #1
 8009a46:	4638      	mov	r0, r7
 8009a48:	612e      	str	r6, [r5, #16]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f7ff fdd2 	bl	80095f4 <_Bfree>
 8009a50:	4628      	mov	r0, r5
 8009a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	e7c1      	b.n	80099e2 <__lshift+0x4a>
 8009a5e:	3904      	subs	r1, #4
 8009a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a68:	4298      	cmp	r0, r3
 8009a6a:	d8f9      	bhi.n	8009a60 <__lshift+0xc8>
 8009a6c:	e7ea      	b.n	8009a44 <__lshift+0xac>
 8009a6e:	bf00      	nop
 8009a70:	0800a933 	.word	0x0800a933
 8009a74:	0800a944 	.word	0x0800a944

08009a78 <__mcmp>:
 8009a78:	b530      	push	{r4, r5, lr}
 8009a7a:	6902      	ldr	r2, [r0, #16]
 8009a7c:	690c      	ldr	r4, [r1, #16]
 8009a7e:	1b12      	subs	r2, r2, r4
 8009a80:	d10e      	bne.n	8009aa0 <__mcmp+0x28>
 8009a82:	f100 0314 	add.w	r3, r0, #20
 8009a86:	3114      	adds	r1, #20
 8009a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a98:	42a5      	cmp	r5, r4
 8009a9a:	d003      	beq.n	8009aa4 <__mcmp+0x2c>
 8009a9c:	d305      	bcc.n	8009aaa <__mcmp+0x32>
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	bd30      	pop	{r4, r5, pc}
 8009aa4:	4283      	cmp	r3, r0
 8009aa6:	d3f3      	bcc.n	8009a90 <__mcmp+0x18>
 8009aa8:	e7fa      	b.n	8009aa0 <__mcmp+0x28>
 8009aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009aae:	e7f7      	b.n	8009aa0 <__mcmp+0x28>

08009ab0 <__mdiff>:
 8009ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4620      	mov	r0, r4
 8009abc:	4690      	mov	r8, r2
 8009abe:	f7ff ffdb 	bl	8009a78 <__mcmp>
 8009ac2:	1e05      	subs	r5, r0, #0
 8009ac4:	d110      	bne.n	8009ae8 <__mdiff+0x38>
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff fd53 	bl	8009574 <_Balloc>
 8009ace:	b930      	cbnz	r0, 8009ade <__mdiff+0x2e>
 8009ad0:	4b3a      	ldr	r3, [pc, #232]	; (8009bbc <__mdiff+0x10c>)
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	f240 2132 	movw	r1, #562	; 0x232
 8009ad8:	4839      	ldr	r0, [pc, #228]	; (8009bc0 <__mdiff+0x110>)
 8009ada:	f000 f8e5 	bl	8009ca8 <__assert_func>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	bfa4      	itt	ge
 8009aea:	4643      	movge	r3, r8
 8009aec:	46a0      	movge	r8, r4
 8009aee:	4630      	mov	r0, r6
 8009af0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009af4:	bfa6      	itte	ge
 8009af6:	461c      	movge	r4, r3
 8009af8:	2500      	movge	r5, #0
 8009afa:	2501      	movlt	r5, #1
 8009afc:	f7ff fd3a 	bl	8009574 <_Balloc>
 8009b00:	b920      	cbnz	r0, 8009b0c <__mdiff+0x5c>
 8009b02:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <__mdiff+0x10c>)
 8009b04:	4602      	mov	r2, r0
 8009b06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b0a:	e7e5      	b.n	8009ad8 <__mdiff+0x28>
 8009b0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b10:	6926      	ldr	r6, [r4, #16]
 8009b12:	60c5      	str	r5, [r0, #12]
 8009b14:	f104 0914 	add.w	r9, r4, #20
 8009b18:	f108 0514 	add.w	r5, r8, #20
 8009b1c:	f100 0e14 	add.w	lr, r0, #20
 8009b20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b28:	f108 0210 	add.w	r2, r8, #16
 8009b2c:	46f2      	mov	sl, lr
 8009b2e:	2100      	movs	r1, #0
 8009b30:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b38:	fa1f f883 	uxth.w	r8, r3
 8009b3c:	fa11 f18b 	uxtah	r1, r1, fp
 8009b40:	0c1b      	lsrs	r3, r3, #16
 8009b42:	eba1 0808 	sub.w	r8, r1, r8
 8009b46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b4e:	fa1f f888 	uxth.w	r8, r8
 8009b52:	1419      	asrs	r1, r3, #16
 8009b54:	454e      	cmp	r6, r9
 8009b56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8009b5e:	d8e7      	bhi.n	8009b30 <__mdiff+0x80>
 8009b60:	1b33      	subs	r3, r6, r4
 8009b62:	3b15      	subs	r3, #21
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	3304      	adds	r3, #4
 8009b6a:	3415      	adds	r4, #21
 8009b6c:	42a6      	cmp	r6, r4
 8009b6e:	bf38      	it	cc
 8009b70:	2304      	movcc	r3, #4
 8009b72:	441d      	add	r5, r3
 8009b74:	4473      	add	r3, lr
 8009b76:	469e      	mov	lr, r3
 8009b78:	462e      	mov	r6, r5
 8009b7a:	4566      	cmp	r6, ip
 8009b7c:	d30e      	bcc.n	8009b9c <__mdiff+0xec>
 8009b7e:	f10c 0203 	add.w	r2, ip, #3
 8009b82:	1b52      	subs	r2, r2, r5
 8009b84:	f022 0203 	bic.w	r2, r2, #3
 8009b88:	3d03      	subs	r5, #3
 8009b8a:	45ac      	cmp	ip, r5
 8009b8c:	bf38      	it	cc
 8009b8e:	2200      	movcc	r2, #0
 8009b90:	441a      	add	r2, r3
 8009b92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b96:	b17b      	cbz	r3, 8009bb8 <__mdiff+0x108>
 8009b98:	6107      	str	r7, [r0, #16]
 8009b9a:	e7a3      	b.n	8009ae4 <__mdiff+0x34>
 8009b9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ba0:	fa11 f288 	uxtah	r2, r1, r8
 8009ba4:	1414      	asrs	r4, r2, #16
 8009ba6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009baa:	b292      	uxth	r2, r2
 8009bac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bb0:	f84e 2b04 	str.w	r2, [lr], #4
 8009bb4:	1421      	asrs	r1, r4, #16
 8009bb6:	e7e0      	b.n	8009b7a <__mdiff+0xca>
 8009bb8:	3f01      	subs	r7, #1
 8009bba:	e7ea      	b.n	8009b92 <__mdiff+0xe2>
 8009bbc:	0800a933 	.word	0x0800a933
 8009bc0:	0800a944 	.word	0x0800a944

08009bc4 <__d2b>:
 8009bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4689      	mov	r9, r1
 8009bca:	2101      	movs	r1, #1
 8009bcc:	ec57 6b10 	vmov	r6, r7, d0
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	f7ff fccf 	bl	8009574 <_Balloc>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b930      	cbnz	r0, 8009be8 <__d2b+0x24>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <__d2b+0xb0>)
 8009bde:	4826      	ldr	r0, [pc, #152]	; (8009c78 <__d2b+0xb4>)
 8009be0:	f240 310a 	movw	r1, #778	; 0x30a
 8009be4:	f000 f860 	bl	8009ca8 <__assert_func>
 8009be8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bf0:	bb35      	cbnz	r5, 8009c40 <__d2b+0x7c>
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	d028      	beq.n	8009c4a <__d2b+0x86>
 8009bf8:	4668      	mov	r0, sp
 8009bfa:	9600      	str	r6, [sp, #0]
 8009bfc:	f7ff fd82 	bl	8009704 <__lo0bits>
 8009c00:	9900      	ldr	r1, [sp, #0]
 8009c02:	b300      	cbz	r0, 8009c46 <__d2b+0x82>
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	f1c0 0320 	rsb	r3, r0, #32
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	40c2      	lsrs	r2, r0
 8009c12:	6163      	str	r3, [r4, #20]
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	61a3      	str	r3, [r4, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bf14      	ite	ne
 8009c1e:	2202      	movne	r2, #2
 8009c20:	2201      	moveq	r2, #1
 8009c22:	6122      	str	r2, [r4, #16]
 8009c24:	b1d5      	cbz	r5, 8009c5c <__d2b+0x98>
 8009c26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c2a:	4405      	add	r5, r0
 8009c2c:	f8c9 5000 	str.w	r5, [r9]
 8009c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c34:	f8c8 0000 	str.w	r0, [r8]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	b003      	add	sp, #12
 8009c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c44:	e7d5      	b.n	8009bf2 <__d2b+0x2e>
 8009c46:	6161      	str	r1, [r4, #20]
 8009c48:	e7e5      	b.n	8009c16 <__d2b+0x52>
 8009c4a:	a801      	add	r0, sp, #4
 8009c4c:	f7ff fd5a 	bl	8009704 <__lo0bits>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	6163      	str	r3, [r4, #20]
 8009c54:	2201      	movs	r2, #1
 8009c56:	6122      	str	r2, [r4, #16]
 8009c58:	3020      	adds	r0, #32
 8009c5a:	e7e3      	b.n	8009c24 <__d2b+0x60>
 8009c5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c64:	f8c9 0000 	str.w	r0, [r9]
 8009c68:	6918      	ldr	r0, [r3, #16]
 8009c6a:	f7ff fd2b 	bl	80096c4 <__hi0bits>
 8009c6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c72:	e7df      	b.n	8009c34 <__d2b+0x70>
 8009c74:	0800a933 	.word	0x0800a933
 8009c78:	0800a944 	.word	0x0800a944

08009c7c <_calloc_r>:
 8009c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7e:	fba1 2402 	umull	r2, r4, r1, r2
 8009c82:	b94c      	cbnz	r4, 8009c98 <_calloc_r+0x1c>
 8009c84:	4611      	mov	r1, r2
 8009c86:	9201      	str	r2, [sp, #4]
 8009c88:	f7fe f8b6 	bl	8007df8 <_malloc_r>
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b930      	cbnz	r0, 8009ca0 <_calloc_r+0x24>
 8009c92:	4628      	mov	r0, r5
 8009c94:	b003      	add	sp, #12
 8009c96:	bd30      	pop	{r4, r5, pc}
 8009c98:	220c      	movs	r2, #12
 8009c9a:	6002      	str	r2, [r0, #0]
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	e7f8      	b.n	8009c92 <_calloc_r+0x16>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	f7fe f835 	bl	8007d10 <memset>
 8009ca6:	e7f4      	b.n	8009c92 <_calloc_r+0x16>

08009ca8 <__assert_func>:
 8009ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009caa:	4614      	mov	r4, r2
 8009cac:	461a      	mov	r2, r3
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <__assert_func+0x2c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	68d8      	ldr	r0, [r3, #12]
 8009cb6:	b14c      	cbz	r4, 8009ccc <__assert_func+0x24>
 8009cb8:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <__assert_func+0x30>)
 8009cba:	9100      	str	r1, [sp, #0]
 8009cbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc0:	4906      	ldr	r1, [pc, #24]	; (8009cdc <__assert_func+0x34>)
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f000 f80e 	bl	8009ce4 <fiprintf>
 8009cc8:	f7fd ffd2 	bl	8007c70 <abort>
 8009ccc:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <__assert_func+0x38>)
 8009cce:	461c      	mov	r4, r3
 8009cd0:	e7f3      	b.n	8009cba <__assert_func+0x12>
 8009cd2:	bf00      	nop
 8009cd4:	20000030 	.word	0x20000030
 8009cd8:	0800aa9c 	.word	0x0800aa9c
 8009cdc:	0800aaa9 	.word	0x0800aaa9
 8009ce0:	0800aad7 	.word	0x0800aad7

08009ce4 <fiprintf>:
 8009ce4:	b40e      	push	{r1, r2, r3}
 8009ce6:	b503      	push	{r0, r1, lr}
 8009ce8:	4601      	mov	r1, r0
 8009cea:	ab03      	add	r3, sp, #12
 8009cec:	4805      	ldr	r0, [pc, #20]	; (8009d04 <fiprintf+0x20>)
 8009cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf2:	6800      	ldr	r0, [r0, #0]
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f000 f845 	bl	8009d84 <_vfiprintf_r>
 8009cfa:	b002      	add	sp, #8
 8009cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d00:	b003      	add	sp, #12
 8009d02:	4770      	bx	lr
 8009d04:	20000030 	.word	0x20000030

08009d08 <__retarget_lock_init_recursive>:
 8009d08:	4770      	bx	lr

08009d0a <__retarget_lock_acquire_recursive>:
 8009d0a:	4770      	bx	lr

08009d0c <__retarget_lock_release_recursive>:
 8009d0c:	4770      	bx	lr

08009d0e <__ascii_mbtowc>:
 8009d0e:	b082      	sub	sp, #8
 8009d10:	b901      	cbnz	r1, 8009d14 <__ascii_mbtowc+0x6>
 8009d12:	a901      	add	r1, sp, #4
 8009d14:	b142      	cbz	r2, 8009d28 <__ascii_mbtowc+0x1a>
 8009d16:	b14b      	cbz	r3, 8009d2c <__ascii_mbtowc+0x1e>
 8009d18:	7813      	ldrb	r3, [r2, #0]
 8009d1a:	600b      	str	r3, [r1, #0]
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	1e10      	subs	r0, r2, #0
 8009d20:	bf18      	it	ne
 8009d22:	2001      	movne	r0, #1
 8009d24:	b002      	add	sp, #8
 8009d26:	4770      	bx	lr
 8009d28:	4610      	mov	r0, r2
 8009d2a:	e7fb      	b.n	8009d24 <__ascii_mbtowc+0x16>
 8009d2c:	f06f 0001 	mvn.w	r0, #1
 8009d30:	e7f8      	b.n	8009d24 <__ascii_mbtowc+0x16>

08009d32 <__sfputc_r>:
 8009d32:	6893      	ldr	r3, [r2, #8]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	b410      	push	{r4}
 8009d3a:	6093      	str	r3, [r2, #8]
 8009d3c:	da08      	bge.n	8009d50 <__sfputc_r+0x1e>
 8009d3e:	6994      	ldr	r4, [r2, #24]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	db01      	blt.n	8009d48 <__sfputc_r+0x16>
 8009d44:	290a      	cmp	r1, #10
 8009d46:	d103      	bne.n	8009d50 <__sfputc_r+0x1e>
 8009d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d4c:	f000 b94a 	b.w	8009fe4 <__swbuf_r>
 8009d50:	6813      	ldr	r3, [r2, #0]
 8009d52:	1c58      	adds	r0, r3, #1
 8009d54:	6010      	str	r0, [r2, #0]
 8009d56:	7019      	strb	r1, [r3, #0]
 8009d58:	4608      	mov	r0, r1
 8009d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <__sfputs_r>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	4606      	mov	r6, r0
 8009d64:	460f      	mov	r7, r1
 8009d66:	4614      	mov	r4, r2
 8009d68:	18d5      	adds	r5, r2, r3
 8009d6a:	42ac      	cmp	r4, r5
 8009d6c:	d101      	bne.n	8009d72 <__sfputs_r+0x12>
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e007      	b.n	8009d82 <__sfputs_r+0x22>
 8009d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d76:	463a      	mov	r2, r7
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7ff ffda 	bl	8009d32 <__sfputc_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	d1f3      	bne.n	8009d6a <__sfputs_r+0xa>
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d84 <_vfiprintf_r>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460d      	mov	r5, r1
 8009d8a:	b09d      	sub	sp, #116	; 0x74
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	4698      	mov	r8, r3
 8009d90:	4606      	mov	r6, r0
 8009d92:	b118      	cbz	r0, 8009d9c <_vfiprintf_r+0x18>
 8009d94:	6983      	ldr	r3, [r0, #24]
 8009d96:	b90b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x18>
 8009d98:	f000 fb0c 	bl	800a3b4 <__sinit>
 8009d9c:	4b89      	ldr	r3, [pc, #548]	; (8009fc4 <_vfiprintf_r+0x240>)
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	d11b      	bne.n	8009dda <_vfiprintf_r+0x56>
 8009da2:	6875      	ldr	r5, [r6, #4]
 8009da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009da6:	07d9      	lsls	r1, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_vfiprintf_r+0x32>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	059a      	lsls	r2, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_vfiprintf_r+0x32>
 8009db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db2:	f7ff ffaa 	bl	8009d0a <__retarget_lock_acquire_recursive>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	071b      	lsls	r3, r3, #28
 8009dba:	d501      	bpl.n	8009dc0 <_vfiprintf_r+0x3c>
 8009dbc:	692b      	ldr	r3, [r5, #16]
 8009dbe:	b9eb      	cbnz	r3, 8009dfc <_vfiprintf_r+0x78>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 f96e 	bl	800a0a4 <__swsetup_r>
 8009dc8:	b1c0      	cbz	r0, 8009dfc <_vfiprintf_r+0x78>
 8009dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dcc:	07dc      	lsls	r4, r3, #31
 8009dce:	d50e      	bpl.n	8009dee <_vfiprintf_r+0x6a>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	b01d      	add	sp, #116	; 0x74
 8009dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dda:	4b7b      	ldr	r3, [pc, #492]	; (8009fc8 <_vfiprintf_r+0x244>)
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	d101      	bne.n	8009de4 <_vfiprintf_r+0x60>
 8009de0:	68b5      	ldr	r5, [r6, #8]
 8009de2:	e7df      	b.n	8009da4 <_vfiprintf_r+0x20>
 8009de4:	4b79      	ldr	r3, [pc, #484]	; (8009fcc <_vfiprintf_r+0x248>)
 8009de6:	429d      	cmp	r5, r3
 8009de8:	bf08      	it	eq
 8009dea:	68f5      	ldreq	r5, [r6, #12]
 8009dec:	e7da      	b.n	8009da4 <_vfiprintf_r+0x20>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	0598      	lsls	r0, r3, #22
 8009df2:	d4ed      	bmi.n	8009dd0 <_vfiprintf_r+0x4c>
 8009df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df6:	f7ff ff89 	bl	8009d0c <__retarget_lock_release_recursive>
 8009dfa:	e7e9      	b.n	8009dd0 <_vfiprintf_r+0x4c>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	2320      	movs	r3, #32
 8009e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e0a:	2330      	movs	r3, #48	; 0x30
 8009e0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fd0 <_vfiprintf_r+0x24c>
 8009e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e14:	f04f 0901 	mov.w	r9, #1
 8009e18:	4623      	mov	r3, r4
 8009e1a:	469a      	mov	sl, r3
 8009e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e20:	b10a      	cbz	r2, 8009e26 <_vfiprintf_r+0xa2>
 8009e22:	2a25      	cmp	r2, #37	; 0x25
 8009e24:	d1f9      	bne.n	8009e1a <_vfiprintf_r+0x96>
 8009e26:	ebba 0b04 	subs.w	fp, sl, r4
 8009e2a:	d00b      	beq.n	8009e44 <_vfiprintf_r+0xc0>
 8009e2c:	465b      	mov	r3, fp
 8009e2e:	4622      	mov	r2, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ff94 	bl	8009d60 <__sfputs_r>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f000 80aa 	beq.w	8009f92 <_vfiprintf_r+0x20e>
 8009e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e40:	445a      	add	r2, fp
 8009e42:	9209      	str	r2, [sp, #36]	; 0x24
 8009e44:	f89a 3000 	ldrb.w	r3, [sl]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80a2 	beq.w	8009f92 <_vfiprintf_r+0x20e>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e58:	f10a 0a01 	add.w	sl, sl, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	9307      	str	r3, [sp, #28]
 8009e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e64:	931a      	str	r3, [sp, #104]	; 0x68
 8009e66:	4654      	mov	r4, sl
 8009e68:	2205      	movs	r2, #5
 8009e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6e:	4858      	ldr	r0, [pc, #352]	; (8009fd0 <_vfiprintf_r+0x24c>)
 8009e70:	f7f6 f9b6 	bl	80001e0 <memchr>
 8009e74:	9a04      	ldr	r2, [sp, #16]
 8009e76:	b9d8      	cbnz	r0, 8009eb0 <_vfiprintf_r+0x12c>
 8009e78:	06d1      	lsls	r1, r2, #27
 8009e7a:	bf44      	itt	mi
 8009e7c:	2320      	movmi	r3, #32
 8009e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e82:	0713      	lsls	r3, r2, #28
 8009e84:	bf44      	itt	mi
 8009e86:	232b      	movmi	r3, #43	; 0x2b
 8009e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e90:	2b2a      	cmp	r3, #42	; 0x2a
 8009e92:	d015      	beq.n	8009ec0 <_vfiprintf_r+0x13c>
 8009e94:	9a07      	ldr	r2, [sp, #28]
 8009e96:	4654      	mov	r4, sl
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f04f 0c0a 	mov.w	ip, #10
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea4:	3b30      	subs	r3, #48	; 0x30
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	d94e      	bls.n	8009f48 <_vfiprintf_r+0x1c4>
 8009eaa:	b1b0      	cbz	r0, 8009eda <_vfiprintf_r+0x156>
 8009eac:	9207      	str	r2, [sp, #28]
 8009eae:	e014      	b.n	8009eda <_vfiprintf_r+0x156>
 8009eb0:	eba0 0308 	sub.w	r3, r0, r8
 8009eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	46a2      	mov	sl, r4
 8009ebe:	e7d2      	b.n	8009e66 <_vfiprintf_r+0xe2>
 8009ec0:	9b03      	ldr	r3, [sp, #12]
 8009ec2:	1d19      	adds	r1, r3, #4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	9103      	str	r1, [sp, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bfbb      	ittet	lt
 8009ecc:	425b      	neglt	r3, r3
 8009ece:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed2:	9307      	strge	r3, [sp, #28]
 8009ed4:	9307      	strlt	r3, [sp, #28]
 8009ed6:	bfb8      	it	lt
 8009ed8:	9204      	strlt	r2, [sp, #16]
 8009eda:	7823      	ldrb	r3, [r4, #0]
 8009edc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ede:	d10c      	bne.n	8009efa <_vfiprintf_r+0x176>
 8009ee0:	7863      	ldrb	r3, [r4, #1]
 8009ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee4:	d135      	bne.n	8009f52 <_vfiprintf_r+0x1ce>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	1d1a      	adds	r2, r3, #4
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	9203      	str	r2, [sp, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bfb8      	it	lt
 8009ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ef6:	3402      	adds	r4, #2
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fe0 <_vfiprintf_r+0x25c>
 8009efe:	7821      	ldrb	r1, [r4, #0]
 8009f00:	2203      	movs	r2, #3
 8009f02:	4650      	mov	r0, sl
 8009f04:	f7f6 f96c 	bl	80001e0 <memchr>
 8009f08:	b140      	cbz	r0, 8009f1c <_vfiprintf_r+0x198>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	eba0 000a 	sub.w	r0, r0, sl
 8009f10:	fa03 f000 	lsl.w	r0, r3, r0
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	4303      	orrs	r3, r0
 8009f18:	3401      	adds	r4, #1
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f20:	482c      	ldr	r0, [pc, #176]	; (8009fd4 <_vfiprintf_r+0x250>)
 8009f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f26:	2206      	movs	r2, #6
 8009f28:	f7f6 f95a 	bl	80001e0 <memchr>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d03f      	beq.n	8009fb0 <_vfiprintf_r+0x22c>
 8009f30:	4b29      	ldr	r3, [pc, #164]	; (8009fd8 <_vfiprintf_r+0x254>)
 8009f32:	bb1b      	cbnz	r3, 8009f7c <_vfiprintf_r+0x1f8>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	3307      	adds	r3, #7
 8009f38:	f023 0307 	bic.w	r3, r3, #7
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	9303      	str	r3, [sp, #12]
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	443b      	add	r3, r7
 8009f44:	9309      	str	r3, [sp, #36]	; 0x24
 8009f46:	e767      	b.n	8009e18 <_vfiprintf_r+0x94>
 8009f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	2001      	movs	r0, #1
 8009f50:	e7a5      	b.n	8009e9e <_vfiprintf_r+0x11a>
 8009f52:	2300      	movs	r3, #0
 8009f54:	3401      	adds	r4, #1
 8009f56:	9305      	str	r3, [sp, #20]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	f04f 0c0a 	mov.w	ip, #10
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f64:	3a30      	subs	r2, #48	; 0x30
 8009f66:	2a09      	cmp	r2, #9
 8009f68:	d903      	bls.n	8009f72 <_vfiprintf_r+0x1ee>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0c5      	beq.n	8009efa <_vfiprintf_r+0x176>
 8009f6e:	9105      	str	r1, [sp, #20]
 8009f70:	e7c3      	b.n	8009efa <_vfiprintf_r+0x176>
 8009f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f76:	4604      	mov	r4, r0
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e7f0      	b.n	8009f5e <_vfiprintf_r+0x1da>
 8009f7c:	ab03      	add	r3, sp, #12
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	462a      	mov	r2, r5
 8009f82:	4b16      	ldr	r3, [pc, #88]	; (8009fdc <_vfiprintf_r+0x258>)
 8009f84:	a904      	add	r1, sp, #16
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7fe f84a 	bl	8008020 <_printf_float>
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	1c78      	adds	r0, r7, #1
 8009f90:	d1d6      	bne.n	8009f40 <_vfiprintf_r+0x1bc>
 8009f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f94:	07d9      	lsls	r1, r3, #31
 8009f96:	d405      	bmi.n	8009fa4 <_vfiprintf_r+0x220>
 8009f98:	89ab      	ldrh	r3, [r5, #12]
 8009f9a:	059a      	lsls	r2, r3, #22
 8009f9c:	d402      	bmi.n	8009fa4 <_vfiprintf_r+0x220>
 8009f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa0:	f7ff feb4 	bl	8009d0c <__retarget_lock_release_recursive>
 8009fa4:	89ab      	ldrh	r3, [r5, #12]
 8009fa6:	065b      	lsls	r3, r3, #25
 8009fa8:	f53f af12 	bmi.w	8009dd0 <_vfiprintf_r+0x4c>
 8009fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fae:	e711      	b.n	8009dd4 <_vfiprintf_r+0x50>
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <_vfiprintf_r+0x258>)
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7fe fad4 	bl	8008568 <_printf_i>
 8009fc0:	e7e4      	b.n	8009f8c <_vfiprintf_r+0x208>
 8009fc2:	bf00      	nop
 8009fc4:	0800ac14 	.word	0x0800ac14
 8009fc8:	0800ac34 	.word	0x0800ac34
 8009fcc:	0800abf4 	.word	0x0800abf4
 8009fd0:	0800aae2 	.word	0x0800aae2
 8009fd4:	0800aaec 	.word	0x0800aaec
 8009fd8:	08008021 	.word	0x08008021
 8009fdc:	08009d61 	.word	0x08009d61
 8009fe0:	0800aae8 	.word	0x0800aae8

08009fe4 <__swbuf_r>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	4614      	mov	r4, r2
 8009fea:	4605      	mov	r5, r0
 8009fec:	b118      	cbz	r0, 8009ff6 <__swbuf_r+0x12>
 8009fee:	6983      	ldr	r3, [r0, #24]
 8009ff0:	b90b      	cbnz	r3, 8009ff6 <__swbuf_r+0x12>
 8009ff2:	f000 f9df 	bl	800a3b4 <__sinit>
 8009ff6:	4b21      	ldr	r3, [pc, #132]	; (800a07c <__swbuf_r+0x98>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d12b      	bne.n	800a054 <__swbuf_r+0x70>
 8009ffc:	686c      	ldr	r4, [r5, #4]
 8009ffe:	69a3      	ldr	r3, [r4, #24]
 800a000:	60a3      	str	r3, [r4, #8]
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	071a      	lsls	r2, r3, #28
 800a006:	d52f      	bpl.n	800a068 <__swbuf_r+0x84>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	b36b      	cbz	r3, 800a068 <__swbuf_r+0x84>
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	6820      	ldr	r0, [r4, #0]
 800a010:	1ac0      	subs	r0, r0, r3
 800a012:	6963      	ldr	r3, [r4, #20]
 800a014:	b2f6      	uxtb	r6, r6
 800a016:	4283      	cmp	r3, r0
 800a018:	4637      	mov	r7, r6
 800a01a:	dc04      	bgt.n	800a026 <__swbuf_r+0x42>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f934 	bl	800a28c <_fflush_r>
 800a024:	bb30      	cbnz	r0, 800a074 <__swbuf_r+0x90>
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	3b01      	subs	r3, #1
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	6022      	str	r2, [r4, #0]
 800a032:	701e      	strb	r6, [r3, #0]
 800a034:	6963      	ldr	r3, [r4, #20]
 800a036:	3001      	adds	r0, #1
 800a038:	4283      	cmp	r3, r0
 800a03a:	d004      	beq.n	800a046 <__swbuf_r+0x62>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	07db      	lsls	r3, r3, #31
 800a040:	d506      	bpl.n	800a050 <__swbuf_r+0x6c>
 800a042:	2e0a      	cmp	r6, #10
 800a044:	d104      	bne.n	800a050 <__swbuf_r+0x6c>
 800a046:	4621      	mov	r1, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f91f 	bl	800a28c <_fflush_r>
 800a04e:	b988      	cbnz	r0, 800a074 <__swbuf_r+0x90>
 800a050:	4638      	mov	r0, r7
 800a052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <__swbuf_r+0x9c>)
 800a056:	429c      	cmp	r4, r3
 800a058:	d101      	bne.n	800a05e <__swbuf_r+0x7a>
 800a05a:	68ac      	ldr	r4, [r5, #8]
 800a05c:	e7cf      	b.n	8009ffe <__swbuf_r+0x1a>
 800a05e:	4b09      	ldr	r3, [pc, #36]	; (800a084 <__swbuf_r+0xa0>)
 800a060:	429c      	cmp	r4, r3
 800a062:	bf08      	it	eq
 800a064:	68ec      	ldreq	r4, [r5, #12]
 800a066:	e7ca      	b.n	8009ffe <__swbuf_r+0x1a>
 800a068:	4621      	mov	r1, r4
 800a06a:	4628      	mov	r0, r5
 800a06c:	f000 f81a 	bl	800a0a4 <__swsetup_r>
 800a070:	2800      	cmp	r0, #0
 800a072:	d0cb      	beq.n	800a00c <__swbuf_r+0x28>
 800a074:	f04f 37ff 	mov.w	r7, #4294967295
 800a078:	e7ea      	b.n	800a050 <__swbuf_r+0x6c>
 800a07a:	bf00      	nop
 800a07c:	0800ac14 	.word	0x0800ac14
 800a080:	0800ac34 	.word	0x0800ac34
 800a084:	0800abf4 	.word	0x0800abf4

0800a088 <__ascii_wctomb>:
 800a088:	b149      	cbz	r1, 800a09e <__ascii_wctomb+0x16>
 800a08a:	2aff      	cmp	r2, #255	; 0xff
 800a08c:	bf85      	ittet	hi
 800a08e:	238a      	movhi	r3, #138	; 0x8a
 800a090:	6003      	strhi	r3, [r0, #0]
 800a092:	700a      	strbls	r2, [r1, #0]
 800a094:	f04f 30ff 	movhi.w	r0, #4294967295
 800a098:	bf98      	it	ls
 800a09a:	2001      	movls	r0, #1
 800a09c:	4770      	bx	lr
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <__swsetup_r>:
 800a0a4:	4b32      	ldr	r3, [pc, #200]	; (800a170 <__swsetup_r+0xcc>)
 800a0a6:	b570      	push	{r4, r5, r6, lr}
 800a0a8:	681d      	ldr	r5, [r3, #0]
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	b125      	cbz	r5, 800a0ba <__swsetup_r+0x16>
 800a0b0:	69ab      	ldr	r3, [r5, #24]
 800a0b2:	b913      	cbnz	r3, 800a0ba <__swsetup_r+0x16>
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f97d 	bl	800a3b4 <__sinit>
 800a0ba:	4b2e      	ldr	r3, [pc, #184]	; (800a174 <__swsetup_r+0xd0>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	d10f      	bne.n	800a0e0 <__swsetup_r+0x3c>
 800a0c0:	686c      	ldr	r4, [r5, #4]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c8:	0719      	lsls	r1, r3, #28
 800a0ca:	d42c      	bmi.n	800a126 <__swsetup_r+0x82>
 800a0cc:	06dd      	lsls	r5, r3, #27
 800a0ce:	d411      	bmi.n	800a0f4 <__swsetup_r+0x50>
 800a0d0:	2309      	movs	r3, #9
 800a0d2:	6033      	str	r3, [r6, #0]
 800a0d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	f04f 30ff 	mov.w	r0, #4294967295
 800a0de:	e03e      	b.n	800a15e <__swsetup_r+0xba>
 800a0e0:	4b25      	ldr	r3, [pc, #148]	; (800a178 <__swsetup_r+0xd4>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d101      	bne.n	800a0ea <__swsetup_r+0x46>
 800a0e6:	68ac      	ldr	r4, [r5, #8]
 800a0e8:	e7eb      	b.n	800a0c2 <__swsetup_r+0x1e>
 800a0ea:	4b24      	ldr	r3, [pc, #144]	; (800a17c <__swsetup_r+0xd8>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf08      	it	eq
 800a0f0:	68ec      	ldreq	r4, [r5, #12]
 800a0f2:	e7e6      	b.n	800a0c2 <__swsetup_r+0x1e>
 800a0f4:	0758      	lsls	r0, r3, #29
 800a0f6:	d512      	bpl.n	800a11e <__swsetup_r+0x7a>
 800a0f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0fa:	b141      	cbz	r1, 800a10e <__swsetup_r+0x6a>
 800a0fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a100:	4299      	cmp	r1, r3
 800a102:	d002      	beq.n	800a10a <__swsetup_r+0x66>
 800a104:	4630      	mov	r0, r6
 800a106:	f7fd fe0b 	bl	8007d20 <_free_r>
 800a10a:	2300      	movs	r3, #0
 800a10c:	6363      	str	r3, [r4, #52]	; 0x34
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	2300      	movs	r3, #0
 800a118:	6063      	str	r3, [r4, #4]
 800a11a:	6923      	ldr	r3, [r4, #16]
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0308 	orr.w	r3, r3, #8
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	b94b      	cbnz	r3, 800a13e <__swsetup_r+0x9a>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a134:	d003      	beq.n	800a13e <__swsetup_r+0x9a>
 800a136:	4621      	mov	r1, r4
 800a138:	4630      	mov	r0, r6
 800a13a:	f000 f9fd 	bl	800a538 <__smakebuf_r>
 800a13e:	89a0      	ldrh	r0, [r4, #12]
 800a140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a144:	f010 0301 	ands.w	r3, r0, #1
 800a148:	d00a      	beq.n	800a160 <__swsetup_r+0xbc>
 800a14a:	2300      	movs	r3, #0
 800a14c:	60a3      	str	r3, [r4, #8]
 800a14e:	6963      	ldr	r3, [r4, #20]
 800a150:	425b      	negs	r3, r3
 800a152:	61a3      	str	r3, [r4, #24]
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	b943      	cbnz	r3, 800a16a <__swsetup_r+0xc6>
 800a158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a15c:	d1ba      	bne.n	800a0d4 <__swsetup_r+0x30>
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	0781      	lsls	r1, r0, #30
 800a162:	bf58      	it	pl
 800a164:	6963      	ldrpl	r3, [r4, #20]
 800a166:	60a3      	str	r3, [r4, #8]
 800a168:	e7f4      	b.n	800a154 <__swsetup_r+0xb0>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e7f7      	b.n	800a15e <__swsetup_r+0xba>
 800a16e:	bf00      	nop
 800a170:	20000030 	.word	0x20000030
 800a174:	0800ac14 	.word	0x0800ac14
 800a178:	0800ac34 	.word	0x0800ac34
 800a17c:	0800abf4 	.word	0x0800abf4

0800a180 <__sflush_r>:
 800a180:	898a      	ldrh	r2, [r1, #12]
 800a182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	4605      	mov	r5, r0
 800a188:	0710      	lsls	r0, r2, #28
 800a18a:	460c      	mov	r4, r1
 800a18c:	d458      	bmi.n	800a240 <__sflush_r+0xc0>
 800a18e:	684b      	ldr	r3, [r1, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	dc05      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc02      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	d0f9      	beq.n	800a19a <__sflush_r+0x1a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1ac:	682f      	ldr	r7, [r5, #0]
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	d032      	beq.n	800a218 <__sflush_r+0x98>
 800a1b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	075a      	lsls	r2, r3, #29
 800a1b8:	d505      	bpl.n	800a1c6 <__sflush_r+0x46>
 800a1ba:	6863      	ldr	r3, [r4, #4]
 800a1bc:	1ac0      	subs	r0, r0, r3
 800a1be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1c0:	b10b      	cbz	r3, 800a1c6 <__sflush_r+0x46>
 800a1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c4:	1ac0      	subs	r0, r0, r3
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1cc:	6a21      	ldr	r1, [r4, #32]
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b0      	blx	r6
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	d106      	bne.n	800a1e6 <__sflush_r+0x66>
 800a1d8:	6829      	ldr	r1, [r5, #0]
 800a1da:	291d      	cmp	r1, #29
 800a1dc:	d82c      	bhi.n	800a238 <__sflush_r+0xb8>
 800a1de:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <__sflush_r+0x108>)
 800a1e0:	40ca      	lsrs	r2, r1
 800a1e2:	07d6      	lsls	r6, r2, #31
 800a1e4:	d528      	bpl.n	800a238 <__sflush_r+0xb8>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	6062      	str	r2, [r4, #4]
 800a1ea:	04d9      	lsls	r1, r3, #19
 800a1ec:	6922      	ldr	r2, [r4, #16]
 800a1ee:	6022      	str	r2, [r4, #0]
 800a1f0:	d504      	bpl.n	800a1fc <__sflush_r+0x7c>
 800a1f2:	1c42      	adds	r2, r0, #1
 800a1f4:	d101      	bne.n	800a1fa <__sflush_r+0x7a>
 800a1f6:	682b      	ldr	r3, [r5, #0]
 800a1f8:	b903      	cbnz	r3, 800a1fc <__sflush_r+0x7c>
 800a1fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fe:	602f      	str	r7, [r5, #0]
 800a200:	2900      	cmp	r1, #0
 800a202:	d0ca      	beq.n	800a19a <__sflush_r+0x1a>
 800a204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a208:	4299      	cmp	r1, r3
 800a20a:	d002      	beq.n	800a212 <__sflush_r+0x92>
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7fd fd87 	bl	8007d20 <_free_r>
 800a212:	2000      	movs	r0, #0
 800a214:	6360      	str	r0, [r4, #52]	; 0x34
 800a216:	e7c1      	b.n	800a19c <__sflush_r+0x1c>
 800a218:	6a21      	ldr	r1, [r4, #32]
 800a21a:	2301      	movs	r3, #1
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b0      	blx	r6
 800a220:	1c41      	adds	r1, r0, #1
 800a222:	d1c7      	bne.n	800a1b4 <__sflush_r+0x34>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c4      	beq.n	800a1b4 <__sflush_r+0x34>
 800a22a:	2b1d      	cmp	r3, #29
 800a22c:	d001      	beq.n	800a232 <__sflush_r+0xb2>
 800a22e:	2b16      	cmp	r3, #22
 800a230:	d101      	bne.n	800a236 <__sflush_r+0xb6>
 800a232:	602f      	str	r7, [r5, #0]
 800a234:	e7b1      	b.n	800a19a <__sflush_r+0x1a>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7ad      	b.n	800a19c <__sflush_r+0x1c>
 800a240:	690f      	ldr	r7, [r1, #16]
 800a242:	2f00      	cmp	r7, #0
 800a244:	d0a9      	beq.n	800a19a <__sflush_r+0x1a>
 800a246:	0793      	lsls	r3, r2, #30
 800a248:	680e      	ldr	r6, [r1, #0]
 800a24a:	bf08      	it	eq
 800a24c:	694b      	ldreq	r3, [r1, #20]
 800a24e:	600f      	str	r7, [r1, #0]
 800a250:	bf18      	it	ne
 800a252:	2300      	movne	r3, #0
 800a254:	eba6 0807 	sub.w	r8, r6, r7
 800a258:	608b      	str	r3, [r1, #8]
 800a25a:	f1b8 0f00 	cmp.w	r8, #0
 800a25e:	dd9c      	ble.n	800a19a <__sflush_r+0x1a>
 800a260:	6a21      	ldr	r1, [r4, #32]
 800a262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a264:	4643      	mov	r3, r8
 800a266:	463a      	mov	r2, r7
 800a268:	4628      	mov	r0, r5
 800a26a:	47b0      	blx	r6
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dc06      	bgt.n	800a27e <__sflush_r+0xfe>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e78e      	b.n	800a19c <__sflush_r+0x1c>
 800a27e:	4407      	add	r7, r0
 800a280:	eba8 0800 	sub.w	r8, r8, r0
 800a284:	e7e9      	b.n	800a25a <__sflush_r+0xda>
 800a286:	bf00      	nop
 800a288:	20400001 	.word	0x20400001

0800a28c <_fflush_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b913      	cbnz	r3, 800a29c <_fflush_r+0x10>
 800a296:	2500      	movs	r5, #0
 800a298:	4628      	mov	r0, r5
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	b118      	cbz	r0, 800a2a6 <_fflush_r+0x1a>
 800a29e:	6983      	ldr	r3, [r0, #24]
 800a2a0:	b90b      	cbnz	r3, 800a2a6 <_fflush_r+0x1a>
 800a2a2:	f000 f887 	bl	800a3b4 <__sinit>
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <_fflush_r+0x6c>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d11b      	bne.n	800a2e4 <_fflush_r+0x58>
 800a2ac:	686c      	ldr	r4, [r5, #4]
 800a2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ef      	beq.n	800a296 <_fflush_r+0xa>
 800a2b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b8:	07d0      	lsls	r0, r2, #31
 800a2ba:	d404      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2bc:	0599      	lsls	r1, r3, #22
 800a2be:	d402      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c2:	f7ff fd22 	bl	8009d0a <__retarget_lock_acquire_recursive>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f7ff ff59 	bl	800a180 <__sflush_r>
 800a2ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	d4e0      	bmi.n	800a298 <_fflush_r+0xc>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	059b      	lsls	r3, r3, #22
 800a2da:	d4dd      	bmi.n	800a298 <_fflush_r+0xc>
 800a2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2de:	f7ff fd15 	bl	8009d0c <__retarget_lock_release_recursive>
 800a2e2:	e7d9      	b.n	800a298 <_fflush_r+0xc>
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <_fflush_r+0x70>)
 800a2e6:	429c      	cmp	r4, r3
 800a2e8:	d101      	bne.n	800a2ee <_fflush_r+0x62>
 800a2ea:	68ac      	ldr	r4, [r5, #8]
 800a2ec:	e7df      	b.n	800a2ae <_fflush_r+0x22>
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <_fflush_r+0x74>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	bf08      	it	eq
 800a2f4:	68ec      	ldreq	r4, [r5, #12]
 800a2f6:	e7da      	b.n	800a2ae <_fflush_r+0x22>
 800a2f8:	0800ac14 	.word	0x0800ac14
 800a2fc:	0800ac34 	.word	0x0800ac34
 800a300:	0800abf4 	.word	0x0800abf4

0800a304 <std>:
 800a304:	2300      	movs	r3, #0
 800a306:	b510      	push	{r4, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	e9c0 3300 	strd	r3, r3, [r0]
 800a30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a312:	6083      	str	r3, [r0, #8]
 800a314:	8181      	strh	r1, [r0, #12]
 800a316:	6643      	str	r3, [r0, #100]	; 0x64
 800a318:	81c2      	strh	r2, [r0, #14]
 800a31a:	6183      	str	r3, [r0, #24]
 800a31c:	4619      	mov	r1, r3
 800a31e:	2208      	movs	r2, #8
 800a320:	305c      	adds	r0, #92	; 0x5c
 800a322:	f7fd fcf5 	bl	8007d10 <memset>
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <std+0x38>)
 800a328:	6263      	str	r3, [r4, #36]	; 0x24
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <std+0x3c>)
 800a32c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <std+0x40>)
 800a330:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <std+0x44>)
 800a334:	6224      	str	r4, [r4, #32]
 800a336:	6323      	str	r3, [r4, #48]	; 0x30
 800a338:	bd10      	pop	{r4, pc}
 800a33a:	bf00      	nop
 800a33c:	0800a5b9 	.word	0x0800a5b9
 800a340:	0800a5db 	.word	0x0800a5db
 800a344:	0800a613 	.word	0x0800a613
 800a348:	0800a637 	.word	0x0800a637

0800a34c <_cleanup_r>:
 800a34c:	4901      	ldr	r1, [pc, #4]	; (800a354 <_cleanup_r+0x8>)
 800a34e:	f000 b8af 	b.w	800a4b0 <_fwalk_reent>
 800a352:	bf00      	nop
 800a354:	0800a28d 	.word	0x0800a28d

0800a358 <__sfmoreglue>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	2268      	movs	r2, #104	; 0x68
 800a35c:	1e4d      	subs	r5, r1, #1
 800a35e:	4355      	muls	r5, r2
 800a360:	460e      	mov	r6, r1
 800a362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a366:	f7fd fd47 	bl	8007df8 <_malloc_r>
 800a36a:	4604      	mov	r4, r0
 800a36c:	b140      	cbz	r0, 800a380 <__sfmoreglue+0x28>
 800a36e:	2100      	movs	r1, #0
 800a370:	e9c0 1600 	strd	r1, r6, [r0]
 800a374:	300c      	adds	r0, #12
 800a376:	60a0      	str	r0, [r4, #8]
 800a378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a37c:	f7fd fcc8 	bl	8007d10 <memset>
 800a380:	4620      	mov	r0, r4
 800a382:	bd70      	pop	{r4, r5, r6, pc}

0800a384 <__sfp_lock_acquire>:
 800a384:	4801      	ldr	r0, [pc, #4]	; (800a38c <__sfp_lock_acquire+0x8>)
 800a386:	f7ff bcc0 	b.w	8009d0a <__retarget_lock_acquire_recursive>
 800a38a:	bf00      	nop
 800a38c:	20004c05 	.word	0x20004c05

0800a390 <__sfp_lock_release>:
 800a390:	4801      	ldr	r0, [pc, #4]	; (800a398 <__sfp_lock_release+0x8>)
 800a392:	f7ff bcbb 	b.w	8009d0c <__retarget_lock_release_recursive>
 800a396:	bf00      	nop
 800a398:	20004c05 	.word	0x20004c05

0800a39c <__sinit_lock_acquire>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__sinit_lock_acquire+0x8>)
 800a39e:	f7ff bcb4 	b.w	8009d0a <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20004c06 	.word	0x20004c06

0800a3a8 <__sinit_lock_release>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__sinit_lock_release+0x8>)
 800a3aa:	f7ff bcaf 	b.w	8009d0c <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20004c06 	.word	0x20004c06

0800a3b4 <__sinit>:
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	f7ff fff0 	bl	800a39c <__sinit_lock_acquire>
 800a3bc:	69a3      	ldr	r3, [r4, #24]
 800a3be:	b11b      	cbz	r3, 800a3c8 <__sinit+0x14>
 800a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c4:	f7ff bff0 	b.w	800a3a8 <__sinit_lock_release>
 800a3c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ce:	4b13      	ldr	r3, [pc, #76]	; (800a41c <__sinit+0x68>)
 800a3d0:	4a13      	ldr	r2, [pc, #76]	; (800a420 <__sinit+0x6c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	bf04      	itt	eq
 800a3da:	2301      	moveq	r3, #1
 800a3dc:	61a3      	streq	r3, [r4, #24]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 f820 	bl	800a424 <__sfp>
 800a3e4:	6060      	str	r0, [r4, #4]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 f81c 	bl	800a424 <__sfp>
 800a3ec:	60a0      	str	r0, [r4, #8]
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f000 f818 	bl	800a424 <__sfp>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	60e0      	str	r0, [r4, #12]
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	6860      	ldr	r0, [r4, #4]
 800a3fc:	f7ff ff82 	bl	800a304 <std>
 800a400:	68a0      	ldr	r0, [r4, #8]
 800a402:	2201      	movs	r2, #1
 800a404:	2109      	movs	r1, #9
 800a406:	f7ff ff7d 	bl	800a304 <std>
 800a40a:	68e0      	ldr	r0, [r4, #12]
 800a40c:	2202      	movs	r2, #2
 800a40e:	2112      	movs	r1, #18
 800a410:	f7ff ff78 	bl	800a304 <std>
 800a414:	2301      	movs	r3, #1
 800a416:	61a3      	str	r3, [r4, #24]
 800a418:	e7d2      	b.n	800a3c0 <__sinit+0xc>
 800a41a:	bf00      	nop
 800a41c:	0800a87c 	.word	0x0800a87c
 800a420:	0800a34d 	.word	0x0800a34d

0800a424 <__sfp>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	4607      	mov	r7, r0
 800a428:	f7ff ffac 	bl	800a384 <__sfp_lock_acquire>
 800a42c:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <__sfp+0x84>)
 800a42e:	681e      	ldr	r6, [r3, #0]
 800a430:	69b3      	ldr	r3, [r6, #24]
 800a432:	b913      	cbnz	r3, 800a43a <__sfp+0x16>
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffbd 	bl	800a3b4 <__sinit>
 800a43a:	3648      	adds	r6, #72	; 0x48
 800a43c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a440:	3b01      	subs	r3, #1
 800a442:	d503      	bpl.n	800a44c <__sfp+0x28>
 800a444:	6833      	ldr	r3, [r6, #0]
 800a446:	b30b      	cbz	r3, 800a48c <__sfp+0x68>
 800a448:	6836      	ldr	r6, [r6, #0]
 800a44a:	e7f7      	b.n	800a43c <__sfp+0x18>
 800a44c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a450:	b9d5      	cbnz	r5, 800a488 <__sfp+0x64>
 800a452:	4b16      	ldr	r3, [pc, #88]	; (800a4ac <__sfp+0x88>)
 800a454:	60e3      	str	r3, [r4, #12]
 800a456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a45a:	6665      	str	r5, [r4, #100]	; 0x64
 800a45c:	f7ff fc54 	bl	8009d08 <__retarget_lock_init_recursive>
 800a460:	f7ff ff96 	bl	800a390 <__sfp_lock_release>
 800a464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a46c:	6025      	str	r5, [r4, #0]
 800a46e:	61a5      	str	r5, [r4, #24]
 800a470:	2208      	movs	r2, #8
 800a472:	4629      	mov	r1, r5
 800a474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a478:	f7fd fc4a 	bl	8007d10 <memset>
 800a47c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a484:	4620      	mov	r0, r4
 800a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a488:	3468      	adds	r4, #104	; 0x68
 800a48a:	e7d9      	b.n	800a440 <__sfp+0x1c>
 800a48c:	2104      	movs	r1, #4
 800a48e:	4638      	mov	r0, r7
 800a490:	f7ff ff62 	bl	800a358 <__sfmoreglue>
 800a494:	4604      	mov	r4, r0
 800a496:	6030      	str	r0, [r6, #0]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1d5      	bne.n	800a448 <__sfp+0x24>
 800a49c:	f7ff ff78 	bl	800a390 <__sfp_lock_release>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	e7ee      	b.n	800a484 <__sfp+0x60>
 800a4a6:	bf00      	nop
 800a4a8:	0800a87c 	.word	0x0800a87c
 800a4ac:	ffff0001 	.word	0xffff0001

0800a4b0 <_fwalk_reent>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	4688      	mov	r8, r1
 800a4b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4bc:	2700      	movs	r7, #0
 800a4be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c6:	d505      	bpl.n	800a4d4 <_fwalk_reent+0x24>
 800a4c8:	6824      	ldr	r4, [r4, #0]
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d1f7      	bne.n	800a4be <_fwalk_reent+0xe>
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d4:	89ab      	ldrh	r3, [r5, #12]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d907      	bls.n	800a4ea <_fwalk_reent+0x3a>
 800a4da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	d003      	beq.n	800a4ea <_fwalk_reent+0x3a>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	47c0      	blx	r8
 800a4e8:	4307      	orrs	r7, r0
 800a4ea:	3568      	adds	r5, #104	; 0x68
 800a4ec:	e7e9      	b.n	800a4c2 <_fwalk_reent+0x12>

0800a4ee <__swhatbuf_r>:
 800a4ee:	b570      	push	{r4, r5, r6, lr}
 800a4f0:	460e      	mov	r6, r1
 800a4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	b096      	sub	sp, #88	; 0x58
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	461d      	mov	r5, r3
 800a4fe:	da08      	bge.n	800a512 <__swhatbuf_r+0x24>
 800a500:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	602a      	str	r2, [r5, #0]
 800a508:	061a      	lsls	r2, r3, #24
 800a50a:	d410      	bmi.n	800a52e <__swhatbuf_r+0x40>
 800a50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a510:	e00e      	b.n	800a530 <__swhatbuf_r+0x42>
 800a512:	466a      	mov	r2, sp
 800a514:	f000 f8b6 	bl	800a684 <_fstat_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	dbf1      	blt.n	800a500 <__swhatbuf_r+0x12>
 800a51c:	9a01      	ldr	r2, [sp, #4]
 800a51e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a526:	425a      	negs	r2, r3
 800a528:	415a      	adcs	r2, r3
 800a52a:	602a      	str	r2, [r5, #0]
 800a52c:	e7ee      	b.n	800a50c <__swhatbuf_r+0x1e>
 800a52e:	2340      	movs	r3, #64	; 0x40
 800a530:	2000      	movs	r0, #0
 800a532:	6023      	str	r3, [r4, #0]
 800a534:	b016      	add	sp, #88	; 0x58
 800a536:	bd70      	pop	{r4, r5, r6, pc}

0800a538 <__smakebuf_r>:
 800a538:	898b      	ldrh	r3, [r1, #12]
 800a53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a53c:	079d      	lsls	r5, r3, #30
 800a53e:	4606      	mov	r6, r0
 800a540:	460c      	mov	r4, r1
 800a542:	d507      	bpl.n	800a554 <__smakebuf_r+0x1c>
 800a544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	2301      	movs	r3, #1
 800a54e:	6163      	str	r3, [r4, #20]
 800a550:	b002      	add	sp, #8
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	ab01      	add	r3, sp, #4
 800a556:	466a      	mov	r2, sp
 800a558:	f7ff ffc9 	bl	800a4ee <__swhatbuf_r>
 800a55c:	9900      	ldr	r1, [sp, #0]
 800a55e:	4605      	mov	r5, r0
 800a560:	4630      	mov	r0, r6
 800a562:	f7fd fc49 	bl	8007df8 <_malloc_r>
 800a566:	b948      	cbnz	r0, 800a57c <__smakebuf_r+0x44>
 800a568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d4ef      	bmi.n	800a550 <__smakebuf_r+0x18>
 800a570:	f023 0303 	bic.w	r3, r3, #3
 800a574:	f043 0302 	orr.w	r3, r3, #2
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	e7e3      	b.n	800a544 <__smakebuf_r+0xc>
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <__smakebuf_r+0x7c>)
 800a57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	6020      	str	r0, [r4, #0]
 800a584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	6163      	str	r3, [r4, #20]
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	6120      	str	r0, [r4, #16]
 800a592:	b15b      	cbz	r3, 800a5ac <__smakebuf_r+0x74>
 800a594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f885 	bl	800a6a8 <_isatty_r>
 800a59e:	b128      	cbz	r0, 800a5ac <__smakebuf_r+0x74>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	89a0      	ldrh	r0, [r4, #12]
 800a5ae:	4305      	orrs	r5, r0
 800a5b0:	81a5      	strh	r5, [r4, #12]
 800a5b2:	e7cd      	b.n	800a550 <__smakebuf_r+0x18>
 800a5b4:	0800a34d 	.word	0x0800a34d

0800a5b8 <__sread>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	f000 f894 	bl	800a6ec <_read_r>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	bfab      	itete	ge
 800a5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a5cc:	181b      	addge	r3, r3, r0
 800a5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d2:	bfac      	ite	ge
 800a5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5d6:	81a3      	strhlt	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__swrite>:
 800a5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	461f      	mov	r7, r3
 800a5e0:	898b      	ldrh	r3, [r1, #12]
 800a5e2:	05db      	lsls	r3, r3, #23
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	d505      	bpl.n	800a5f8 <__swrite+0x1e>
 800a5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f000 f868 	bl	800a6c8 <_lseek_r>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	4632      	mov	r2, r6
 800a606:	463b      	mov	r3, r7
 800a608:	4628      	mov	r0, r5
 800a60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60e:	f000 b817 	b.w	800a640 <_write_r>

0800a612 <__sseek>:
 800a612:	b510      	push	{r4, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61a:	f000 f855 	bl	800a6c8 <_lseek_r>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	bf15      	itete	ne
 800a624:	6560      	strne	r0, [r4, #84]	; 0x54
 800a626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a62e:	81a3      	strheq	r3, [r4, #12]
 800a630:	bf18      	it	ne
 800a632:	81a3      	strhne	r3, [r4, #12]
 800a634:	bd10      	pop	{r4, pc}

0800a636 <__sclose>:
 800a636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63a:	f000 b813 	b.w	800a664 <_close_r>
	...

0800a640 <_write_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	; (800a660 <_write_r+0x20>)
 800a644:	4604      	mov	r4, r0
 800a646:	4608      	mov	r0, r1
 800a648:	4611      	mov	r1, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7f7 f94c 	bl	80018ec <_write>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_write_r+0x1e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_write_r+0x1e>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20004c00 	.word	0x20004c00

0800a664 <_close_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d06      	ldr	r5, [pc, #24]	; (800a680 <_close_r+0x1c>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	f7f7 f958 	bl	8001924 <_close>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_close_r+0x1a>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_close_r+0x1a>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20004c00 	.word	0x20004c00

0800a684 <_fstat_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_fstat_r+0x20>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	4611      	mov	r1, r2
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	f7f7 f953 	bl	800193c <_fstat>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	d102      	bne.n	800a6a0 <_fstat_r+0x1c>
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	b103      	cbz	r3, 800a6a0 <_fstat_r+0x1c>
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20004c00 	.word	0x20004c00

0800a6a8 <_isatty_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d06      	ldr	r5, [pc, #24]	; (800a6c4 <_isatty_r+0x1c>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	602b      	str	r3, [r5, #0]
 800a6b4:	f7f7 f952 	bl	800195c <_isatty>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d102      	bne.n	800a6c2 <_isatty_r+0x1a>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	b103      	cbz	r3, 800a6c2 <_isatty_r+0x1a>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}
 800a6c4:	20004c00 	.word	0x20004c00

0800a6c8 <_lseek_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_lseek_r+0x20>)
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	602a      	str	r2, [r5, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f7f7 f94b 	bl	8001972 <_lseek>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_lseek_r+0x1e>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_lseek_r+0x1e>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20004c00 	.word	0x20004c00

0800a6ec <_read_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d07      	ldr	r5, [pc, #28]	; (800a70c <_read_r+0x20>)
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f7 f8d9 	bl	80018b2 <_read>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_read_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_read_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20004c00 	.word	0x20004c00

0800a710 <_init>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr

0800a71c <_fini>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr
